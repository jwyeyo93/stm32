
stm32f746ng_usart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036c0  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003888  08003888  00013888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003914  08003914  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003914  08003914  00013914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800391c  0800391c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800391c  0800391c  0001391c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003920  08003920  00013920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000070  08003994  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08003994  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a410  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b1e  00000000  00000000  0002a4b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000810  00000000  00000000  0002bfd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000718  00000000  00000000  0002c7e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025e70  00000000  00000000  0002cef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000081eb  00000000  00000000  00052d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e5f7f  00000000  00000000  0005af53  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00140ed2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002488  00000000  00000000  00140f50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003870 	.word	0x08003870

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000074 	.word	0x20000074
 8000204:	08003870 	.word	0x08003870

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	; 0x28
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051e:	4b20      	ldr	r3, [pc, #128]	; (80005a0 <MX_GPIO_Init+0x98>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a1f      	ldr	r2, [pc, #124]	; (80005a0 <MX_GPIO_Init+0x98>)
 8000524:	f043 0302 	orr.w	r3, r3, #2
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b1d      	ldr	r3, [pc, #116]	; (80005a0 <MX_GPIO_Init+0x98>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0302 	and.w	r3, r3, #2
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <MX_GPIO_Init+0x98>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a19      	ldr	r2, [pc, #100]	; (80005a0 <MX_GPIO_Init+0x98>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <MX_GPIO_Init+0x98>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800054e:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <MX_GPIO_Init+0x98>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	4a13      	ldr	r2, [pc, #76]	; (80005a0 <MX_GPIO_Init+0x98>)
 8000554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000558:	6313      	str	r3, [r2, #48]	; 0x30
 800055a:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <MX_GPIO_Init+0x98>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000566:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <MX_GPIO_Init+0x98>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	4a0d      	ldr	r2, [pc, #52]	; (80005a0 <MX_GPIO_Init+0x98>)
 800056c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000570:	6313      	str	r3, [r2, #48]	; 0x30
 8000572:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <MX_GPIO_Init+0x98>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800057e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000584:	2300      	movs	r3, #0
 8000586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	4619      	mov	r1, r3
 8000592:	4804      	ldr	r0, [pc, #16]	; (80005a4 <MX_GPIO_Init+0x9c>)
 8000594:	f000 fc58 	bl	8000e48 <HAL_GPIO_Init>

}
 8000598:	bf00      	nop
 800059a:	3728      	adds	r7, #40	; 0x28
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40023800 	.word	0x40023800
 80005a4:	40022000 	.word	0x40022000

080005a8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	if(ch == '\n')
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2b0a      	cmp	r3, #10
 80005b4:	d106      	bne.n	80005c4 <__io_putchar+0x1c>
	{
		HAL_UART_Transmit(&huart1, (uint8_t *) "\r", 1, 0xFFFF);
 80005b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005ba:	2201      	movs	r2, #1
 80005bc:	4907      	ldr	r1, [pc, #28]	; (80005dc <__io_putchar+0x34>)
 80005be:	4808      	ldr	r0, [pc, #32]	; (80005e0 <__io_putchar+0x38>)
 80005c0:	f001 fe9e 	bl	8002300 <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 0xFFFF);
 80005c4:	1d39      	adds	r1, r7, #4
 80005c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005ca:	2201      	movs	r2, #1
 80005cc:	4804      	ldr	r0, [pc, #16]	; (80005e0 <__io_putchar+0x38>)
 80005ce:	f001 fe97 	bl	8002300 <HAL_UART_Transmit>

	return ch;
 80005d2:	687b      	ldr	r3, [r7, #4]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	08003888 	.word	0x08003888
 80005e0:	20000098 	.word	0x20000098

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f000 fa7b 	bl	8000ae2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f80e 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f7ff ff8a 	bl	8000508 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005f4:	f000 f9b2 	bl	800095c <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Hello World\n");
 80005f8:	4803      	ldr	r0, [pc, #12]	; (8000608 <main+0x24>)
 80005fa:	f002 fd2d 	bl	8003058 <puts>
	  HAL_Delay(1000);
 80005fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000602:	f000 facb 	bl	8000b9c <HAL_Delay>
	  printf("Hello World\n");
 8000606:	e7f7      	b.n	80005f8 <main+0x14>
 8000608:	0800388c 	.word	0x0800388c

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b0b4      	sub	sp, #208	; 0xd0
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000616:	2230      	movs	r2, #48	; 0x30
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f002 fcb8 	bl	8002f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000630:	f107 0308 	add.w	r3, r7, #8
 8000634:	2284      	movs	r2, #132	; 0x84
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f002 fca9 	bl	8002f90 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063e:	4b36      	ldr	r3, [pc, #216]	; (8000718 <SystemClock_Config+0x10c>)
 8000640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000642:	4a35      	ldr	r2, [pc, #212]	; (8000718 <SystemClock_Config+0x10c>)
 8000644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000648:	6413      	str	r3, [r2, #64]	; 0x40
 800064a:	4b33      	ldr	r3, [pc, #204]	; (8000718 <SystemClock_Config+0x10c>)
 800064c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000656:	4b31      	ldr	r3, [pc, #196]	; (800071c <SystemClock_Config+0x110>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800065e:	4a2f      	ldr	r2, [pc, #188]	; (800071c <SystemClock_Config+0x110>)
 8000660:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000664:	6013      	str	r3, [r2, #0]
 8000666:	4b2d      	ldr	r3, [pc, #180]	; (800071c <SystemClock_Config+0x110>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000672:	2301      	movs	r3, #1
 8000674:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000678:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800067c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000680:	2302      	movs	r3, #2
 8000682:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000686:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 15;
 800068e:	230f      	movs	r3, #15
 8000690:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000694:	23c0      	movs	r3, #192	; 0xc0
 8000696:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069a:	2302      	movs	r3, #2
 800069c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fd76 	bl	800119c <HAL_RCC_OscConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006b6:	f000 f833 	bl	8000720 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ba:	230f      	movs	r3, #15
 80006bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2302      	movs	r3, #2
 80006c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006dc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006e0:	2105      	movs	r1, #5
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fffe 	bl	80016e4 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80006ee:	f000 f817 	bl	8000720 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80006f2:	2340      	movs	r3, #64	; 0x40
 80006f4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006f6:	2300      	movs	r3, #0
 80006f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 f9c2 	bl	8001a88 <HAL_RCCEx_PeriphCLKConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x102>
  {
    Error_Handler();
 800070a:	f000 f809 	bl	8000720 <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	37d0      	adds	r7, #208	; 0xd0
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
	...

08000730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <HAL_MspInit+0x44>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073a:	4a0e      	ldr	r2, [pc, #56]	; (8000774 <HAL_MspInit+0x44>)
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000740:	6413      	str	r3, [r2, #64]	; 0x40
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <HAL_MspInit+0x44>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <HAL_MspInit+0x44>)
 8000750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000752:	4a08      	ldr	r2, [pc, #32]	; (8000774 <HAL_MspInit+0x44>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6453      	str	r3, [r2, #68]	; 0x44
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_MspInit+0x44>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800

08000778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078a:	e7fe      	b.n	800078a <HardFault_Handler+0x4>

0800078c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <MemManage_Handler+0x4>

08000792 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <BusFault_Handler+0x4>

08000798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800079c:	e7fe      	b.n	800079c <UsageFault_Handler+0x4>

0800079e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007cc:	f000 f9c6 	bl	8000b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007d8:	4802      	ldr	r0, [pc, #8]	; (80007e4 <USART1_IRQHandler+0x10>)
 80007da:	f001 fe23 	bl	8002424 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000098 	.word	0x20000098

080007e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	e00a      	b.n	8000810 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007fa:	f3af 8000 	nop.w
 80007fe:	4601      	mov	r1, r0
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	60ba      	str	r2, [r7, #8]
 8000806:	b2ca      	uxtb	r2, r1
 8000808:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	3301      	adds	r3, #1
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697a      	ldr	r2, [r7, #20]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	429a      	cmp	r2, r3
 8000816:	dbf0      	blt.n	80007fa <_read+0x12>
	}

return len;
 8000818:	687b      	ldr	r3, [r7, #4]
}
 800081a:	4618      	mov	r0, r3
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b086      	sub	sp, #24
 8000826:	af00      	add	r7, sp, #0
 8000828:	60f8      	str	r0, [r7, #12]
 800082a:	60b9      	str	r1, [r7, #8]
 800082c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
 8000832:	e009      	b.n	8000848 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	60ba      	str	r2, [r7, #8]
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff feb3 	bl	80005a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	3301      	adds	r3, #1
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	697a      	ldr	r2, [r7, #20]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	429a      	cmp	r2, r3
 800084e:	dbf1      	blt.n	8000834 <_write+0x12>
	}
	return len;
 8000850:	687b      	ldr	r3, [r7, #4]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <_close>:

int _close(int file)
{
 800085a:	b480      	push	{r7}
 800085c:	b083      	sub	sp, #12
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
	return -1;
 8000862:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000866:	4618      	mov	r0, r3
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000872:	b480      	push	{r7}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
 800087a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000882:	605a      	str	r2, [r3, #4]
	return 0;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <_isatty>:

int _isatty(int file)
{
 8000892:	b480      	push	{r7}
 8000894:	b083      	sub	sp, #12
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
	return 1;
 800089a:	2301      	movs	r3, #1
}
 800089c:	4618      	mov	r0, r3
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
	return 0;
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
	...

080008c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008cc:	4a14      	ldr	r2, [pc, #80]	; (8000920 <_sbrk+0x5c>)
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <_sbrk+0x60>)
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d8:	4b13      	ldr	r3, [pc, #76]	; (8000928 <_sbrk+0x64>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d102      	bne.n	80008e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <_sbrk+0x64>)
 80008e2:	4a12      	ldr	r2, [pc, #72]	; (800092c <_sbrk+0x68>)
 80008e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <_sbrk+0x64>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d207      	bcs.n	8000904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f4:	f002 fb22 	bl	8002f3c <__errno>
 80008f8:	4602      	mov	r2, r0
 80008fa:	230c      	movs	r3, #12
 80008fc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000902:	e009      	b.n	8000918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <_sbrk+0x64>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800090a:	4b07      	ldr	r3, [pc, #28]	; (8000928 <_sbrk+0x64>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	4a05      	ldr	r2, [pc, #20]	; (8000928 <_sbrk+0x64>)
 8000914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000916:	68fb      	ldr	r3, [r7, #12]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20050000 	.word	0x20050000
 8000924:	00000400 	.word	0x00000400
 8000928:	2000008c 	.word	0x2000008c
 800092c:	20000120 	.word	0x20000120

08000930 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <SystemInit+0x28>)
 8000936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800093a:	4a07      	ldr	r2, [pc, #28]	; (8000958 <SystemInit+0x28>)
 800093c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000940:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000944:	4b04      	ldr	r3, [pc, #16]	; (8000958 <SystemInit+0x28>)
 8000946:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800094a:	609a      	str	r2, [r3, #8]
#endif
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_USART1_UART_Init+0x58>)
 8000962:	4a15      	ldr	r2, [pc, #84]	; (80009b8 <MX_USART1_UART_Init+0x5c>)
 8000964:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_USART1_UART_Init+0x58>)
 8000968:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800096c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_USART1_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_USART1_UART_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_USART1_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_USART1_UART_Init+0x58>)
 8000982:	220c      	movs	r2, #12
 8000984:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_USART1_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_USART1_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MX_USART1_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_USART1_UART_Init+0x58>)
 800099a:	2200      	movs	r2, #0
 800099c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_USART1_UART_Init+0x58>)
 80009a0:	f001 fc60 	bl	8002264 <HAL_UART_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009aa:	f7ff feb9 	bl	8000720 <Error_Handler>
  }

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000098 	.word	0x20000098
 80009b8:	40011000 	.word	0x40011000

080009bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	; 0x28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a29      	ldr	r2, [pc, #164]	; (8000a80 <HAL_UART_MspInit+0xc4>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d14c      	bne.n	8000a78 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009de:	4b29      	ldr	r3, [pc, #164]	; (8000a84 <HAL_UART_MspInit+0xc8>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e2:	4a28      	ldr	r2, [pc, #160]	; (8000a84 <HAL_UART_MspInit+0xc8>)
 80009e4:	f043 0310 	orr.w	r3, r3, #16
 80009e8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ea:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <HAL_UART_MspInit+0xc8>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	f003 0310 	and.w	r3, r3, #16
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <HAL_UART_MspInit+0xc8>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a22      	ldr	r2, [pc, #136]	; (8000a84 <HAL_UART_MspInit+0xc8>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <HAL_UART_MspInit+0xc8>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <HAL_UART_MspInit+0xc8>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a1c      	ldr	r2, [pc, #112]	; (8000a84 <HAL_UART_MspInit+0xc8>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <HAL_UART_MspInit+0xc8>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a26:	2380      	movs	r3, #128	; 0x80
 8000a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a32:	2303      	movs	r3, #3
 8000a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a36:	2307      	movs	r3, #7
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4811      	ldr	r0, [pc, #68]	; (8000a88 <HAL_UART_MspInit+0xcc>)
 8000a42:	f000 fa01 	bl	8000e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a54:	2303      	movs	r3, #3
 8000a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a58:	2307      	movs	r3, #7
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	480a      	ldr	r0, [pc, #40]	; (8000a8c <HAL_UART_MspInit+0xd0>)
 8000a64:	f000 f9f0 	bl	8000e48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	2025      	movs	r0, #37	; 0x25
 8000a6e:	f000 f992 	bl	8000d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a72:	2025      	movs	r0, #37	; 0x25
 8000a74:	f000 f9ab 	bl	8000dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a78:	bf00      	nop
 8000a7a:	3728      	adds	r7, #40	; 0x28
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40011000 	.word	0x40011000
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020400 	.word	0x40020400
 8000a8c:	40020000 	.word	0x40020000

08000a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a96:	e003      	b.n	8000aa0 <LoopCopyDataInit>

08000a98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a9e:	3104      	adds	r1, #4

08000aa0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000aa0:	480b      	ldr	r0, [pc, #44]	; (8000ad0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000aa4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000aa6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000aa8:	d3f6      	bcc.n	8000a98 <CopyDataInit>
  ldr  r2, =_sbss
 8000aaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000aac:	e002      	b.n	8000ab4 <LoopFillZerobss>

08000aae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000aae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ab0:	f842 3b04 	str.w	r3, [r2], #4

08000ab4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ab6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ab8:	d3f9      	bcc.n	8000aae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aba:	f7ff ff39 	bl	8000930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000abe:	f002 fa43 	bl	8002f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac2:	f7ff fd8f 	bl	80005e4 <main>
  bx  lr    
 8000ac6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ac8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000acc:	08003924 	.word	0x08003924
  ldr  r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ad4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000ad8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000adc:	20000120 	.word	0x20000120

08000ae0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae0:	e7fe      	b.n	8000ae0 <ADC_IRQHandler>

08000ae2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae6:	2003      	movs	r0, #3
 8000ae8:	f000 f94a 	bl	8000d80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aec:	2000      	movs	r0, #0
 8000aee:	f000 f805 	bl	8000afc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000af2:	f7ff fe1d 	bl	8000730 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000af6:	2300      	movs	r3, #0
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	bd80      	pop	{r7, pc}

08000afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <HAL_InitTick+0x54>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_InitTick+0x58>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 f965 	bl	8000dea <HAL_SYSTICK_Config>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	e00e      	b.n	8000b48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d80a      	bhi.n	8000b46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b30:	2200      	movs	r2, #0
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	f000 f92d 	bl	8000d96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b3c:	4a06      	ldr	r2, [pc, #24]	; (8000b58 <HAL_InitTick+0x5c>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b42:	2300      	movs	r3, #0
 8000b44:	e000      	b.n	8000b48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000000 	.word	0x20000000
 8000b54:	20000008 	.word	0x20000008
 8000b58:	20000004 	.word	0x20000004

08000b5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_IncTick+0x20>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_IncTick+0x24>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <HAL_IncTick+0x24>)
 8000b6e:	6013      	str	r3, [r2, #0]
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	20000118 	.word	0x20000118

08000b84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return uwTick;
 8000b88:	4b03      	ldr	r3, [pc, #12]	; (8000b98 <HAL_GetTick+0x14>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000118 	.word	0x20000118

08000b9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ba4:	f7ff ffee 	bl	8000b84 <HAL_GetTick>
 8000ba8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bb4:	d005      	beq.n	8000bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <HAL_Delay+0x40>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bc2:	bf00      	nop
 8000bc4:	f7ff ffde 	bl	8000b84 <HAL_GetTick>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d8f7      	bhi.n	8000bc4 <HAL_Delay+0x28>
  {
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000008 	.word	0x20000008

08000be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <__NVIC_SetPriorityGrouping+0x40>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <__NVIC_SetPriorityGrouping+0x44>)
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0e:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <__NVIC_SetPriorityGrouping+0x40>)
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	60d3      	str	r3, [r2, #12]
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00
 8000c24:	05fa0000 	.word	0x05fa0000

08000c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c2c:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <__NVIC_GetPriorityGrouping+0x18>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	0a1b      	lsrs	r3, r3, #8
 8000c32:	f003 0307 	and.w	r3, r3, #7
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	db0b      	blt.n	8000c6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	f003 021f 	and.w	r2, r3, #31
 8000c5c:	4907      	ldr	r1, [pc, #28]	; (8000c7c <__NVIC_EnableIRQ+0x38>)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	095b      	lsrs	r3, r3, #5
 8000c64:	2001      	movs	r0, #1
 8000c66:	fa00 f202 	lsl.w	r2, r0, r2
 8000c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000e100 	.word	0xe000e100

08000c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	6039      	str	r1, [r7, #0]
 8000c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db0a      	blt.n	8000caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	490c      	ldr	r1, [pc, #48]	; (8000ccc <__NVIC_SetPriority+0x4c>)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	0112      	lsls	r2, r2, #4
 8000ca0:	b2d2      	uxtb	r2, r2
 8000ca2:	440b      	add	r3, r1
 8000ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca8:	e00a      	b.n	8000cc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	4908      	ldr	r1, [pc, #32]	; (8000cd0 <__NVIC_SetPriority+0x50>)
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	f003 030f 	and.w	r3, r3, #15
 8000cb6:	3b04      	subs	r3, #4
 8000cb8:	0112      	lsls	r2, r2, #4
 8000cba:	b2d2      	uxtb	r2, r2
 8000cbc:	440b      	add	r3, r1
 8000cbe:	761a      	strb	r2, [r3, #24]
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000e100 	.word	0xe000e100
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b089      	sub	sp, #36	; 0x24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	f1c3 0307 	rsb	r3, r3, #7
 8000cee:	2b04      	cmp	r3, #4
 8000cf0:	bf28      	it	cs
 8000cf2:	2304      	movcs	r3, #4
 8000cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	2b06      	cmp	r3, #6
 8000cfc:	d902      	bls.n	8000d04 <NVIC_EncodePriority+0x30>
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3b03      	subs	r3, #3
 8000d02:	e000      	b.n	8000d06 <NVIC_EncodePriority+0x32>
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d08:	f04f 32ff 	mov.w	r2, #4294967295
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43da      	mvns	r2, r3
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	401a      	ands	r2, r3
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	fa01 f303 	lsl.w	r3, r1, r3
 8000d26:	43d9      	mvns	r1, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d2c:	4313      	orrs	r3, r2
         );
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3724      	adds	r7, #36	; 0x24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
	...

08000d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d4c:	d301      	bcc.n	8000d52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e00f      	b.n	8000d72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d52:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <SysTick_Config+0x40>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d5a:	210f      	movs	r1, #15
 8000d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d60:	f7ff ff8e 	bl	8000c80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <SysTick_Config+0x40>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d6a:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <SysTick_Config+0x40>)
 8000d6c:	2207      	movs	r2, #7
 8000d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	e000e010 	.word	0xe000e010

08000d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff ff29 	bl	8000be0 <__NVIC_SetPriorityGrouping>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
 8000da2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000da8:	f7ff ff3e 	bl	8000c28 <__NVIC_GetPriorityGrouping>
 8000dac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	68b9      	ldr	r1, [r7, #8]
 8000db2:	6978      	ldr	r0, [r7, #20]
 8000db4:	f7ff ff8e 	bl	8000cd4 <NVIC_EncodePriority>
 8000db8:	4602      	mov	r2, r0
 8000dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff5d 	bl	8000c80 <__NVIC_SetPriority>
}
 8000dc6:	bf00      	nop
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ff31 	bl	8000c44 <__NVIC_EnableIRQ>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff ffa2 	bl	8000d3c <SysTick_Config>
 8000df8:	4603      	mov	r3, r0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b083      	sub	sp, #12
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d004      	beq.n	8000e20 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2280      	movs	r2, #128	; 0x80
 8000e1a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e00c      	b.n	8000e3a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2205      	movs	r2, #5
 8000e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f022 0201 	bic.w	r2, r2, #1
 8000e36:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
	...

08000e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	; 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
 8000e66:	e175      	b.n	8001154 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e68:	2201      	movs	r2, #1
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	697a      	ldr	r2, [r7, #20]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	f040 8164 	bne.w	800114e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d00b      	beq.n	8000ea6 <HAL_GPIO_Init+0x5e>
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d007      	beq.n	8000ea6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e9a:	2b11      	cmp	r3, #17
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	2b12      	cmp	r3, #18
 8000ea4:	d130      	bne.n	8000f08 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	68da      	ldr	r2, [r3, #12]
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000edc:	2201      	movs	r2, #1
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	091b      	lsrs	r3, r3, #4
 8000ef2:	f003 0201 	and.w	r2, r3, #1
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2203      	movs	r2, #3
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x100>
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	2b12      	cmp	r3, #18
 8000f46:	d123      	bne.n	8000f90 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	08da      	lsrs	r2, r3, #3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3208      	adds	r2, #8
 8000f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	f003 0307 	and.w	r3, r3, #7
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	220f      	movs	r2, #15
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	691a      	ldr	r2, [r3, #16]
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	08da      	lsrs	r2, r3, #3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3208      	adds	r2, #8
 8000f8a:	69b9      	ldr	r1, [r7, #24]
 8000f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0203 	and.w	r2, r3, #3
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f000 80be 	beq.w	800114e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	4b65      	ldr	r3, [pc, #404]	; (8001168 <HAL_GPIO_Init+0x320>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	4a64      	ldr	r2, [pc, #400]	; (8001168 <HAL_GPIO_Init+0x320>)
 8000fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fde:	4b62      	ldr	r3, [pc, #392]	; (8001168 <HAL_GPIO_Init+0x320>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000fea:	4a60      	ldr	r2, [pc, #384]	; (800116c <HAL_GPIO_Init+0x324>)
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	089b      	lsrs	r3, r3, #2
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	220f      	movs	r2, #15
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a57      	ldr	r2, [pc, #348]	; (8001170 <HAL_GPIO_Init+0x328>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d037      	beq.n	8001086 <HAL_GPIO_Init+0x23e>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a56      	ldr	r2, [pc, #344]	; (8001174 <HAL_GPIO_Init+0x32c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d031      	beq.n	8001082 <HAL_GPIO_Init+0x23a>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a55      	ldr	r2, [pc, #340]	; (8001178 <HAL_GPIO_Init+0x330>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d02b      	beq.n	800107e <HAL_GPIO_Init+0x236>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a54      	ldr	r2, [pc, #336]	; (800117c <HAL_GPIO_Init+0x334>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d025      	beq.n	800107a <HAL_GPIO_Init+0x232>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a53      	ldr	r2, [pc, #332]	; (8001180 <HAL_GPIO_Init+0x338>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d01f      	beq.n	8001076 <HAL_GPIO_Init+0x22e>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a52      	ldr	r2, [pc, #328]	; (8001184 <HAL_GPIO_Init+0x33c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d019      	beq.n	8001072 <HAL_GPIO_Init+0x22a>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a51      	ldr	r2, [pc, #324]	; (8001188 <HAL_GPIO_Init+0x340>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d013      	beq.n	800106e <HAL_GPIO_Init+0x226>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a50      	ldr	r2, [pc, #320]	; (800118c <HAL_GPIO_Init+0x344>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d00d      	beq.n	800106a <HAL_GPIO_Init+0x222>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4f      	ldr	r2, [pc, #316]	; (8001190 <HAL_GPIO_Init+0x348>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d007      	beq.n	8001066 <HAL_GPIO_Init+0x21e>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a4e      	ldr	r2, [pc, #312]	; (8001194 <HAL_GPIO_Init+0x34c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d101      	bne.n	8001062 <HAL_GPIO_Init+0x21a>
 800105e:	2309      	movs	r3, #9
 8001060:	e012      	b.n	8001088 <HAL_GPIO_Init+0x240>
 8001062:	230a      	movs	r3, #10
 8001064:	e010      	b.n	8001088 <HAL_GPIO_Init+0x240>
 8001066:	2308      	movs	r3, #8
 8001068:	e00e      	b.n	8001088 <HAL_GPIO_Init+0x240>
 800106a:	2307      	movs	r3, #7
 800106c:	e00c      	b.n	8001088 <HAL_GPIO_Init+0x240>
 800106e:	2306      	movs	r3, #6
 8001070:	e00a      	b.n	8001088 <HAL_GPIO_Init+0x240>
 8001072:	2305      	movs	r3, #5
 8001074:	e008      	b.n	8001088 <HAL_GPIO_Init+0x240>
 8001076:	2304      	movs	r3, #4
 8001078:	e006      	b.n	8001088 <HAL_GPIO_Init+0x240>
 800107a:	2303      	movs	r3, #3
 800107c:	e004      	b.n	8001088 <HAL_GPIO_Init+0x240>
 800107e:	2302      	movs	r3, #2
 8001080:	e002      	b.n	8001088 <HAL_GPIO_Init+0x240>
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <HAL_GPIO_Init+0x240>
 8001086:	2300      	movs	r3, #0
 8001088:	69fa      	ldr	r2, [r7, #28]
 800108a:	f002 0203 	and.w	r2, r2, #3
 800108e:	0092      	lsls	r2, r2, #2
 8001090:	4093      	lsls	r3, r2
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001098:	4934      	ldr	r1, [pc, #208]	; (800116c <HAL_GPIO_Init+0x324>)
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	089b      	lsrs	r3, r3, #2
 800109e:	3302      	adds	r3, #2
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010a6:	4b3c      	ldr	r3, [pc, #240]	; (8001198 <HAL_GPIO_Init+0x350>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010ca:	4a33      	ldr	r2, [pc, #204]	; (8001198 <HAL_GPIO_Init+0x350>)
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010d0:	4b31      	ldr	r3, [pc, #196]	; (8001198 <HAL_GPIO_Init+0x350>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010f4:	4a28      	ldr	r2, [pc, #160]	; (8001198 <HAL_GPIO_Init+0x350>)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010fa:	4b27      	ldr	r3, [pc, #156]	; (8001198 <HAL_GPIO_Init+0x350>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800111e:	4a1e      	ldr	r2, [pc, #120]	; (8001198 <HAL_GPIO_Init+0x350>)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <HAL_GPIO_Init+0x350>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001148:	4a13      	ldr	r2, [pc, #76]	; (8001198 <HAL_GPIO_Init+0x350>)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3301      	adds	r3, #1
 8001152:	61fb      	str	r3, [r7, #28]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	2b0f      	cmp	r3, #15
 8001158:	f67f ae86 	bls.w	8000e68 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800115c:	bf00      	nop
 800115e:	3724      	adds	r7, #36	; 0x24
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	40023800 	.word	0x40023800
 800116c:	40013800 	.word	0x40013800
 8001170:	40020000 	.word	0x40020000
 8001174:	40020400 	.word	0x40020400
 8001178:	40020800 	.word	0x40020800
 800117c:	40020c00 	.word	0x40020c00
 8001180:	40021000 	.word	0x40021000
 8001184:	40021400 	.word	0x40021400
 8001188:	40021800 	.word	0x40021800
 800118c:	40021c00 	.word	0x40021c00
 8001190:	40022000 	.word	0x40022000
 8001194:	40022400 	.word	0x40022400
 8001198:	40013c00 	.word	0x40013c00

0800119c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80011a4:	2300      	movs	r3, #0
 80011a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e291      	b.n	80016d6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f000 8087 	beq.w	80012ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011c0:	4b96      	ldr	r3, [pc, #600]	; (800141c <HAL_RCC_OscConfig+0x280>)
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f003 030c 	and.w	r3, r3, #12
 80011c8:	2b04      	cmp	r3, #4
 80011ca:	d00c      	beq.n	80011e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011cc:	4b93      	ldr	r3, [pc, #588]	; (800141c <HAL_RCC_OscConfig+0x280>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f003 030c 	and.w	r3, r3, #12
 80011d4:	2b08      	cmp	r3, #8
 80011d6:	d112      	bne.n	80011fe <HAL_RCC_OscConfig+0x62>
 80011d8:	4b90      	ldr	r3, [pc, #576]	; (800141c <HAL_RCC_OscConfig+0x280>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011e4:	d10b      	bne.n	80011fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e6:	4b8d      	ldr	r3, [pc, #564]	; (800141c <HAL_RCC_OscConfig+0x280>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d06c      	beq.n	80012cc <HAL_RCC_OscConfig+0x130>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d168      	bne.n	80012cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e26b      	b.n	80016d6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001206:	d106      	bne.n	8001216 <HAL_RCC_OscConfig+0x7a>
 8001208:	4b84      	ldr	r3, [pc, #528]	; (800141c <HAL_RCC_OscConfig+0x280>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a83      	ldr	r2, [pc, #524]	; (800141c <HAL_RCC_OscConfig+0x280>)
 800120e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	e02e      	b.n	8001274 <HAL_RCC_OscConfig+0xd8>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d10c      	bne.n	8001238 <HAL_RCC_OscConfig+0x9c>
 800121e:	4b7f      	ldr	r3, [pc, #508]	; (800141c <HAL_RCC_OscConfig+0x280>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a7e      	ldr	r2, [pc, #504]	; (800141c <HAL_RCC_OscConfig+0x280>)
 8001224:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	4b7c      	ldr	r3, [pc, #496]	; (800141c <HAL_RCC_OscConfig+0x280>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a7b      	ldr	r2, [pc, #492]	; (800141c <HAL_RCC_OscConfig+0x280>)
 8001230:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	e01d      	b.n	8001274 <HAL_RCC_OscConfig+0xd8>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001240:	d10c      	bne.n	800125c <HAL_RCC_OscConfig+0xc0>
 8001242:	4b76      	ldr	r3, [pc, #472]	; (800141c <HAL_RCC_OscConfig+0x280>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a75      	ldr	r2, [pc, #468]	; (800141c <HAL_RCC_OscConfig+0x280>)
 8001248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	4b73      	ldr	r3, [pc, #460]	; (800141c <HAL_RCC_OscConfig+0x280>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a72      	ldr	r2, [pc, #456]	; (800141c <HAL_RCC_OscConfig+0x280>)
 8001254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	e00b      	b.n	8001274 <HAL_RCC_OscConfig+0xd8>
 800125c:	4b6f      	ldr	r3, [pc, #444]	; (800141c <HAL_RCC_OscConfig+0x280>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a6e      	ldr	r2, [pc, #440]	; (800141c <HAL_RCC_OscConfig+0x280>)
 8001262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4b6c      	ldr	r3, [pc, #432]	; (800141c <HAL_RCC_OscConfig+0x280>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a6b      	ldr	r2, [pc, #428]	; (800141c <HAL_RCC_OscConfig+0x280>)
 800126e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001272:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d013      	beq.n	80012a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127c:	f7ff fc82 	bl	8000b84 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001284:	f7ff fc7e 	bl	8000b84 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b64      	cmp	r3, #100	; 0x64
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e21f      	b.n	80016d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001296:	4b61      	ldr	r3, [pc, #388]	; (800141c <HAL_RCC_OscConfig+0x280>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0f0      	beq.n	8001284 <HAL_RCC_OscConfig+0xe8>
 80012a2:	e014      	b.n	80012ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a4:	f7ff fc6e 	bl	8000b84 <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012ac:	f7ff fc6a 	bl	8000b84 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b64      	cmp	r3, #100	; 0x64
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e20b      	b.n	80016d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012be:	4b57      	ldr	r3, [pc, #348]	; (800141c <HAL_RCC_OscConfig+0x280>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f0      	bne.n	80012ac <HAL_RCC_OscConfig+0x110>
 80012ca:	e000      	b.n	80012ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d069      	beq.n	80013ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012da:	4b50      	ldr	r3, [pc, #320]	; (800141c <HAL_RCC_OscConfig+0x280>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 030c 	and.w	r3, r3, #12
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d00b      	beq.n	80012fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012e6:	4b4d      	ldr	r3, [pc, #308]	; (800141c <HAL_RCC_OscConfig+0x280>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
 80012ee:	2b08      	cmp	r3, #8
 80012f0:	d11c      	bne.n	800132c <HAL_RCC_OscConfig+0x190>
 80012f2:	4b4a      	ldr	r3, [pc, #296]	; (800141c <HAL_RCC_OscConfig+0x280>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d116      	bne.n	800132c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fe:	4b47      	ldr	r3, [pc, #284]	; (800141c <HAL_RCC_OscConfig+0x280>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d005      	beq.n	8001316 <HAL_RCC_OscConfig+0x17a>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d001      	beq.n	8001316 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e1df      	b.n	80016d6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001316:	4b41      	ldr	r3, [pc, #260]	; (800141c <HAL_RCC_OscConfig+0x280>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	493d      	ldr	r1, [pc, #244]	; (800141c <HAL_RCC_OscConfig+0x280>)
 8001326:	4313      	orrs	r3, r2
 8001328:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800132a:	e040      	b.n	80013ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d023      	beq.n	800137c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001334:	4b39      	ldr	r3, [pc, #228]	; (800141c <HAL_RCC_OscConfig+0x280>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a38      	ldr	r2, [pc, #224]	; (800141c <HAL_RCC_OscConfig+0x280>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001340:	f7ff fc20 	bl	8000b84 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001348:	f7ff fc1c 	bl	8000b84 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e1bd      	b.n	80016d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800135a:	4b30      	ldr	r3, [pc, #192]	; (800141c <HAL_RCC_OscConfig+0x280>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f0      	beq.n	8001348 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001366:	4b2d      	ldr	r3, [pc, #180]	; (800141c <HAL_RCC_OscConfig+0x280>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	4929      	ldr	r1, [pc, #164]	; (800141c <HAL_RCC_OscConfig+0x280>)
 8001376:	4313      	orrs	r3, r2
 8001378:	600b      	str	r3, [r1, #0]
 800137a:	e018      	b.n	80013ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800137c:	4b27      	ldr	r3, [pc, #156]	; (800141c <HAL_RCC_OscConfig+0x280>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a26      	ldr	r2, [pc, #152]	; (800141c <HAL_RCC_OscConfig+0x280>)
 8001382:	f023 0301 	bic.w	r3, r3, #1
 8001386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001388:	f7ff fbfc 	bl	8000b84 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001390:	f7ff fbf8 	bl	8000b84 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e199      	b.n	80016d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a2:	4b1e      	ldr	r3, [pc, #120]	; (800141c <HAL_RCC_OscConfig+0x280>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d038      	beq.n	800142c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d019      	beq.n	80013f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c2:	4b16      	ldr	r3, [pc, #88]	; (800141c <HAL_RCC_OscConfig+0x280>)
 80013c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013c6:	4a15      	ldr	r2, [pc, #84]	; (800141c <HAL_RCC_OscConfig+0x280>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ce:	f7ff fbd9 	bl	8000b84 <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d4:	e008      	b.n	80013e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013d6:	f7ff fbd5 	bl	8000b84 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e176      	b.n	80016d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <HAL_RCC_OscConfig+0x280>)
 80013ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0f0      	beq.n	80013d6 <HAL_RCC_OscConfig+0x23a>
 80013f4:	e01a      	b.n	800142c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_RCC_OscConfig+0x280>)
 80013f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013fa:	4a08      	ldr	r2, [pc, #32]	; (800141c <HAL_RCC_OscConfig+0x280>)
 80013fc:	f023 0301 	bic.w	r3, r3, #1
 8001400:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001402:	f7ff fbbf 	bl	8000b84 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001408:	e00a      	b.n	8001420 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800140a:	f7ff fbbb 	bl	8000b84 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d903      	bls.n	8001420 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e15c      	b.n	80016d6 <HAL_RCC_OscConfig+0x53a>
 800141c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001420:	4b91      	ldr	r3, [pc, #580]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 8001422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1ee      	bne.n	800140a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b00      	cmp	r3, #0
 8001436:	f000 80a4 	beq.w	8001582 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800143a:	4b8b      	ldr	r3, [pc, #556]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10d      	bne.n	8001462 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	4b88      	ldr	r3, [pc, #544]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	4a87      	ldr	r2, [pc, #540]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001450:	6413      	str	r3, [r2, #64]	; 0x40
 8001452:	4b85      	ldr	r3, [pc, #532]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800145e:	2301      	movs	r3, #1
 8001460:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001462:	4b82      	ldr	r3, [pc, #520]	; (800166c <HAL_RCC_OscConfig+0x4d0>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146a:	2b00      	cmp	r3, #0
 800146c:	d118      	bne.n	80014a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800146e:	4b7f      	ldr	r3, [pc, #508]	; (800166c <HAL_RCC_OscConfig+0x4d0>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a7e      	ldr	r2, [pc, #504]	; (800166c <HAL_RCC_OscConfig+0x4d0>)
 8001474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800147a:	f7ff fb83 	bl	8000b84 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001482:	f7ff fb7f 	bl	8000b84 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b64      	cmp	r3, #100	; 0x64
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e120      	b.n	80016d6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001494:	4b75      	ldr	r3, [pc, #468]	; (800166c <HAL_RCC_OscConfig+0x4d0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0f0      	beq.n	8001482 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d106      	bne.n	80014b6 <HAL_RCC_OscConfig+0x31a>
 80014a8:	4b6f      	ldr	r3, [pc, #444]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 80014aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ac:	4a6e      	ldr	r2, [pc, #440]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6713      	str	r3, [r2, #112]	; 0x70
 80014b4:	e02d      	b.n	8001512 <HAL_RCC_OscConfig+0x376>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10c      	bne.n	80014d8 <HAL_RCC_OscConfig+0x33c>
 80014be:	4b6a      	ldr	r3, [pc, #424]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 80014c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c2:	4a69      	ldr	r2, [pc, #420]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 80014c4:	f023 0301 	bic.w	r3, r3, #1
 80014c8:	6713      	str	r3, [r2, #112]	; 0x70
 80014ca:	4b67      	ldr	r3, [pc, #412]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 80014cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ce:	4a66      	ldr	r2, [pc, #408]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 80014d0:	f023 0304 	bic.w	r3, r3, #4
 80014d4:	6713      	str	r3, [r2, #112]	; 0x70
 80014d6:	e01c      	b.n	8001512 <HAL_RCC_OscConfig+0x376>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	2b05      	cmp	r3, #5
 80014de:	d10c      	bne.n	80014fa <HAL_RCC_OscConfig+0x35e>
 80014e0:	4b61      	ldr	r3, [pc, #388]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 80014e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e4:	4a60      	ldr	r2, [pc, #384]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 80014e6:	f043 0304 	orr.w	r3, r3, #4
 80014ea:	6713      	str	r3, [r2, #112]	; 0x70
 80014ec:	4b5e      	ldr	r3, [pc, #376]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 80014ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f0:	4a5d      	ldr	r2, [pc, #372]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6713      	str	r3, [r2, #112]	; 0x70
 80014f8:	e00b      	b.n	8001512 <HAL_RCC_OscConfig+0x376>
 80014fa:	4b5b      	ldr	r3, [pc, #364]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 80014fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fe:	4a5a      	ldr	r2, [pc, #360]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 8001500:	f023 0301 	bic.w	r3, r3, #1
 8001504:	6713      	str	r3, [r2, #112]	; 0x70
 8001506:	4b58      	ldr	r3, [pc, #352]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 8001508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150a:	4a57      	ldr	r2, [pc, #348]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 800150c:	f023 0304 	bic.w	r3, r3, #4
 8001510:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d015      	beq.n	8001546 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800151a:	f7ff fb33 	bl	8000b84 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001520:	e00a      	b.n	8001538 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001522:	f7ff fb2f 	bl	8000b84 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001530:	4293      	cmp	r3, r2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e0ce      	b.n	80016d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001538:	4b4b      	ldr	r3, [pc, #300]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 800153a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0ee      	beq.n	8001522 <HAL_RCC_OscConfig+0x386>
 8001544:	e014      	b.n	8001570 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001546:	f7ff fb1d 	bl	8000b84 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800154c:	e00a      	b.n	8001564 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800154e:	f7ff fb19 	bl	8000b84 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	f241 3288 	movw	r2, #5000	; 0x1388
 800155c:	4293      	cmp	r3, r2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e0b8      	b.n	80016d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001564:	4b40      	ldr	r3, [pc, #256]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 8001566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1ee      	bne.n	800154e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001570:	7dfb      	ldrb	r3, [r7, #23]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d105      	bne.n	8001582 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001576:	4b3c      	ldr	r3, [pc, #240]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	4a3b      	ldr	r2, [pc, #236]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 800157c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001580:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 80a4 	beq.w	80016d4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800158c:	4b36      	ldr	r3, [pc, #216]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f003 030c 	and.w	r3, r3, #12
 8001594:	2b08      	cmp	r3, #8
 8001596:	d06b      	beq.n	8001670 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	2b02      	cmp	r3, #2
 800159e:	d149      	bne.n	8001634 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a0:	4b31      	ldr	r3, [pc, #196]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a30      	ldr	r2, [pc, #192]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 80015a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ac:	f7ff faea 	bl	8000b84 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b4:	f7ff fae6 	bl	8000b84 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e087      	b.n	80016d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c6:	4b28      	ldr	r3, [pc, #160]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69da      	ldr	r2, [r3, #28]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	019b      	lsls	r3, r3, #6
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e8:	085b      	lsrs	r3, r3, #1
 80015ea:	3b01      	subs	r3, #1
 80015ec:	041b      	lsls	r3, r3, #16
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f4:	061b      	lsls	r3, r3, #24
 80015f6:	4313      	orrs	r3, r2
 80015f8:	4a1b      	ldr	r2, [pc, #108]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 80015fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80015fe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001600:	4b19      	ldr	r3, [pc, #100]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a18      	ldr	r2, [pc, #96]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 8001606:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800160a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160c:	f7ff faba 	bl	8000b84 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001614:	f7ff fab6 	bl	8000b84 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e057      	b.n	80016d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f0      	beq.n	8001614 <HAL_RCC_OscConfig+0x478>
 8001632:	e04f      	b.n	80016d4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a0b      	ldr	r2, [pc, #44]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 800163a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800163e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001640:	f7ff faa0 	bl	8000b84 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001648:	f7ff fa9c 	bl	8000b84 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e03d      	b.n	80016d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165a:	4b03      	ldr	r3, [pc, #12]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x4ac>
 8001666:	e035      	b.n	80016d4 <HAL_RCC_OscConfig+0x538>
 8001668:	40023800 	.word	0x40023800
 800166c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001670:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <HAL_RCC_OscConfig+0x544>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d028      	beq.n	80016d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001688:	429a      	cmp	r2, r3
 800168a:	d121      	bne.n	80016d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001696:	429a      	cmp	r2, r3
 8001698:	d11a      	bne.n	80016d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016a0:	4013      	ands	r3, r2
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016a6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d111      	bne.n	80016d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b6:	085b      	lsrs	r3, r3, #1
 80016b8:	3b01      	subs	r3, #1
 80016ba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016bc:	429a      	cmp	r2, r3
 80016be:	d107      	bne.n	80016d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40023800 	.word	0x40023800

080016e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0d0      	b.n	800189e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016fc:	4b6a      	ldr	r3, [pc, #424]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 030f 	and.w	r3, r3, #15
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	429a      	cmp	r2, r3
 8001708:	d910      	bls.n	800172c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170a:	4b67      	ldr	r3, [pc, #412]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f023 020f 	bic.w	r2, r3, #15
 8001712:	4965      	ldr	r1, [pc, #404]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	4313      	orrs	r3, r2
 8001718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800171a:	4b63      	ldr	r3, [pc, #396]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0b8      	b.n	800189e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d020      	beq.n	800177a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001744:	4b59      	ldr	r3, [pc, #356]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	4a58      	ldr	r2, [pc, #352]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 800174a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800174e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800175c:	4b53      	ldr	r3, [pc, #332]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	4a52      	ldr	r2, [pc, #328]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 8001762:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001766:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001768:	4b50      	ldr	r3, [pc, #320]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	494d      	ldr	r1, [pc, #308]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 8001776:	4313      	orrs	r3, r2
 8001778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d040      	beq.n	8001808 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d107      	bne.n	800179e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178e:	4b47      	ldr	r3, [pc, #284]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d115      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e07f      	b.n	800189e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d107      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a6:	4b41      	ldr	r3, [pc, #260]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d109      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e073      	b.n	800189e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b6:	4b3d      	ldr	r3, [pc, #244]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e06b      	b.n	800189e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017c6:	4b39      	ldr	r3, [pc, #228]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f023 0203 	bic.w	r2, r3, #3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	4936      	ldr	r1, [pc, #216]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017d8:	f7ff f9d4 	bl	8000b84 <HAL_GetTick>
 80017dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017de:	e00a      	b.n	80017f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e0:	f7ff f9d0 	bl	8000b84 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e053      	b.n	800189e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f6:	4b2d      	ldr	r3, [pc, #180]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 020c 	and.w	r2, r3, #12
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	429a      	cmp	r2, r3
 8001806:	d1eb      	bne.n	80017e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001808:	4b27      	ldr	r3, [pc, #156]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 030f 	and.w	r3, r3, #15
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d210      	bcs.n	8001838 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001816:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f023 020f 	bic.w	r2, r3, #15
 800181e:	4922      	ldr	r1, [pc, #136]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	4313      	orrs	r3, r2
 8001824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001826:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	d001      	beq.n	8001838 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e032      	b.n	800189e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	d008      	beq.n	8001856 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	4916      	ldr	r1, [pc, #88]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 8001852:	4313      	orrs	r3, r2
 8001854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	2b00      	cmp	r3, #0
 8001860:	d009      	beq.n	8001876 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	490e      	ldr	r1, [pc, #56]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 8001872:	4313      	orrs	r3, r2
 8001874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001876:	f000 f821 	bl	80018bc <HAL_RCC_GetSysClockFreq>
 800187a:	4601      	mov	r1, r0
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	091b      	lsrs	r3, r3, #4
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <HAL_RCC_ClockConfig+0x1cc>)
 8001888:	5cd3      	ldrb	r3, [r2, r3]
 800188a:	fa21 f303 	lsr.w	r3, r1, r3
 800188e:	4a09      	ldr	r2, [pc, #36]	; (80018b4 <HAL_RCC_ClockConfig+0x1d0>)
 8001890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_RCC_ClockConfig+0x1d4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff f930 	bl	8000afc <HAL_InitTick>

  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40023c00 	.word	0x40023c00
 80018ac:	40023800 	.word	0x40023800
 80018b0:	08003898 	.word	0x08003898
 80018b4:	20000000 	.word	0x20000000
 80018b8:	20000004 	.word	0x20000004

080018bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	2300      	movs	r3, #0
 80018cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018d2:	4b50      	ldr	r3, [pc, #320]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x158>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 030c 	and.w	r3, r3, #12
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d007      	beq.n	80018ee <HAL_RCC_GetSysClockFreq+0x32>
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d008      	beq.n	80018f4 <HAL_RCC_GetSysClockFreq+0x38>
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f040 808d 	bne.w	8001a02 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018e8:	4b4b      	ldr	r3, [pc, #300]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x15c>)
 80018ea:	60bb      	str	r3, [r7, #8]
      break;
 80018ec:	e08c      	b.n	8001a08 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018ee:	4b4b      	ldr	r3, [pc, #300]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x160>)
 80018f0:	60bb      	str	r3, [r7, #8]
      break;
 80018f2:	e089      	b.n	8001a08 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018f4:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x158>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018fc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80018fe:	4b45      	ldr	r3, [pc, #276]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x158>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d023      	beq.n	8001952 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800190a:	4b42      	ldr	r3, [pc, #264]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x158>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	099b      	lsrs	r3, r3, #6
 8001910:	f04f 0400 	mov.w	r4, #0
 8001914:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	ea03 0501 	and.w	r5, r3, r1
 8001920:	ea04 0602 	and.w	r6, r4, r2
 8001924:	4a3d      	ldr	r2, [pc, #244]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x160>)
 8001926:	fb02 f106 	mul.w	r1, r2, r6
 800192a:	2200      	movs	r2, #0
 800192c:	fb02 f205 	mul.w	r2, r2, r5
 8001930:	440a      	add	r2, r1
 8001932:	493a      	ldr	r1, [pc, #232]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x160>)
 8001934:	fba5 0101 	umull	r0, r1, r5, r1
 8001938:	1853      	adds	r3, r2, r1
 800193a:	4619      	mov	r1, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f04f 0400 	mov.w	r4, #0
 8001942:	461a      	mov	r2, r3
 8001944:	4623      	mov	r3, r4
 8001946:	f7fe fc5f 	bl	8000208 <__aeabi_uldivmod>
 800194a:	4603      	mov	r3, r0
 800194c:	460c      	mov	r4, r1
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	e049      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001952:	4b30      	ldr	r3, [pc, #192]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x158>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	099b      	lsrs	r3, r3, #6
 8001958:	f04f 0400 	mov.w	r4, #0
 800195c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	ea03 0501 	and.w	r5, r3, r1
 8001968:	ea04 0602 	and.w	r6, r4, r2
 800196c:	4629      	mov	r1, r5
 800196e:	4632      	mov	r2, r6
 8001970:	f04f 0300 	mov.w	r3, #0
 8001974:	f04f 0400 	mov.w	r4, #0
 8001978:	0154      	lsls	r4, r2, #5
 800197a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800197e:	014b      	lsls	r3, r1, #5
 8001980:	4619      	mov	r1, r3
 8001982:	4622      	mov	r2, r4
 8001984:	1b49      	subs	r1, r1, r5
 8001986:	eb62 0206 	sbc.w	r2, r2, r6
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	f04f 0400 	mov.w	r4, #0
 8001992:	0194      	lsls	r4, r2, #6
 8001994:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001998:	018b      	lsls	r3, r1, #6
 800199a:	1a5b      	subs	r3, r3, r1
 800199c:	eb64 0402 	sbc.w	r4, r4, r2
 80019a0:	f04f 0100 	mov.w	r1, #0
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	00e2      	lsls	r2, r4, #3
 80019aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019ae:	00d9      	lsls	r1, r3, #3
 80019b0:	460b      	mov	r3, r1
 80019b2:	4614      	mov	r4, r2
 80019b4:	195b      	adds	r3, r3, r5
 80019b6:	eb44 0406 	adc.w	r4, r4, r6
 80019ba:	f04f 0100 	mov.w	r1, #0
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	02a2      	lsls	r2, r4, #10
 80019c4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80019c8:	0299      	lsls	r1, r3, #10
 80019ca:	460b      	mov	r3, r1
 80019cc:	4614      	mov	r4, r2
 80019ce:	4618      	mov	r0, r3
 80019d0:	4621      	mov	r1, r4
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f04f 0400 	mov.w	r4, #0
 80019d8:	461a      	mov	r2, r3
 80019da:	4623      	mov	r3, r4
 80019dc:	f7fe fc14 	bl	8000208 <__aeabi_uldivmod>
 80019e0:	4603      	mov	r3, r0
 80019e2:	460c      	mov	r4, r1
 80019e4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80019e6:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x158>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	0c1b      	lsrs	r3, r3, #16
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	3301      	adds	r3, #1
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fe:	60bb      	str	r3, [r7, #8]
      break;
 8001a00:	e002      	b.n	8001a08 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a02:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001a04:	60bb      	str	r3, [r7, #8]
      break;
 8001a06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a08:	68bb      	ldr	r3, [r7, #8]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800
 8001a18:	00f42400 	.word	0x00f42400
 8001a1c:	017d7840 	.word	0x017d7840

08001a20 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a24:	4b03      	ldr	r3, [pc, #12]	; (8001a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a26:	681b      	ldr	r3, [r3, #0]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000000 	.word	0x20000000

08001a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a3c:	f7ff fff0 	bl	8001a20 <HAL_RCC_GetHCLKFreq>
 8001a40:	4601      	mov	r1, r0
 8001a42:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	0a9b      	lsrs	r3, r3, #10
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	4a03      	ldr	r2, [pc, #12]	; (8001a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a4e:	5cd3      	ldrb	r3, [r2, r3]
 8001a50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	080038a8 	.word	0x080038a8

08001a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a64:	f7ff ffdc 	bl	8001a20 <HAL_RCC_GetHCLKFreq>
 8001a68:	4601      	mov	r1, r0
 8001a6a:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	0b5b      	lsrs	r3, r3, #13
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	4a03      	ldr	r2, [pc, #12]	; (8001a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a76:	5cd3      	ldrb	r3, [r2, r3]
 8001a78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40023800 	.word	0x40023800
 8001a84:	080038a8 	.word	0x080038a8

08001a88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d012      	beq.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001ab0:	4b69      	ldr	r3, [pc, #420]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	4a68      	ldr	r2, [pc, #416]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ab6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001aba:	6093      	str	r3, [r2, #8]
 8001abc:	4b66      	ldr	r3, [pc, #408]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac4:	4964      	ldr	r1, [pc, #400]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d017      	beq.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ae2:	4b5d      	ldr	r3, [pc, #372]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ae8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af0:	4959      	ldr	r1, [pc, #356]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b00:	d101      	bne.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001b02:	2301      	movs	r3, #1
 8001b04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d017      	beq.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001b1e:	4b4e      	ldr	r3, [pc, #312]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	494a      	ldr	r1, [pc, #296]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b3c:	d101      	bne.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0320 	and.w	r3, r3, #32
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 808b 	beq.w	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b6c:	4b3a      	ldr	r3, [pc, #232]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	4a39      	ldr	r2, [pc, #228]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b76:	6413      	str	r3, [r2, #64]	; 0x40
 8001b78:	4b37      	ldr	r3, [pc, #220]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b84:	4b35      	ldr	r3, [pc, #212]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a34      	ldr	r2, [pc, #208]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b90:	f7fe fff8 	bl	8000b84 <HAL_GetTick>
 8001b94:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b98:	f7fe fff4 	bl	8000b84 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b64      	cmp	r3, #100	; 0x64
 8001ba4:	d901      	bls.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e355      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001baa:	4b2c      	ldr	r3, [pc, #176]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f0      	beq.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001bb6:	4b28      	ldr	r3, [pc, #160]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bbe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d035      	beq.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d02e      	beq.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bd4:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bdc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bde:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be2:	4a1d      	ldr	r2, [pc, #116]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bea:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bee:	4a1a      	ldr	r2, [pc, #104]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001bf6:	4a18      	ldr	r2, [pc, #96]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001bfc:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d114      	bne.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c08:	f7fe ffbc 	bl	8000b84 <HAL_GetTick>
 8001c0c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c0e:	e00a      	b.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c10:	f7fe ffb8 	bl	8000b84 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e317      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c26:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0ee      	beq.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c3e:	d111      	bne.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c4c:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001c4e:	400b      	ands	r3, r1
 8001c50:	4901      	ldr	r1, [pc, #4]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	608b      	str	r3, [r1, #8]
 8001c56:	e00b      	b.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40007000 	.word	0x40007000
 8001c60:	0ffffcff 	.word	0x0ffffcff
 8001c64:	4bb0      	ldr	r3, [pc, #704]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	4aaf      	ldr	r2, [pc, #700]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001c6a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001c6e:	6093      	str	r3, [r2, #8]
 8001c70:	4bad      	ldr	r3, [pc, #692]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001c72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c7c:	49aa      	ldr	r1, [pc, #680]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d010      	beq.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c8e:	4ba6      	ldr	r3, [pc, #664]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c94:	4aa4      	ldr	r2, [pc, #656]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001c96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c9e:	4ba2      	ldr	r3, [pc, #648]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001ca0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca8:	499f      	ldr	r1, [pc, #636]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00a      	beq.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001cbc:	4b9a      	ldr	r3, [pc, #616]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cca:	4997      	ldr	r1, [pc, #604]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00a      	beq.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001cde:	4b92      	ldr	r3, [pc, #584]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cec:	498e      	ldr	r1, [pc, #568]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00a      	beq.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001d00:	4b89      	ldr	r3, [pc, #548]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d0e:	4986      	ldr	r1, [pc, #536]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00a      	beq.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001d22:	4b81      	ldr	r3, [pc, #516]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d28:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d30:	497d      	ldr	r1, [pc, #500]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00a      	beq.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d44:	4b78      	ldr	r3, [pc, #480]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d4a:	f023 0203 	bic.w	r2, r3, #3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d52:	4975      	ldr	r1, [pc, #468]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00a      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d66:	4b70      	ldr	r3, [pc, #448]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6c:	f023 020c 	bic.w	r2, r3, #12
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d74:	496c      	ldr	r1, [pc, #432]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00a      	beq.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d88:	4b67      	ldr	r3, [pc, #412]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d8e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d96:	4964      	ldr	r1, [pc, #400]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00a      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001daa:	4b5f      	ldr	r3, [pc, #380]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001db8:	495b      	ldr	r1, [pc, #364]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00a      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001dcc:	4b56      	ldr	r3, [pc, #344]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dda:	4953      	ldr	r1, [pc, #332]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00a      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001dee:	4b4e      	ldr	r3, [pc, #312]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfc:	494a      	ldr	r1, [pc, #296]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00a      	beq.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001e10:	4b45      	ldr	r3, [pc, #276]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e16:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1e:	4942      	ldr	r1, [pc, #264]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00a      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001e32:	4b3d      	ldr	r3, [pc, #244]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e40:	4939      	ldr	r1, [pc, #228]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00a      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e54:	4b34      	ldr	r3, [pc, #208]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e62:	4931      	ldr	r1, [pc, #196]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d011      	beq.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001e76:	4b2c      	ldr	r3, [pc, #176]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e84:	4928      	ldr	r1, [pc, #160]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e94:	d101      	bne.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001e96:	2301      	movs	r3, #1
 8001e98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00a      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001eb6:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ebc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ec4:	4918      	ldr	r1, [pc, #96]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00b      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001ed8:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ede:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ee8:	490f      	ldr	r1, [pc, #60]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d005      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001efe:	f040 80d8 	bne.w	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a08      	ldr	r2, [pc, #32]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001f08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f0e:	f7fe fe39 	bl	8000b84 <HAL_GetTick>
 8001f12:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f14:	e00a      	b.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001f16:	f7fe fe35 	bl	8000b84 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b64      	cmp	r3, #100	; 0x64
 8001f22:	d903      	bls.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e196      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8001f28:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f2c:	4b6c      	ldr	r3, [pc, #432]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1ee      	bne.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d021      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d11d      	bne.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001f4c:	4b64      	ldr	r3, [pc, #400]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f52:	0c1b      	lsrs	r3, r3, #16
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001f5a:	4b61      	ldr	r3, [pc, #388]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f60:	0e1b      	lsrs	r3, r3, #24
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	019a      	lsls	r2, r3, #6
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	041b      	lsls	r3, r3, #16
 8001f72:	431a      	orrs	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	061b      	lsls	r3, r3, #24
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	071b      	lsls	r3, r3, #28
 8001f80:	4957      	ldr	r1, [pc, #348]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d004      	beq.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f9c:	d00a      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d02e      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fb2:	d129      	bne.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001fb4:	4b4a      	ldr	r3, [pc, #296]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fba:	0c1b      	lsrs	r3, r3, #16
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001fc2:	4b47      	ldr	r3, [pc, #284]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fc8:	0f1b      	lsrs	r3, r3, #28
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	019a      	lsls	r2, r3, #6
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	041b      	lsls	r3, r3, #16
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	061b      	lsls	r3, r3, #24
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	071b      	lsls	r3, r3, #28
 8001fe8:	493d      	ldr	r1, [pc, #244]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001ff0:	4b3b      	ldr	r3, [pc, #236]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001ff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ff6:	f023 021f 	bic.w	r2, r3, #31
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	3b01      	subs	r3, #1
 8002000:	4937      	ldr	r1, [pc, #220]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002002:	4313      	orrs	r3, r2
 8002004:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d01d      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002014:	4b32      	ldr	r3, [pc, #200]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800201a:	0e1b      	lsrs	r3, r3, #24
 800201c:	f003 030f 	and.w	r3, r3, #15
 8002020:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002022:	4b2f      	ldr	r3, [pc, #188]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002028:	0f1b      	lsrs	r3, r3, #28
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	019a      	lsls	r2, r3, #6
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	041b      	lsls	r3, r3, #16
 800203c:	431a      	orrs	r2, r3
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	061b      	lsls	r3, r3, #24
 8002042:	431a      	orrs	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	071b      	lsls	r3, r3, #28
 8002048:	4925      	ldr	r1, [pc, #148]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800204a:	4313      	orrs	r3, r2
 800204c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d011      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	019a      	lsls	r2, r3, #6
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	041b      	lsls	r3, r3, #16
 8002068:	431a      	orrs	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	061b      	lsls	r3, r3, #24
 8002070:	431a      	orrs	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	071b      	lsls	r3, r3, #28
 8002078:	4919      	ldr	r1, [pc, #100]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800207a:	4313      	orrs	r3, r2
 800207c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002080:	4b17      	ldr	r3, [pc, #92]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a16      	ldr	r2, [pc, #88]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002086:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800208a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800208c:	f7fe fd7a 	bl	8000b84 <HAL_GetTick>
 8002090:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002094:	f7fe fd76 	bl	8000b84 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b64      	cmp	r3, #100	; 0x64
 80020a0:	d901      	bls.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e0d7      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80020a6:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0f0      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	f040 80cd 	bne.w	8002254 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80020ba:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a08      	ldr	r2, [pc, #32]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80020c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020c6:	f7fe fd5d 	bl	8000b84 <HAL_GetTick>
 80020ca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80020cc:	e00a      	b.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80020ce:	f7fe fd59 	bl	8000b84 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b64      	cmp	r3, #100	; 0x64
 80020da:	d903      	bls.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e0ba      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80020e0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80020e4:	4b5e      	ldr	r3, [pc, #376]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020f0:	d0ed      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002102:	2b00      	cmp	r3, #0
 8002104:	d009      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800210e:	2b00      	cmp	r3, #0
 8002110:	d02e      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	2b00      	cmp	r3, #0
 8002118:	d12a      	bne.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800211a:	4b51      	ldr	r3, [pc, #324]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800211c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002120:	0c1b      	lsrs	r3, r3, #16
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002128:	4b4d      	ldr	r3, [pc, #308]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800212a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212e:	0f1b      	lsrs	r3, r3, #28
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	019a      	lsls	r2, r3, #6
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	041b      	lsls	r3, r3, #16
 8002140:	431a      	orrs	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	061b      	lsls	r3, r3, #24
 8002148:	431a      	orrs	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	071b      	lsls	r3, r3, #28
 800214e:	4944      	ldr	r1, [pc, #272]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002156:	4b42      	ldr	r3, [pc, #264]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002158:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800215c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002164:	3b01      	subs	r3, #1
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	493d      	ldr	r1, [pc, #244]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800216a:	4313      	orrs	r3, r2
 800216c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d022      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002180:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002184:	d11d      	bne.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002186:	4b36      	ldr	r3, [pc, #216]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218c:	0e1b      	lsrs	r3, r3, #24
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002194:	4b32      	ldr	r3, [pc, #200]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219a:	0f1b      	lsrs	r3, r3, #28
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	019a      	lsls	r2, r3, #6
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	041b      	lsls	r3, r3, #16
 80021ae:	431a      	orrs	r2, r3
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	061b      	lsls	r3, r3, #24
 80021b4:	431a      	orrs	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	071b      	lsls	r3, r3, #28
 80021ba:	4929      	ldr	r1, [pc, #164]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d028      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80021ce:	4b24      	ldr	r3, [pc, #144]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80021d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d4:	0e1b      	lsrs	r3, r3, #24
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80021dc:	4b20      	ldr	r3, [pc, #128]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e2:	0c1b      	lsrs	r3, r3, #16
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	019a      	lsls	r2, r3, #6
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	041b      	lsls	r3, r3, #16
 80021f4:	431a      	orrs	r2, r3
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	061b      	lsls	r3, r3, #24
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	071b      	lsls	r3, r3, #28
 8002202:	4917      	ldr	r1, [pc, #92]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002204:	4313      	orrs	r3, r2
 8002206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800220a:	4b15      	ldr	r3, [pc, #84]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800220c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002210:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002218:	4911      	ldr	r1, [pc, #68]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800221a:	4313      	orrs	r3, r2
 800221c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002220:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a0e      	ldr	r2, [pc, #56]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800222a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800222c:	f7fe fcaa 	bl	8000b84 <HAL_GetTick>
 8002230:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002234:	f7fe fca6 	bl	8000b84 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b64      	cmp	r3, #100	; 0x64
 8002240:	d901      	bls.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e007      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002246:	4b06      	ldr	r3, [pc, #24]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800224e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002252:	d1ef      	bne.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3720      	adds	r7, #32
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40023800 	.word	0x40023800

08002264 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e040      	b.n	80022f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800227a:	2b00      	cmp	r3, #0
 800227c:	d106      	bne.n	800228c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7fe fb98 	bl	80009bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2224      	movs	r2, #36	; 0x24
 8002290:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0201 	bic.w	r2, r2, #1
 80022a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 fa04 	bl	80026b0 <UART_SetConfig>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d101      	bne.n	80022b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e022      	b.n	80022f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 fca2 	bl	8002c04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0201 	orr.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 fd29 	bl	8002d48 <UART_CheckIdleState>
 80022f6:	4603      	mov	r3, r0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08a      	sub	sp, #40	; 0x28
 8002304:	af02      	add	r7, sp, #8
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	603b      	str	r3, [r7, #0]
 800230c:	4613      	mov	r3, r2
 800230e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002314:	2b20      	cmp	r3, #32
 8002316:	d17f      	bne.n	8002418 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d002      	beq.n	8002324 <HAL_UART_Transmit+0x24>
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e078      	b.n	800241a <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_UART_Transmit+0x36>
 8002332:	2302      	movs	r3, #2
 8002334:	e071      	b.n	800241a <HAL_UART_Transmit+0x11a>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2221      	movs	r2, #33	; 0x21
 8002348:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800234a:	f7fe fc1b 	bl	8000b84 <HAL_GetTick>
 800234e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	88fa      	ldrh	r2, [r7, #6]
 8002354:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	88fa      	ldrh	r2, [r7, #6]
 800235c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002368:	d108      	bne.n	800237c <HAL_UART_Transmit+0x7c>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d104      	bne.n	800237c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	61bb      	str	r3, [r7, #24]
 800237a:	e003      	b.n	8002384 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002380:	2300      	movs	r3, #0
 8002382:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800238c:	e02c      	b.n	80023e8 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	2200      	movs	r2, #0
 8002396:	2180      	movs	r1, #128	; 0x80
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 fd04 	bl	8002da6 <UART_WaitOnFlagUntilTimeout>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e038      	b.n	800241a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10b      	bne.n	80023c6 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	461a      	mov	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	3302      	adds	r3, #2
 80023c2:	61bb      	str	r3, [r7, #24]
 80023c4:	e007      	b.n	80023d6 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	781a      	ldrb	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	3301      	adds	r3, #1
 80023d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80023dc:	b29b      	uxth	r3, r3
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1cc      	bne.n	800238e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	2200      	movs	r2, #0
 80023fc:	2140      	movs	r1, #64	; 0x40
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 fcd1 	bl	8002da6 <UART_WaitOnFlagUntilTimeout>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e005      	b.n	800241a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2220      	movs	r2, #32
 8002412:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8002414:	2300      	movs	r3, #0
 8002416:	e000      	b.n	800241a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8002418:	2302      	movs	r3, #2
  }
}
 800241a:	4618      	mov	r0, r3
 800241c:	3720      	adds	r7, #32
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002444:	69fa      	ldr	r2, [r7, #28]
 8002446:	f640 030f 	movw	r3, #2063	; 0x80f
 800244a:	4013      	ands	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d113      	bne.n	800247c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f003 0320 	and.w	r3, r3, #32
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00e      	beq.n	800247c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	f003 0320 	and.w	r3, r3, #32
 8002464:	2b00      	cmp	r3, #0
 8002466:	d009      	beq.n	800247c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 8100 	beq.w	8002672 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	4798      	blx	r3
      }
      return;
 800247a:	e0fa      	b.n	8002672 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 80d5 	beq.w	800262e <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d105      	bne.n	800249a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80ca 	beq.w	800262e <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00e      	beq.n	80024c2 <HAL_UART_IRQHandler+0x9e>
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d009      	beq.n	80024c2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2201      	movs	r2, #1
 80024b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024ba:	f043 0201 	orr.w	r2, r3, #1
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00e      	beq.n	80024ea <HAL_UART_IRQHandler+0xc6>
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d009      	beq.n	80024ea <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2202      	movs	r2, #2
 80024dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024e2:	f043 0204 	orr.w	r2, r3, #4
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00e      	beq.n	8002512 <HAL_UART_IRQHandler+0xee>
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2204      	movs	r2, #4
 8002504:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800250a:	f043 0202 	orr.w	r2, r3, #2
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	f003 0308 	and.w	r3, r3, #8
 8002518:	2b00      	cmp	r3, #0
 800251a:	d013      	beq.n	8002544 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	f003 0320 	and.w	r3, r3, #32
 8002522:	2b00      	cmp	r3, #0
 8002524:	d104      	bne.n	8002530 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800252c:	2b00      	cmp	r3, #0
 800252e:	d009      	beq.n	8002544 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2208      	movs	r2, #8
 8002536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800253c:	f043 0208 	orr.w	r2, r3, #8
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00f      	beq.n	800256e <HAL_UART_IRQHandler+0x14a>
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00a      	beq.n	800256e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002560:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002566:	f043 0220 	orr.w	r2, r3, #32
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002572:	2b00      	cmp	r3, #0
 8002574:	d07f      	beq.n	8002676 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00c      	beq.n	800259a <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	f003 0320 	and.w	r3, r3, #32
 8002586:	2b00      	cmp	r3, #0
 8002588:	d007      	beq.n	800259a <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800259e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025aa:	2b40      	cmp	r3, #64	; 0x40
 80025ac:	d004      	beq.n	80025b8 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d031      	beq.n	800261c <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 fc6f 	bl	8002e9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c8:	2b40      	cmp	r3, #64	; 0x40
 80025ca:	d123      	bne.n	8002614 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025da:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d013      	beq.n	800260c <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025e8:	4a26      	ldr	r2, [pc, #152]	; (8002684 <HAL_UART_IRQHandler+0x260>)
 80025ea:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fe fc06 	bl	8000e02 <HAL_DMA_Abort_IT>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d016      	beq.n	800262a <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002606:	4610      	mov	r0, r2
 8002608:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800260a:	e00e      	b.n	800262a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 f845 	bl	800269c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002612:	e00a      	b.n	800262a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f841 	bl	800269c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800261a:	e006      	b.n	800262a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f83d 	bl	800269c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002628:	e025      	b.n	8002676 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800262a:	bf00      	nop
    return;
 800262c:	e023      	b.n	8002676 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00d      	beq.n	8002654 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263e:	2b00      	cmp	r3, #0
 8002640:	d008      	beq.n	8002654 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002646:	2b00      	cmp	r3, #0
 8002648:	d017      	beq.n	800267a <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	4798      	blx	r3
    }
    return;
 8002652:	e012      	b.n	800267a <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00e      	beq.n	800267c <HAL_UART_IRQHandler+0x258>
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002664:	2b00      	cmp	r3, #0
 8002666:	d009      	beq.n	800267c <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 fc4d 	bl	8002f08 <UART_EndTransmit_IT>
    return;
 800266e:	bf00      	nop
 8002670:	e004      	b.n	800267c <HAL_UART_IRQHandler+0x258>
      return;
 8002672:	bf00      	nop
 8002674:	e002      	b.n	800267c <HAL_UART_IRQHandler+0x258>
    return;
 8002676:	bf00      	nop
 8002678:	e000      	b.n	800267c <HAL_UART_IRQHandler+0x258>
    return;
 800267a:	bf00      	nop
  }

}
 800267c:	3720      	adds	r7, #32
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	08002edd 	.word	0x08002edd

08002688 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80026bc:	2300      	movs	r3, #0
 80026be:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	431a      	orrs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	4bb1      	ldr	r3, [pc, #708]	; (80029a4 <UART_SetConfig+0x2f4>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6812      	ldr	r2, [r2, #0]
 80026e6:	6939      	ldr	r1, [r7, #16]
 80026e8:	430b      	orrs	r3, r1
 80026ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	430a      	orrs	r2, r1
 8002724:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a9f      	ldr	r2, [pc, #636]	; (80029a8 <UART_SetConfig+0x2f8>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d121      	bne.n	8002774 <UART_SetConfig+0xc4>
 8002730:	4b9e      	ldr	r3, [pc, #632]	; (80029ac <UART_SetConfig+0x2fc>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	2b03      	cmp	r3, #3
 800273c:	d816      	bhi.n	800276c <UART_SetConfig+0xbc>
 800273e:	a201      	add	r2, pc, #4	; (adr r2, 8002744 <UART_SetConfig+0x94>)
 8002740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002744:	08002755 	.word	0x08002755
 8002748:	08002761 	.word	0x08002761
 800274c:	0800275b 	.word	0x0800275b
 8002750:	08002767 	.word	0x08002767
 8002754:	2301      	movs	r3, #1
 8002756:	77fb      	strb	r3, [r7, #31]
 8002758:	e151      	b.n	80029fe <UART_SetConfig+0x34e>
 800275a:	2302      	movs	r3, #2
 800275c:	77fb      	strb	r3, [r7, #31]
 800275e:	e14e      	b.n	80029fe <UART_SetConfig+0x34e>
 8002760:	2304      	movs	r3, #4
 8002762:	77fb      	strb	r3, [r7, #31]
 8002764:	e14b      	b.n	80029fe <UART_SetConfig+0x34e>
 8002766:	2308      	movs	r3, #8
 8002768:	77fb      	strb	r3, [r7, #31]
 800276a:	e148      	b.n	80029fe <UART_SetConfig+0x34e>
 800276c:	2310      	movs	r3, #16
 800276e:	77fb      	strb	r3, [r7, #31]
 8002770:	bf00      	nop
 8002772:	e144      	b.n	80029fe <UART_SetConfig+0x34e>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a8d      	ldr	r2, [pc, #564]	; (80029b0 <UART_SetConfig+0x300>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d134      	bne.n	80027e8 <UART_SetConfig+0x138>
 800277e:	4b8b      	ldr	r3, [pc, #556]	; (80029ac <UART_SetConfig+0x2fc>)
 8002780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002784:	f003 030c 	and.w	r3, r3, #12
 8002788:	2b0c      	cmp	r3, #12
 800278a:	d829      	bhi.n	80027e0 <UART_SetConfig+0x130>
 800278c:	a201      	add	r2, pc, #4	; (adr r2, 8002794 <UART_SetConfig+0xe4>)
 800278e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002792:	bf00      	nop
 8002794:	080027c9 	.word	0x080027c9
 8002798:	080027e1 	.word	0x080027e1
 800279c:	080027e1 	.word	0x080027e1
 80027a0:	080027e1 	.word	0x080027e1
 80027a4:	080027d5 	.word	0x080027d5
 80027a8:	080027e1 	.word	0x080027e1
 80027ac:	080027e1 	.word	0x080027e1
 80027b0:	080027e1 	.word	0x080027e1
 80027b4:	080027cf 	.word	0x080027cf
 80027b8:	080027e1 	.word	0x080027e1
 80027bc:	080027e1 	.word	0x080027e1
 80027c0:	080027e1 	.word	0x080027e1
 80027c4:	080027db 	.word	0x080027db
 80027c8:	2300      	movs	r3, #0
 80027ca:	77fb      	strb	r3, [r7, #31]
 80027cc:	e117      	b.n	80029fe <UART_SetConfig+0x34e>
 80027ce:	2302      	movs	r3, #2
 80027d0:	77fb      	strb	r3, [r7, #31]
 80027d2:	e114      	b.n	80029fe <UART_SetConfig+0x34e>
 80027d4:	2304      	movs	r3, #4
 80027d6:	77fb      	strb	r3, [r7, #31]
 80027d8:	e111      	b.n	80029fe <UART_SetConfig+0x34e>
 80027da:	2308      	movs	r3, #8
 80027dc:	77fb      	strb	r3, [r7, #31]
 80027de:	e10e      	b.n	80029fe <UART_SetConfig+0x34e>
 80027e0:	2310      	movs	r3, #16
 80027e2:	77fb      	strb	r3, [r7, #31]
 80027e4:	bf00      	nop
 80027e6:	e10a      	b.n	80029fe <UART_SetConfig+0x34e>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a71      	ldr	r2, [pc, #452]	; (80029b4 <UART_SetConfig+0x304>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d120      	bne.n	8002834 <UART_SetConfig+0x184>
 80027f2:	4b6e      	ldr	r3, [pc, #440]	; (80029ac <UART_SetConfig+0x2fc>)
 80027f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80027fc:	2b10      	cmp	r3, #16
 80027fe:	d00f      	beq.n	8002820 <UART_SetConfig+0x170>
 8002800:	2b10      	cmp	r3, #16
 8002802:	d802      	bhi.n	800280a <UART_SetConfig+0x15a>
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <UART_SetConfig+0x164>
 8002808:	e010      	b.n	800282c <UART_SetConfig+0x17c>
 800280a:	2b20      	cmp	r3, #32
 800280c:	d005      	beq.n	800281a <UART_SetConfig+0x16a>
 800280e:	2b30      	cmp	r3, #48	; 0x30
 8002810:	d009      	beq.n	8002826 <UART_SetConfig+0x176>
 8002812:	e00b      	b.n	800282c <UART_SetConfig+0x17c>
 8002814:	2300      	movs	r3, #0
 8002816:	77fb      	strb	r3, [r7, #31]
 8002818:	e0f1      	b.n	80029fe <UART_SetConfig+0x34e>
 800281a:	2302      	movs	r3, #2
 800281c:	77fb      	strb	r3, [r7, #31]
 800281e:	e0ee      	b.n	80029fe <UART_SetConfig+0x34e>
 8002820:	2304      	movs	r3, #4
 8002822:	77fb      	strb	r3, [r7, #31]
 8002824:	e0eb      	b.n	80029fe <UART_SetConfig+0x34e>
 8002826:	2308      	movs	r3, #8
 8002828:	77fb      	strb	r3, [r7, #31]
 800282a:	e0e8      	b.n	80029fe <UART_SetConfig+0x34e>
 800282c:	2310      	movs	r3, #16
 800282e:	77fb      	strb	r3, [r7, #31]
 8002830:	bf00      	nop
 8002832:	e0e4      	b.n	80029fe <UART_SetConfig+0x34e>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a5f      	ldr	r2, [pc, #380]	; (80029b8 <UART_SetConfig+0x308>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d120      	bne.n	8002880 <UART_SetConfig+0x1d0>
 800283e:	4b5b      	ldr	r3, [pc, #364]	; (80029ac <UART_SetConfig+0x2fc>)
 8002840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002844:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002848:	2b40      	cmp	r3, #64	; 0x40
 800284a:	d00f      	beq.n	800286c <UART_SetConfig+0x1bc>
 800284c:	2b40      	cmp	r3, #64	; 0x40
 800284e:	d802      	bhi.n	8002856 <UART_SetConfig+0x1a6>
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <UART_SetConfig+0x1b0>
 8002854:	e010      	b.n	8002878 <UART_SetConfig+0x1c8>
 8002856:	2b80      	cmp	r3, #128	; 0x80
 8002858:	d005      	beq.n	8002866 <UART_SetConfig+0x1b6>
 800285a:	2bc0      	cmp	r3, #192	; 0xc0
 800285c:	d009      	beq.n	8002872 <UART_SetConfig+0x1c2>
 800285e:	e00b      	b.n	8002878 <UART_SetConfig+0x1c8>
 8002860:	2300      	movs	r3, #0
 8002862:	77fb      	strb	r3, [r7, #31]
 8002864:	e0cb      	b.n	80029fe <UART_SetConfig+0x34e>
 8002866:	2302      	movs	r3, #2
 8002868:	77fb      	strb	r3, [r7, #31]
 800286a:	e0c8      	b.n	80029fe <UART_SetConfig+0x34e>
 800286c:	2304      	movs	r3, #4
 800286e:	77fb      	strb	r3, [r7, #31]
 8002870:	e0c5      	b.n	80029fe <UART_SetConfig+0x34e>
 8002872:	2308      	movs	r3, #8
 8002874:	77fb      	strb	r3, [r7, #31]
 8002876:	e0c2      	b.n	80029fe <UART_SetConfig+0x34e>
 8002878:	2310      	movs	r3, #16
 800287a:	77fb      	strb	r3, [r7, #31]
 800287c:	bf00      	nop
 800287e:	e0be      	b.n	80029fe <UART_SetConfig+0x34e>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a4d      	ldr	r2, [pc, #308]	; (80029bc <UART_SetConfig+0x30c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d124      	bne.n	80028d4 <UART_SetConfig+0x224>
 800288a:	4b48      	ldr	r3, [pc, #288]	; (80029ac <UART_SetConfig+0x2fc>)
 800288c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002890:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002898:	d012      	beq.n	80028c0 <UART_SetConfig+0x210>
 800289a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800289e:	d802      	bhi.n	80028a6 <UART_SetConfig+0x1f6>
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d007      	beq.n	80028b4 <UART_SetConfig+0x204>
 80028a4:	e012      	b.n	80028cc <UART_SetConfig+0x21c>
 80028a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028aa:	d006      	beq.n	80028ba <UART_SetConfig+0x20a>
 80028ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028b0:	d009      	beq.n	80028c6 <UART_SetConfig+0x216>
 80028b2:	e00b      	b.n	80028cc <UART_SetConfig+0x21c>
 80028b4:	2300      	movs	r3, #0
 80028b6:	77fb      	strb	r3, [r7, #31]
 80028b8:	e0a1      	b.n	80029fe <UART_SetConfig+0x34e>
 80028ba:	2302      	movs	r3, #2
 80028bc:	77fb      	strb	r3, [r7, #31]
 80028be:	e09e      	b.n	80029fe <UART_SetConfig+0x34e>
 80028c0:	2304      	movs	r3, #4
 80028c2:	77fb      	strb	r3, [r7, #31]
 80028c4:	e09b      	b.n	80029fe <UART_SetConfig+0x34e>
 80028c6:	2308      	movs	r3, #8
 80028c8:	77fb      	strb	r3, [r7, #31]
 80028ca:	e098      	b.n	80029fe <UART_SetConfig+0x34e>
 80028cc:	2310      	movs	r3, #16
 80028ce:	77fb      	strb	r3, [r7, #31]
 80028d0:	bf00      	nop
 80028d2:	e094      	b.n	80029fe <UART_SetConfig+0x34e>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a39      	ldr	r2, [pc, #228]	; (80029c0 <UART_SetConfig+0x310>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d124      	bne.n	8002928 <UART_SetConfig+0x278>
 80028de:	4b33      	ldr	r3, [pc, #204]	; (80029ac <UART_SetConfig+0x2fc>)
 80028e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ec:	d012      	beq.n	8002914 <UART_SetConfig+0x264>
 80028ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f2:	d802      	bhi.n	80028fa <UART_SetConfig+0x24a>
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d007      	beq.n	8002908 <UART_SetConfig+0x258>
 80028f8:	e012      	b.n	8002920 <UART_SetConfig+0x270>
 80028fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028fe:	d006      	beq.n	800290e <UART_SetConfig+0x25e>
 8002900:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002904:	d009      	beq.n	800291a <UART_SetConfig+0x26a>
 8002906:	e00b      	b.n	8002920 <UART_SetConfig+0x270>
 8002908:	2301      	movs	r3, #1
 800290a:	77fb      	strb	r3, [r7, #31]
 800290c:	e077      	b.n	80029fe <UART_SetConfig+0x34e>
 800290e:	2302      	movs	r3, #2
 8002910:	77fb      	strb	r3, [r7, #31]
 8002912:	e074      	b.n	80029fe <UART_SetConfig+0x34e>
 8002914:	2304      	movs	r3, #4
 8002916:	77fb      	strb	r3, [r7, #31]
 8002918:	e071      	b.n	80029fe <UART_SetConfig+0x34e>
 800291a:	2308      	movs	r3, #8
 800291c:	77fb      	strb	r3, [r7, #31]
 800291e:	e06e      	b.n	80029fe <UART_SetConfig+0x34e>
 8002920:	2310      	movs	r3, #16
 8002922:	77fb      	strb	r3, [r7, #31]
 8002924:	bf00      	nop
 8002926:	e06a      	b.n	80029fe <UART_SetConfig+0x34e>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a25      	ldr	r2, [pc, #148]	; (80029c4 <UART_SetConfig+0x314>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d124      	bne.n	800297c <UART_SetConfig+0x2cc>
 8002932:	4b1e      	ldr	r3, [pc, #120]	; (80029ac <UART_SetConfig+0x2fc>)
 8002934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002938:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800293c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002940:	d012      	beq.n	8002968 <UART_SetConfig+0x2b8>
 8002942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002946:	d802      	bhi.n	800294e <UART_SetConfig+0x29e>
 8002948:	2b00      	cmp	r3, #0
 800294a:	d007      	beq.n	800295c <UART_SetConfig+0x2ac>
 800294c:	e012      	b.n	8002974 <UART_SetConfig+0x2c4>
 800294e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002952:	d006      	beq.n	8002962 <UART_SetConfig+0x2b2>
 8002954:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002958:	d009      	beq.n	800296e <UART_SetConfig+0x2be>
 800295a:	e00b      	b.n	8002974 <UART_SetConfig+0x2c4>
 800295c:	2300      	movs	r3, #0
 800295e:	77fb      	strb	r3, [r7, #31]
 8002960:	e04d      	b.n	80029fe <UART_SetConfig+0x34e>
 8002962:	2302      	movs	r3, #2
 8002964:	77fb      	strb	r3, [r7, #31]
 8002966:	e04a      	b.n	80029fe <UART_SetConfig+0x34e>
 8002968:	2304      	movs	r3, #4
 800296a:	77fb      	strb	r3, [r7, #31]
 800296c:	e047      	b.n	80029fe <UART_SetConfig+0x34e>
 800296e:	2308      	movs	r3, #8
 8002970:	77fb      	strb	r3, [r7, #31]
 8002972:	e044      	b.n	80029fe <UART_SetConfig+0x34e>
 8002974:	2310      	movs	r3, #16
 8002976:	77fb      	strb	r3, [r7, #31]
 8002978:	bf00      	nop
 800297a:	e040      	b.n	80029fe <UART_SetConfig+0x34e>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a11      	ldr	r2, [pc, #68]	; (80029c8 <UART_SetConfig+0x318>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d139      	bne.n	80029fa <UART_SetConfig+0x34a>
 8002986:	4b09      	ldr	r3, [pc, #36]	; (80029ac <UART_SetConfig+0x2fc>)
 8002988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002990:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002994:	d027      	beq.n	80029e6 <UART_SetConfig+0x336>
 8002996:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800299a:	d817      	bhi.n	80029cc <UART_SetConfig+0x31c>
 800299c:	2b00      	cmp	r3, #0
 800299e:	d01c      	beq.n	80029da <UART_SetConfig+0x32a>
 80029a0:	e027      	b.n	80029f2 <UART_SetConfig+0x342>
 80029a2:	bf00      	nop
 80029a4:	efff69f3 	.word	0xefff69f3
 80029a8:	40011000 	.word	0x40011000
 80029ac:	40023800 	.word	0x40023800
 80029b0:	40004400 	.word	0x40004400
 80029b4:	40004800 	.word	0x40004800
 80029b8:	40004c00 	.word	0x40004c00
 80029bc:	40005000 	.word	0x40005000
 80029c0:	40011400 	.word	0x40011400
 80029c4:	40007800 	.word	0x40007800
 80029c8:	40007c00 	.word	0x40007c00
 80029cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029d0:	d006      	beq.n	80029e0 <UART_SetConfig+0x330>
 80029d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80029d6:	d009      	beq.n	80029ec <UART_SetConfig+0x33c>
 80029d8:	e00b      	b.n	80029f2 <UART_SetConfig+0x342>
 80029da:	2300      	movs	r3, #0
 80029dc:	77fb      	strb	r3, [r7, #31]
 80029de:	e00e      	b.n	80029fe <UART_SetConfig+0x34e>
 80029e0:	2302      	movs	r3, #2
 80029e2:	77fb      	strb	r3, [r7, #31]
 80029e4:	e00b      	b.n	80029fe <UART_SetConfig+0x34e>
 80029e6:	2304      	movs	r3, #4
 80029e8:	77fb      	strb	r3, [r7, #31]
 80029ea:	e008      	b.n	80029fe <UART_SetConfig+0x34e>
 80029ec:	2308      	movs	r3, #8
 80029ee:	77fb      	strb	r3, [r7, #31]
 80029f0:	e005      	b.n	80029fe <UART_SetConfig+0x34e>
 80029f2:	2310      	movs	r3, #16
 80029f4:	77fb      	strb	r3, [r7, #31]
 80029f6:	bf00      	nop
 80029f8:	e001      	b.n	80029fe <UART_SetConfig+0x34e>
 80029fa:	2310      	movs	r3, #16
 80029fc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a06:	d17f      	bne.n	8002b08 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8002a08:	7ffb      	ldrb	r3, [r7, #31]
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d85c      	bhi.n	8002ac8 <UART_SetConfig+0x418>
 8002a0e:	a201      	add	r2, pc, #4	; (adr r2, 8002a14 <UART_SetConfig+0x364>)
 8002a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a14:	08002a39 	.word	0x08002a39
 8002a18:	08002a59 	.word	0x08002a59
 8002a1c:	08002a79 	.word	0x08002a79
 8002a20:	08002ac9 	.word	0x08002ac9
 8002a24:	08002a91 	.word	0x08002a91
 8002a28:	08002ac9 	.word	0x08002ac9
 8002a2c:	08002ac9 	.word	0x08002ac9
 8002a30:	08002ac9 	.word	0x08002ac9
 8002a34:	08002ab1 	.word	0x08002ab1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a38:	f7fe fffe 	bl	8001a38 <HAL_RCC_GetPCLK1Freq>
 8002a3c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	005a      	lsls	r2, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	085b      	lsrs	r3, r3, #1
 8002a48:	441a      	add	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	61bb      	str	r3, [r7, #24]
        break;
 8002a56:	e03a      	b.n	8002ace <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a58:	f7ff f802 	bl	8001a60 <HAL_RCC_GetPCLK2Freq>
 8002a5c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	005a      	lsls	r2, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	085b      	lsrs	r3, r3, #1
 8002a68:	441a      	add	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	61bb      	str	r3, [r7, #24]
        break;
 8002a76:	e02a      	b.n	8002ace <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	085a      	lsrs	r2, r3, #1
 8002a7e:	4b5f      	ldr	r3, [pc, #380]	; (8002bfc <UART_SetConfig+0x54c>)
 8002a80:	4413      	add	r3, r2
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6852      	ldr	r2, [r2, #4]
 8002a86:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	61bb      	str	r3, [r7, #24]
        break;
 8002a8e:	e01e      	b.n	8002ace <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a90:	f7fe ff14 	bl	80018bc <HAL_RCC_GetSysClockFreq>
 8002a94:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	005a      	lsls	r2, r3, #1
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	085b      	lsrs	r3, r3, #1
 8002aa0:	441a      	add	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	61bb      	str	r3, [r7, #24]
        break;
 8002aae:	e00e      	b.n	8002ace <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	085b      	lsrs	r3, r3, #1
 8002ab6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	61bb      	str	r3, [r7, #24]
        break;
 8002ac6:	e002      	b.n	8002ace <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	75fb      	strb	r3, [r7, #23]
        break;
 8002acc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	2b0f      	cmp	r3, #15
 8002ad2:	d916      	bls.n	8002b02 <UART_SetConfig+0x452>
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ada:	d212      	bcs.n	8002b02 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	f023 030f 	bic.w	r3, r3, #15
 8002ae4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	085b      	lsrs	r3, r3, #1
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	897b      	ldrh	r3, [r7, #10]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	897a      	ldrh	r2, [r7, #10]
 8002afe:	60da      	str	r2, [r3, #12]
 8002b00:	e070      	b.n	8002be4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	75fb      	strb	r3, [r7, #23]
 8002b06:	e06d      	b.n	8002be4 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8002b08:	7ffb      	ldrb	r3, [r7, #31]
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d859      	bhi.n	8002bc2 <UART_SetConfig+0x512>
 8002b0e:	a201      	add	r2, pc, #4	; (adr r2, 8002b14 <UART_SetConfig+0x464>)
 8002b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b14:	08002b39 	.word	0x08002b39
 8002b18:	08002b57 	.word	0x08002b57
 8002b1c:	08002b75 	.word	0x08002b75
 8002b20:	08002bc3 	.word	0x08002bc3
 8002b24:	08002b8d 	.word	0x08002b8d
 8002b28:	08002bc3 	.word	0x08002bc3
 8002b2c:	08002bc3 	.word	0x08002bc3
 8002b30:	08002bc3 	.word	0x08002bc3
 8002b34:	08002bab 	.word	0x08002bab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b38:	f7fe ff7e 	bl	8001a38 <HAL_RCC_GetPCLK1Freq>
 8002b3c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	085a      	lsrs	r2, r3, #1
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	441a      	add	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	61bb      	str	r3, [r7, #24]
        break;
 8002b54:	e038      	b.n	8002bc8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b56:	f7fe ff83 	bl	8001a60 <HAL_RCC_GetPCLK2Freq>
 8002b5a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	085a      	lsrs	r2, r3, #1
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	441a      	add	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	61bb      	str	r3, [r7, #24]
        break;
 8002b72:	e029      	b.n	8002bc8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	085a      	lsrs	r2, r3, #1
 8002b7a:	4b21      	ldr	r3, [pc, #132]	; (8002c00 <UART_SetConfig+0x550>)
 8002b7c:	4413      	add	r3, r2
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6852      	ldr	r2, [r2, #4]
 8002b82:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	61bb      	str	r3, [r7, #24]
        break;
 8002b8a:	e01d      	b.n	8002bc8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b8c:	f7fe fe96 	bl	80018bc <HAL_RCC_GetSysClockFreq>
 8002b90:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	085a      	lsrs	r2, r3, #1
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	441a      	add	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	61bb      	str	r3, [r7, #24]
        break;
 8002ba8:	e00e      	b.n	8002bc8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	085b      	lsrs	r3, r3, #1
 8002bb0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	61bb      	str	r3, [r7, #24]
        break;
 8002bc0:	e002      	b.n	8002bc8 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	75fb      	strb	r3, [r7, #23]
        break;
 8002bc6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	2b0f      	cmp	r3, #15
 8002bcc:	d908      	bls.n	8002be0 <UART_SetConfig+0x530>
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd4:	d204      	bcs.n	8002be0 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	e001      	b.n	8002be4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3720      	adds	r7, #32
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	01e84800 	.word	0x01e84800
 8002c00:	00f42400 	.word	0x00f42400

08002c04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00a      	beq.n	8002c2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00a      	beq.n	8002c72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00a      	beq.n	8002c94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	f003 0310 	and.w	r3, r3, #16
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00a      	beq.n	8002cb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	f003 0320 	and.w	r3, r3, #32
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00a      	beq.n	8002cd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d01a      	beq.n	8002d1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d02:	d10a      	bne.n	8002d1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	605a      	str	r2, [r3, #4]
  }
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af02      	add	r7, sp, #8
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002d56:	f7fd ff15 	bl	8000b84 <HAL_GetTick>
 8002d5a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d10e      	bne.n	8002d88 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d6a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f814 	bl	8002da6 <UART_WaitOnFlagUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e00a      	b.n	8002d9e <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2220      	movs	r2, #32
 8002d92:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b084      	sub	sp, #16
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	60f8      	str	r0, [r7, #12]
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	603b      	str	r3, [r7, #0]
 8002db2:	4613      	mov	r3, r2
 8002db4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002db6:	e05d      	b.n	8002e74 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dbe:	d059      	beq.n	8002e74 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc0:	f7fd fee0 	bl	8000b84 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d302      	bcc.n	8002dd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d11b      	bne.n	8002e0e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002de4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0201 	bic.w	r2, r2, #1
 8002df4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e042      	b.n	8002e94 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d02b      	beq.n	8002e74 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e2a:	d123      	bne.n	8002e74 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e34:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e44:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0201 	bic.w	r2, r2, #1
 8002e54:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2220      	movs	r2, #32
 8002e66:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e00f      	b.n	8002e94 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	69da      	ldr	r2, [r3, #28]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	bf0c      	ite	eq
 8002e84:	2301      	moveq	r3, #1
 8002e86:	2300      	movne	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d092      	beq.n	8002db8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002eb2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0201 	bic.w	r2, r2, #1
 8002ec2:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	661a      	str	r2, [r3, #96]	; 0x60
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f7ff fbce 	bl	800269c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f00:	bf00      	nop
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f1e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2220      	movs	r2, #32
 8002f24:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff fbab 	bl	8002688 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <__errno>:
 8002f3c:	4b01      	ldr	r3, [pc, #4]	; (8002f44 <__errno+0x8>)
 8002f3e:	6818      	ldr	r0, [r3, #0]
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	2000000c 	.word	0x2000000c

08002f48 <__libc_init_array>:
 8002f48:	b570      	push	{r4, r5, r6, lr}
 8002f4a:	4e0d      	ldr	r6, [pc, #52]	; (8002f80 <__libc_init_array+0x38>)
 8002f4c:	4c0d      	ldr	r4, [pc, #52]	; (8002f84 <__libc_init_array+0x3c>)
 8002f4e:	1ba4      	subs	r4, r4, r6
 8002f50:	10a4      	asrs	r4, r4, #2
 8002f52:	2500      	movs	r5, #0
 8002f54:	42a5      	cmp	r5, r4
 8002f56:	d109      	bne.n	8002f6c <__libc_init_array+0x24>
 8002f58:	4e0b      	ldr	r6, [pc, #44]	; (8002f88 <__libc_init_array+0x40>)
 8002f5a:	4c0c      	ldr	r4, [pc, #48]	; (8002f8c <__libc_init_array+0x44>)
 8002f5c:	f000 fc88 	bl	8003870 <_init>
 8002f60:	1ba4      	subs	r4, r4, r6
 8002f62:	10a4      	asrs	r4, r4, #2
 8002f64:	2500      	movs	r5, #0
 8002f66:	42a5      	cmp	r5, r4
 8002f68:	d105      	bne.n	8002f76 <__libc_init_array+0x2e>
 8002f6a:	bd70      	pop	{r4, r5, r6, pc}
 8002f6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f70:	4798      	blx	r3
 8002f72:	3501      	adds	r5, #1
 8002f74:	e7ee      	b.n	8002f54 <__libc_init_array+0xc>
 8002f76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f7a:	4798      	blx	r3
 8002f7c:	3501      	adds	r5, #1
 8002f7e:	e7f2      	b.n	8002f66 <__libc_init_array+0x1e>
 8002f80:	0800391c 	.word	0x0800391c
 8002f84:	0800391c 	.word	0x0800391c
 8002f88:	0800391c 	.word	0x0800391c
 8002f8c:	08003920 	.word	0x08003920

08002f90 <memset>:
 8002f90:	4402      	add	r2, r0
 8002f92:	4603      	mov	r3, r0
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d100      	bne.n	8002f9a <memset+0xa>
 8002f98:	4770      	bx	lr
 8002f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f9e:	e7f9      	b.n	8002f94 <memset+0x4>

08002fa0 <_puts_r>:
 8002fa0:	b570      	push	{r4, r5, r6, lr}
 8002fa2:	460e      	mov	r6, r1
 8002fa4:	4605      	mov	r5, r0
 8002fa6:	b118      	cbz	r0, 8002fb0 <_puts_r+0x10>
 8002fa8:	6983      	ldr	r3, [r0, #24]
 8002faa:	b90b      	cbnz	r3, 8002fb0 <_puts_r+0x10>
 8002fac:	f000 fa0c 	bl	80033c8 <__sinit>
 8002fb0:	69ab      	ldr	r3, [r5, #24]
 8002fb2:	68ac      	ldr	r4, [r5, #8]
 8002fb4:	b913      	cbnz	r3, 8002fbc <_puts_r+0x1c>
 8002fb6:	4628      	mov	r0, r5
 8002fb8:	f000 fa06 	bl	80033c8 <__sinit>
 8002fbc:	4b23      	ldr	r3, [pc, #140]	; (800304c <_puts_r+0xac>)
 8002fbe:	429c      	cmp	r4, r3
 8002fc0:	d117      	bne.n	8002ff2 <_puts_r+0x52>
 8002fc2:	686c      	ldr	r4, [r5, #4]
 8002fc4:	89a3      	ldrh	r3, [r4, #12]
 8002fc6:	071b      	lsls	r3, r3, #28
 8002fc8:	d51d      	bpl.n	8003006 <_puts_r+0x66>
 8002fca:	6923      	ldr	r3, [r4, #16]
 8002fcc:	b1db      	cbz	r3, 8003006 <_puts_r+0x66>
 8002fce:	3e01      	subs	r6, #1
 8002fd0:	68a3      	ldr	r3, [r4, #8]
 8002fd2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	60a3      	str	r3, [r4, #8]
 8002fda:	b9e9      	cbnz	r1, 8003018 <_puts_r+0x78>
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	da2e      	bge.n	800303e <_puts_r+0x9e>
 8002fe0:	4622      	mov	r2, r4
 8002fe2:	210a      	movs	r1, #10
 8002fe4:	4628      	mov	r0, r5
 8002fe6:	f000 f83f 	bl	8003068 <__swbuf_r>
 8002fea:	3001      	adds	r0, #1
 8002fec:	d011      	beq.n	8003012 <_puts_r+0x72>
 8002fee:	200a      	movs	r0, #10
 8002ff0:	e011      	b.n	8003016 <_puts_r+0x76>
 8002ff2:	4b17      	ldr	r3, [pc, #92]	; (8003050 <_puts_r+0xb0>)
 8002ff4:	429c      	cmp	r4, r3
 8002ff6:	d101      	bne.n	8002ffc <_puts_r+0x5c>
 8002ff8:	68ac      	ldr	r4, [r5, #8]
 8002ffa:	e7e3      	b.n	8002fc4 <_puts_r+0x24>
 8002ffc:	4b15      	ldr	r3, [pc, #84]	; (8003054 <_puts_r+0xb4>)
 8002ffe:	429c      	cmp	r4, r3
 8003000:	bf08      	it	eq
 8003002:	68ec      	ldreq	r4, [r5, #12]
 8003004:	e7de      	b.n	8002fc4 <_puts_r+0x24>
 8003006:	4621      	mov	r1, r4
 8003008:	4628      	mov	r0, r5
 800300a:	f000 f87f 	bl	800310c <__swsetup_r>
 800300e:	2800      	cmp	r0, #0
 8003010:	d0dd      	beq.n	8002fce <_puts_r+0x2e>
 8003012:	f04f 30ff 	mov.w	r0, #4294967295
 8003016:	bd70      	pop	{r4, r5, r6, pc}
 8003018:	2b00      	cmp	r3, #0
 800301a:	da04      	bge.n	8003026 <_puts_r+0x86>
 800301c:	69a2      	ldr	r2, [r4, #24]
 800301e:	429a      	cmp	r2, r3
 8003020:	dc06      	bgt.n	8003030 <_puts_r+0x90>
 8003022:	290a      	cmp	r1, #10
 8003024:	d004      	beq.n	8003030 <_puts_r+0x90>
 8003026:	6823      	ldr	r3, [r4, #0]
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	6022      	str	r2, [r4, #0]
 800302c:	7019      	strb	r1, [r3, #0]
 800302e:	e7cf      	b.n	8002fd0 <_puts_r+0x30>
 8003030:	4622      	mov	r2, r4
 8003032:	4628      	mov	r0, r5
 8003034:	f000 f818 	bl	8003068 <__swbuf_r>
 8003038:	3001      	adds	r0, #1
 800303a:	d1c9      	bne.n	8002fd0 <_puts_r+0x30>
 800303c:	e7e9      	b.n	8003012 <_puts_r+0x72>
 800303e:	6823      	ldr	r3, [r4, #0]
 8003040:	200a      	movs	r0, #10
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	6022      	str	r2, [r4, #0]
 8003046:	7018      	strb	r0, [r3, #0]
 8003048:	e7e5      	b.n	8003016 <_puts_r+0x76>
 800304a:	bf00      	nop
 800304c:	080038d4 	.word	0x080038d4
 8003050:	080038f4 	.word	0x080038f4
 8003054:	080038b4 	.word	0x080038b4

08003058 <puts>:
 8003058:	4b02      	ldr	r3, [pc, #8]	; (8003064 <puts+0xc>)
 800305a:	4601      	mov	r1, r0
 800305c:	6818      	ldr	r0, [r3, #0]
 800305e:	f7ff bf9f 	b.w	8002fa0 <_puts_r>
 8003062:	bf00      	nop
 8003064:	2000000c 	.word	0x2000000c

08003068 <__swbuf_r>:
 8003068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306a:	460e      	mov	r6, r1
 800306c:	4614      	mov	r4, r2
 800306e:	4605      	mov	r5, r0
 8003070:	b118      	cbz	r0, 800307a <__swbuf_r+0x12>
 8003072:	6983      	ldr	r3, [r0, #24]
 8003074:	b90b      	cbnz	r3, 800307a <__swbuf_r+0x12>
 8003076:	f000 f9a7 	bl	80033c8 <__sinit>
 800307a:	4b21      	ldr	r3, [pc, #132]	; (8003100 <__swbuf_r+0x98>)
 800307c:	429c      	cmp	r4, r3
 800307e:	d12a      	bne.n	80030d6 <__swbuf_r+0x6e>
 8003080:	686c      	ldr	r4, [r5, #4]
 8003082:	69a3      	ldr	r3, [r4, #24]
 8003084:	60a3      	str	r3, [r4, #8]
 8003086:	89a3      	ldrh	r3, [r4, #12]
 8003088:	071a      	lsls	r2, r3, #28
 800308a:	d52e      	bpl.n	80030ea <__swbuf_r+0x82>
 800308c:	6923      	ldr	r3, [r4, #16]
 800308e:	b363      	cbz	r3, 80030ea <__swbuf_r+0x82>
 8003090:	6923      	ldr	r3, [r4, #16]
 8003092:	6820      	ldr	r0, [r4, #0]
 8003094:	1ac0      	subs	r0, r0, r3
 8003096:	6963      	ldr	r3, [r4, #20]
 8003098:	b2f6      	uxtb	r6, r6
 800309a:	4283      	cmp	r3, r0
 800309c:	4637      	mov	r7, r6
 800309e:	dc04      	bgt.n	80030aa <__swbuf_r+0x42>
 80030a0:	4621      	mov	r1, r4
 80030a2:	4628      	mov	r0, r5
 80030a4:	f000 f926 	bl	80032f4 <_fflush_r>
 80030a8:	bb28      	cbnz	r0, 80030f6 <__swbuf_r+0x8e>
 80030aa:	68a3      	ldr	r3, [r4, #8]
 80030ac:	3b01      	subs	r3, #1
 80030ae:	60a3      	str	r3, [r4, #8]
 80030b0:	6823      	ldr	r3, [r4, #0]
 80030b2:	1c5a      	adds	r2, r3, #1
 80030b4:	6022      	str	r2, [r4, #0]
 80030b6:	701e      	strb	r6, [r3, #0]
 80030b8:	6963      	ldr	r3, [r4, #20]
 80030ba:	3001      	adds	r0, #1
 80030bc:	4283      	cmp	r3, r0
 80030be:	d004      	beq.n	80030ca <__swbuf_r+0x62>
 80030c0:	89a3      	ldrh	r3, [r4, #12]
 80030c2:	07db      	lsls	r3, r3, #31
 80030c4:	d519      	bpl.n	80030fa <__swbuf_r+0x92>
 80030c6:	2e0a      	cmp	r6, #10
 80030c8:	d117      	bne.n	80030fa <__swbuf_r+0x92>
 80030ca:	4621      	mov	r1, r4
 80030cc:	4628      	mov	r0, r5
 80030ce:	f000 f911 	bl	80032f4 <_fflush_r>
 80030d2:	b190      	cbz	r0, 80030fa <__swbuf_r+0x92>
 80030d4:	e00f      	b.n	80030f6 <__swbuf_r+0x8e>
 80030d6:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <__swbuf_r+0x9c>)
 80030d8:	429c      	cmp	r4, r3
 80030da:	d101      	bne.n	80030e0 <__swbuf_r+0x78>
 80030dc:	68ac      	ldr	r4, [r5, #8]
 80030de:	e7d0      	b.n	8003082 <__swbuf_r+0x1a>
 80030e0:	4b09      	ldr	r3, [pc, #36]	; (8003108 <__swbuf_r+0xa0>)
 80030e2:	429c      	cmp	r4, r3
 80030e4:	bf08      	it	eq
 80030e6:	68ec      	ldreq	r4, [r5, #12]
 80030e8:	e7cb      	b.n	8003082 <__swbuf_r+0x1a>
 80030ea:	4621      	mov	r1, r4
 80030ec:	4628      	mov	r0, r5
 80030ee:	f000 f80d 	bl	800310c <__swsetup_r>
 80030f2:	2800      	cmp	r0, #0
 80030f4:	d0cc      	beq.n	8003090 <__swbuf_r+0x28>
 80030f6:	f04f 37ff 	mov.w	r7, #4294967295
 80030fa:	4638      	mov	r0, r7
 80030fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030fe:	bf00      	nop
 8003100:	080038d4 	.word	0x080038d4
 8003104:	080038f4 	.word	0x080038f4
 8003108:	080038b4 	.word	0x080038b4

0800310c <__swsetup_r>:
 800310c:	4b32      	ldr	r3, [pc, #200]	; (80031d8 <__swsetup_r+0xcc>)
 800310e:	b570      	push	{r4, r5, r6, lr}
 8003110:	681d      	ldr	r5, [r3, #0]
 8003112:	4606      	mov	r6, r0
 8003114:	460c      	mov	r4, r1
 8003116:	b125      	cbz	r5, 8003122 <__swsetup_r+0x16>
 8003118:	69ab      	ldr	r3, [r5, #24]
 800311a:	b913      	cbnz	r3, 8003122 <__swsetup_r+0x16>
 800311c:	4628      	mov	r0, r5
 800311e:	f000 f953 	bl	80033c8 <__sinit>
 8003122:	4b2e      	ldr	r3, [pc, #184]	; (80031dc <__swsetup_r+0xd0>)
 8003124:	429c      	cmp	r4, r3
 8003126:	d10f      	bne.n	8003148 <__swsetup_r+0x3c>
 8003128:	686c      	ldr	r4, [r5, #4]
 800312a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800312e:	b29a      	uxth	r2, r3
 8003130:	0715      	lsls	r5, r2, #28
 8003132:	d42c      	bmi.n	800318e <__swsetup_r+0x82>
 8003134:	06d0      	lsls	r0, r2, #27
 8003136:	d411      	bmi.n	800315c <__swsetup_r+0x50>
 8003138:	2209      	movs	r2, #9
 800313a:	6032      	str	r2, [r6, #0]
 800313c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003140:	81a3      	strh	r3, [r4, #12]
 8003142:	f04f 30ff 	mov.w	r0, #4294967295
 8003146:	e03e      	b.n	80031c6 <__swsetup_r+0xba>
 8003148:	4b25      	ldr	r3, [pc, #148]	; (80031e0 <__swsetup_r+0xd4>)
 800314a:	429c      	cmp	r4, r3
 800314c:	d101      	bne.n	8003152 <__swsetup_r+0x46>
 800314e:	68ac      	ldr	r4, [r5, #8]
 8003150:	e7eb      	b.n	800312a <__swsetup_r+0x1e>
 8003152:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <__swsetup_r+0xd8>)
 8003154:	429c      	cmp	r4, r3
 8003156:	bf08      	it	eq
 8003158:	68ec      	ldreq	r4, [r5, #12]
 800315a:	e7e6      	b.n	800312a <__swsetup_r+0x1e>
 800315c:	0751      	lsls	r1, r2, #29
 800315e:	d512      	bpl.n	8003186 <__swsetup_r+0x7a>
 8003160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003162:	b141      	cbz	r1, 8003176 <__swsetup_r+0x6a>
 8003164:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003168:	4299      	cmp	r1, r3
 800316a:	d002      	beq.n	8003172 <__swsetup_r+0x66>
 800316c:	4630      	mov	r0, r6
 800316e:	f000 fa19 	bl	80035a4 <_free_r>
 8003172:	2300      	movs	r3, #0
 8003174:	6363      	str	r3, [r4, #52]	; 0x34
 8003176:	89a3      	ldrh	r3, [r4, #12]
 8003178:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800317c:	81a3      	strh	r3, [r4, #12]
 800317e:	2300      	movs	r3, #0
 8003180:	6063      	str	r3, [r4, #4]
 8003182:	6923      	ldr	r3, [r4, #16]
 8003184:	6023      	str	r3, [r4, #0]
 8003186:	89a3      	ldrh	r3, [r4, #12]
 8003188:	f043 0308 	orr.w	r3, r3, #8
 800318c:	81a3      	strh	r3, [r4, #12]
 800318e:	6923      	ldr	r3, [r4, #16]
 8003190:	b94b      	cbnz	r3, 80031a6 <__swsetup_r+0x9a>
 8003192:	89a3      	ldrh	r3, [r4, #12]
 8003194:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800319c:	d003      	beq.n	80031a6 <__swsetup_r+0x9a>
 800319e:	4621      	mov	r1, r4
 80031a0:	4630      	mov	r0, r6
 80031a2:	f000 f9bf 	bl	8003524 <__smakebuf_r>
 80031a6:	89a2      	ldrh	r2, [r4, #12]
 80031a8:	f012 0301 	ands.w	r3, r2, #1
 80031ac:	d00c      	beq.n	80031c8 <__swsetup_r+0xbc>
 80031ae:	2300      	movs	r3, #0
 80031b0:	60a3      	str	r3, [r4, #8]
 80031b2:	6963      	ldr	r3, [r4, #20]
 80031b4:	425b      	negs	r3, r3
 80031b6:	61a3      	str	r3, [r4, #24]
 80031b8:	6923      	ldr	r3, [r4, #16]
 80031ba:	b953      	cbnz	r3, 80031d2 <__swsetup_r+0xc6>
 80031bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031c0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80031c4:	d1ba      	bne.n	800313c <__swsetup_r+0x30>
 80031c6:	bd70      	pop	{r4, r5, r6, pc}
 80031c8:	0792      	lsls	r2, r2, #30
 80031ca:	bf58      	it	pl
 80031cc:	6963      	ldrpl	r3, [r4, #20]
 80031ce:	60a3      	str	r3, [r4, #8]
 80031d0:	e7f2      	b.n	80031b8 <__swsetup_r+0xac>
 80031d2:	2000      	movs	r0, #0
 80031d4:	e7f7      	b.n	80031c6 <__swsetup_r+0xba>
 80031d6:	bf00      	nop
 80031d8:	2000000c 	.word	0x2000000c
 80031dc:	080038d4 	.word	0x080038d4
 80031e0:	080038f4 	.word	0x080038f4
 80031e4:	080038b4 	.word	0x080038b4

080031e8 <__sflush_r>:
 80031e8:	898a      	ldrh	r2, [r1, #12]
 80031ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031ee:	4605      	mov	r5, r0
 80031f0:	0710      	lsls	r0, r2, #28
 80031f2:	460c      	mov	r4, r1
 80031f4:	d458      	bmi.n	80032a8 <__sflush_r+0xc0>
 80031f6:	684b      	ldr	r3, [r1, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	dc05      	bgt.n	8003208 <__sflush_r+0x20>
 80031fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	dc02      	bgt.n	8003208 <__sflush_r+0x20>
 8003202:	2000      	movs	r0, #0
 8003204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003208:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800320a:	2e00      	cmp	r6, #0
 800320c:	d0f9      	beq.n	8003202 <__sflush_r+0x1a>
 800320e:	2300      	movs	r3, #0
 8003210:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003214:	682f      	ldr	r7, [r5, #0]
 8003216:	6a21      	ldr	r1, [r4, #32]
 8003218:	602b      	str	r3, [r5, #0]
 800321a:	d032      	beq.n	8003282 <__sflush_r+0x9a>
 800321c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800321e:	89a3      	ldrh	r3, [r4, #12]
 8003220:	075a      	lsls	r2, r3, #29
 8003222:	d505      	bpl.n	8003230 <__sflush_r+0x48>
 8003224:	6863      	ldr	r3, [r4, #4]
 8003226:	1ac0      	subs	r0, r0, r3
 8003228:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800322a:	b10b      	cbz	r3, 8003230 <__sflush_r+0x48>
 800322c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800322e:	1ac0      	subs	r0, r0, r3
 8003230:	2300      	movs	r3, #0
 8003232:	4602      	mov	r2, r0
 8003234:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003236:	6a21      	ldr	r1, [r4, #32]
 8003238:	4628      	mov	r0, r5
 800323a:	47b0      	blx	r6
 800323c:	1c43      	adds	r3, r0, #1
 800323e:	89a3      	ldrh	r3, [r4, #12]
 8003240:	d106      	bne.n	8003250 <__sflush_r+0x68>
 8003242:	6829      	ldr	r1, [r5, #0]
 8003244:	291d      	cmp	r1, #29
 8003246:	d848      	bhi.n	80032da <__sflush_r+0xf2>
 8003248:	4a29      	ldr	r2, [pc, #164]	; (80032f0 <__sflush_r+0x108>)
 800324a:	40ca      	lsrs	r2, r1
 800324c:	07d6      	lsls	r6, r2, #31
 800324e:	d544      	bpl.n	80032da <__sflush_r+0xf2>
 8003250:	2200      	movs	r2, #0
 8003252:	6062      	str	r2, [r4, #4]
 8003254:	04d9      	lsls	r1, r3, #19
 8003256:	6922      	ldr	r2, [r4, #16]
 8003258:	6022      	str	r2, [r4, #0]
 800325a:	d504      	bpl.n	8003266 <__sflush_r+0x7e>
 800325c:	1c42      	adds	r2, r0, #1
 800325e:	d101      	bne.n	8003264 <__sflush_r+0x7c>
 8003260:	682b      	ldr	r3, [r5, #0]
 8003262:	b903      	cbnz	r3, 8003266 <__sflush_r+0x7e>
 8003264:	6560      	str	r0, [r4, #84]	; 0x54
 8003266:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003268:	602f      	str	r7, [r5, #0]
 800326a:	2900      	cmp	r1, #0
 800326c:	d0c9      	beq.n	8003202 <__sflush_r+0x1a>
 800326e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003272:	4299      	cmp	r1, r3
 8003274:	d002      	beq.n	800327c <__sflush_r+0x94>
 8003276:	4628      	mov	r0, r5
 8003278:	f000 f994 	bl	80035a4 <_free_r>
 800327c:	2000      	movs	r0, #0
 800327e:	6360      	str	r0, [r4, #52]	; 0x34
 8003280:	e7c0      	b.n	8003204 <__sflush_r+0x1c>
 8003282:	2301      	movs	r3, #1
 8003284:	4628      	mov	r0, r5
 8003286:	47b0      	blx	r6
 8003288:	1c41      	adds	r1, r0, #1
 800328a:	d1c8      	bne.n	800321e <__sflush_r+0x36>
 800328c:	682b      	ldr	r3, [r5, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0c5      	beq.n	800321e <__sflush_r+0x36>
 8003292:	2b1d      	cmp	r3, #29
 8003294:	d001      	beq.n	800329a <__sflush_r+0xb2>
 8003296:	2b16      	cmp	r3, #22
 8003298:	d101      	bne.n	800329e <__sflush_r+0xb6>
 800329a:	602f      	str	r7, [r5, #0]
 800329c:	e7b1      	b.n	8003202 <__sflush_r+0x1a>
 800329e:	89a3      	ldrh	r3, [r4, #12]
 80032a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032a4:	81a3      	strh	r3, [r4, #12]
 80032a6:	e7ad      	b.n	8003204 <__sflush_r+0x1c>
 80032a8:	690f      	ldr	r7, [r1, #16]
 80032aa:	2f00      	cmp	r7, #0
 80032ac:	d0a9      	beq.n	8003202 <__sflush_r+0x1a>
 80032ae:	0793      	lsls	r3, r2, #30
 80032b0:	680e      	ldr	r6, [r1, #0]
 80032b2:	bf08      	it	eq
 80032b4:	694b      	ldreq	r3, [r1, #20]
 80032b6:	600f      	str	r7, [r1, #0]
 80032b8:	bf18      	it	ne
 80032ba:	2300      	movne	r3, #0
 80032bc:	eba6 0807 	sub.w	r8, r6, r7
 80032c0:	608b      	str	r3, [r1, #8]
 80032c2:	f1b8 0f00 	cmp.w	r8, #0
 80032c6:	dd9c      	ble.n	8003202 <__sflush_r+0x1a>
 80032c8:	4643      	mov	r3, r8
 80032ca:	463a      	mov	r2, r7
 80032cc:	6a21      	ldr	r1, [r4, #32]
 80032ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80032d0:	4628      	mov	r0, r5
 80032d2:	47b0      	blx	r6
 80032d4:	2800      	cmp	r0, #0
 80032d6:	dc06      	bgt.n	80032e6 <__sflush_r+0xfe>
 80032d8:	89a3      	ldrh	r3, [r4, #12]
 80032da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032de:	81a3      	strh	r3, [r4, #12]
 80032e0:	f04f 30ff 	mov.w	r0, #4294967295
 80032e4:	e78e      	b.n	8003204 <__sflush_r+0x1c>
 80032e6:	4407      	add	r7, r0
 80032e8:	eba8 0800 	sub.w	r8, r8, r0
 80032ec:	e7e9      	b.n	80032c2 <__sflush_r+0xda>
 80032ee:	bf00      	nop
 80032f0:	20400001 	.word	0x20400001

080032f4 <_fflush_r>:
 80032f4:	b538      	push	{r3, r4, r5, lr}
 80032f6:	690b      	ldr	r3, [r1, #16]
 80032f8:	4605      	mov	r5, r0
 80032fa:	460c      	mov	r4, r1
 80032fc:	b1db      	cbz	r3, 8003336 <_fflush_r+0x42>
 80032fe:	b118      	cbz	r0, 8003308 <_fflush_r+0x14>
 8003300:	6983      	ldr	r3, [r0, #24]
 8003302:	b90b      	cbnz	r3, 8003308 <_fflush_r+0x14>
 8003304:	f000 f860 	bl	80033c8 <__sinit>
 8003308:	4b0c      	ldr	r3, [pc, #48]	; (800333c <_fflush_r+0x48>)
 800330a:	429c      	cmp	r4, r3
 800330c:	d109      	bne.n	8003322 <_fflush_r+0x2e>
 800330e:	686c      	ldr	r4, [r5, #4]
 8003310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003314:	b17b      	cbz	r3, 8003336 <_fflush_r+0x42>
 8003316:	4621      	mov	r1, r4
 8003318:	4628      	mov	r0, r5
 800331a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800331e:	f7ff bf63 	b.w	80031e8 <__sflush_r>
 8003322:	4b07      	ldr	r3, [pc, #28]	; (8003340 <_fflush_r+0x4c>)
 8003324:	429c      	cmp	r4, r3
 8003326:	d101      	bne.n	800332c <_fflush_r+0x38>
 8003328:	68ac      	ldr	r4, [r5, #8]
 800332a:	e7f1      	b.n	8003310 <_fflush_r+0x1c>
 800332c:	4b05      	ldr	r3, [pc, #20]	; (8003344 <_fflush_r+0x50>)
 800332e:	429c      	cmp	r4, r3
 8003330:	bf08      	it	eq
 8003332:	68ec      	ldreq	r4, [r5, #12]
 8003334:	e7ec      	b.n	8003310 <_fflush_r+0x1c>
 8003336:	2000      	movs	r0, #0
 8003338:	bd38      	pop	{r3, r4, r5, pc}
 800333a:	bf00      	nop
 800333c:	080038d4 	.word	0x080038d4
 8003340:	080038f4 	.word	0x080038f4
 8003344:	080038b4 	.word	0x080038b4

08003348 <std>:
 8003348:	2300      	movs	r3, #0
 800334a:	b510      	push	{r4, lr}
 800334c:	4604      	mov	r4, r0
 800334e:	e9c0 3300 	strd	r3, r3, [r0]
 8003352:	6083      	str	r3, [r0, #8]
 8003354:	8181      	strh	r1, [r0, #12]
 8003356:	6643      	str	r3, [r0, #100]	; 0x64
 8003358:	81c2      	strh	r2, [r0, #14]
 800335a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800335e:	6183      	str	r3, [r0, #24]
 8003360:	4619      	mov	r1, r3
 8003362:	2208      	movs	r2, #8
 8003364:	305c      	adds	r0, #92	; 0x5c
 8003366:	f7ff fe13 	bl	8002f90 <memset>
 800336a:	4b05      	ldr	r3, [pc, #20]	; (8003380 <std+0x38>)
 800336c:	6263      	str	r3, [r4, #36]	; 0x24
 800336e:	4b05      	ldr	r3, [pc, #20]	; (8003384 <std+0x3c>)
 8003370:	62a3      	str	r3, [r4, #40]	; 0x28
 8003372:	4b05      	ldr	r3, [pc, #20]	; (8003388 <std+0x40>)
 8003374:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003376:	4b05      	ldr	r3, [pc, #20]	; (800338c <std+0x44>)
 8003378:	6224      	str	r4, [r4, #32]
 800337a:	6323      	str	r3, [r4, #48]	; 0x30
 800337c:	bd10      	pop	{r4, pc}
 800337e:	bf00      	nop
 8003380:	08003715 	.word	0x08003715
 8003384:	08003737 	.word	0x08003737
 8003388:	0800376f 	.word	0x0800376f
 800338c:	08003793 	.word	0x08003793

08003390 <_cleanup_r>:
 8003390:	4901      	ldr	r1, [pc, #4]	; (8003398 <_cleanup_r+0x8>)
 8003392:	f000 b885 	b.w	80034a0 <_fwalk_reent>
 8003396:	bf00      	nop
 8003398:	080032f5 	.word	0x080032f5

0800339c <__sfmoreglue>:
 800339c:	b570      	push	{r4, r5, r6, lr}
 800339e:	1e4a      	subs	r2, r1, #1
 80033a0:	2568      	movs	r5, #104	; 0x68
 80033a2:	4355      	muls	r5, r2
 80033a4:	460e      	mov	r6, r1
 80033a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80033aa:	f000 f949 	bl	8003640 <_malloc_r>
 80033ae:	4604      	mov	r4, r0
 80033b0:	b140      	cbz	r0, 80033c4 <__sfmoreglue+0x28>
 80033b2:	2100      	movs	r1, #0
 80033b4:	e9c0 1600 	strd	r1, r6, [r0]
 80033b8:	300c      	adds	r0, #12
 80033ba:	60a0      	str	r0, [r4, #8]
 80033bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80033c0:	f7ff fde6 	bl	8002f90 <memset>
 80033c4:	4620      	mov	r0, r4
 80033c6:	bd70      	pop	{r4, r5, r6, pc}

080033c8 <__sinit>:
 80033c8:	6983      	ldr	r3, [r0, #24]
 80033ca:	b510      	push	{r4, lr}
 80033cc:	4604      	mov	r4, r0
 80033ce:	bb33      	cbnz	r3, 800341e <__sinit+0x56>
 80033d0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80033d4:	6503      	str	r3, [r0, #80]	; 0x50
 80033d6:	4b12      	ldr	r3, [pc, #72]	; (8003420 <__sinit+0x58>)
 80033d8:	4a12      	ldr	r2, [pc, #72]	; (8003424 <__sinit+0x5c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6282      	str	r2, [r0, #40]	; 0x28
 80033de:	4298      	cmp	r0, r3
 80033e0:	bf04      	itt	eq
 80033e2:	2301      	moveq	r3, #1
 80033e4:	6183      	streq	r3, [r0, #24]
 80033e6:	f000 f81f 	bl	8003428 <__sfp>
 80033ea:	6060      	str	r0, [r4, #4]
 80033ec:	4620      	mov	r0, r4
 80033ee:	f000 f81b 	bl	8003428 <__sfp>
 80033f2:	60a0      	str	r0, [r4, #8]
 80033f4:	4620      	mov	r0, r4
 80033f6:	f000 f817 	bl	8003428 <__sfp>
 80033fa:	2200      	movs	r2, #0
 80033fc:	60e0      	str	r0, [r4, #12]
 80033fe:	2104      	movs	r1, #4
 8003400:	6860      	ldr	r0, [r4, #4]
 8003402:	f7ff ffa1 	bl	8003348 <std>
 8003406:	2201      	movs	r2, #1
 8003408:	2109      	movs	r1, #9
 800340a:	68a0      	ldr	r0, [r4, #8]
 800340c:	f7ff ff9c 	bl	8003348 <std>
 8003410:	2202      	movs	r2, #2
 8003412:	2112      	movs	r1, #18
 8003414:	68e0      	ldr	r0, [r4, #12]
 8003416:	f7ff ff97 	bl	8003348 <std>
 800341a:	2301      	movs	r3, #1
 800341c:	61a3      	str	r3, [r4, #24]
 800341e:	bd10      	pop	{r4, pc}
 8003420:	080038b0 	.word	0x080038b0
 8003424:	08003391 	.word	0x08003391

08003428 <__sfp>:
 8003428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800342a:	4b1b      	ldr	r3, [pc, #108]	; (8003498 <__sfp+0x70>)
 800342c:	681e      	ldr	r6, [r3, #0]
 800342e:	69b3      	ldr	r3, [r6, #24]
 8003430:	4607      	mov	r7, r0
 8003432:	b913      	cbnz	r3, 800343a <__sfp+0x12>
 8003434:	4630      	mov	r0, r6
 8003436:	f7ff ffc7 	bl	80033c8 <__sinit>
 800343a:	3648      	adds	r6, #72	; 0x48
 800343c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003440:	3b01      	subs	r3, #1
 8003442:	d503      	bpl.n	800344c <__sfp+0x24>
 8003444:	6833      	ldr	r3, [r6, #0]
 8003446:	b133      	cbz	r3, 8003456 <__sfp+0x2e>
 8003448:	6836      	ldr	r6, [r6, #0]
 800344a:	e7f7      	b.n	800343c <__sfp+0x14>
 800344c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003450:	b16d      	cbz	r5, 800346e <__sfp+0x46>
 8003452:	3468      	adds	r4, #104	; 0x68
 8003454:	e7f4      	b.n	8003440 <__sfp+0x18>
 8003456:	2104      	movs	r1, #4
 8003458:	4638      	mov	r0, r7
 800345a:	f7ff ff9f 	bl	800339c <__sfmoreglue>
 800345e:	6030      	str	r0, [r6, #0]
 8003460:	2800      	cmp	r0, #0
 8003462:	d1f1      	bne.n	8003448 <__sfp+0x20>
 8003464:	230c      	movs	r3, #12
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	4604      	mov	r4, r0
 800346a:	4620      	mov	r0, r4
 800346c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800346e:	4b0b      	ldr	r3, [pc, #44]	; (800349c <__sfp+0x74>)
 8003470:	6665      	str	r5, [r4, #100]	; 0x64
 8003472:	e9c4 5500 	strd	r5, r5, [r4]
 8003476:	60a5      	str	r5, [r4, #8]
 8003478:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800347c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003480:	2208      	movs	r2, #8
 8003482:	4629      	mov	r1, r5
 8003484:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003488:	f7ff fd82 	bl	8002f90 <memset>
 800348c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003490:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003494:	e7e9      	b.n	800346a <__sfp+0x42>
 8003496:	bf00      	nop
 8003498:	080038b0 	.word	0x080038b0
 800349c:	ffff0001 	.word	0xffff0001

080034a0 <_fwalk_reent>:
 80034a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034a4:	4680      	mov	r8, r0
 80034a6:	4689      	mov	r9, r1
 80034a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80034ac:	2600      	movs	r6, #0
 80034ae:	b914      	cbnz	r4, 80034b6 <_fwalk_reent+0x16>
 80034b0:	4630      	mov	r0, r6
 80034b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034b6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80034ba:	3f01      	subs	r7, #1
 80034bc:	d501      	bpl.n	80034c2 <_fwalk_reent+0x22>
 80034be:	6824      	ldr	r4, [r4, #0]
 80034c0:	e7f5      	b.n	80034ae <_fwalk_reent+0xe>
 80034c2:	89ab      	ldrh	r3, [r5, #12]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d907      	bls.n	80034d8 <_fwalk_reent+0x38>
 80034c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034cc:	3301      	adds	r3, #1
 80034ce:	d003      	beq.n	80034d8 <_fwalk_reent+0x38>
 80034d0:	4629      	mov	r1, r5
 80034d2:	4640      	mov	r0, r8
 80034d4:	47c8      	blx	r9
 80034d6:	4306      	orrs	r6, r0
 80034d8:	3568      	adds	r5, #104	; 0x68
 80034da:	e7ee      	b.n	80034ba <_fwalk_reent+0x1a>

080034dc <__swhatbuf_r>:
 80034dc:	b570      	push	{r4, r5, r6, lr}
 80034de:	460e      	mov	r6, r1
 80034e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034e4:	2900      	cmp	r1, #0
 80034e6:	b096      	sub	sp, #88	; 0x58
 80034e8:	4614      	mov	r4, r2
 80034ea:	461d      	mov	r5, r3
 80034ec:	da07      	bge.n	80034fe <__swhatbuf_r+0x22>
 80034ee:	2300      	movs	r3, #0
 80034f0:	602b      	str	r3, [r5, #0]
 80034f2:	89b3      	ldrh	r3, [r6, #12]
 80034f4:	061a      	lsls	r2, r3, #24
 80034f6:	d410      	bmi.n	800351a <__swhatbuf_r+0x3e>
 80034f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034fc:	e00e      	b.n	800351c <__swhatbuf_r+0x40>
 80034fe:	466a      	mov	r2, sp
 8003500:	f000 f96e 	bl	80037e0 <_fstat_r>
 8003504:	2800      	cmp	r0, #0
 8003506:	dbf2      	blt.n	80034ee <__swhatbuf_r+0x12>
 8003508:	9a01      	ldr	r2, [sp, #4]
 800350a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800350e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003512:	425a      	negs	r2, r3
 8003514:	415a      	adcs	r2, r3
 8003516:	602a      	str	r2, [r5, #0]
 8003518:	e7ee      	b.n	80034f8 <__swhatbuf_r+0x1c>
 800351a:	2340      	movs	r3, #64	; 0x40
 800351c:	2000      	movs	r0, #0
 800351e:	6023      	str	r3, [r4, #0]
 8003520:	b016      	add	sp, #88	; 0x58
 8003522:	bd70      	pop	{r4, r5, r6, pc}

08003524 <__smakebuf_r>:
 8003524:	898b      	ldrh	r3, [r1, #12]
 8003526:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003528:	079d      	lsls	r5, r3, #30
 800352a:	4606      	mov	r6, r0
 800352c:	460c      	mov	r4, r1
 800352e:	d507      	bpl.n	8003540 <__smakebuf_r+0x1c>
 8003530:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003534:	6023      	str	r3, [r4, #0]
 8003536:	6123      	str	r3, [r4, #16]
 8003538:	2301      	movs	r3, #1
 800353a:	6163      	str	r3, [r4, #20]
 800353c:	b002      	add	sp, #8
 800353e:	bd70      	pop	{r4, r5, r6, pc}
 8003540:	ab01      	add	r3, sp, #4
 8003542:	466a      	mov	r2, sp
 8003544:	f7ff ffca 	bl	80034dc <__swhatbuf_r>
 8003548:	9900      	ldr	r1, [sp, #0]
 800354a:	4605      	mov	r5, r0
 800354c:	4630      	mov	r0, r6
 800354e:	f000 f877 	bl	8003640 <_malloc_r>
 8003552:	b948      	cbnz	r0, 8003568 <__smakebuf_r+0x44>
 8003554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003558:	059a      	lsls	r2, r3, #22
 800355a:	d4ef      	bmi.n	800353c <__smakebuf_r+0x18>
 800355c:	f023 0303 	bic.w	r3, r3, #3
 8003560:	f043 0302 	orr.w	r3, r3, #2
 8003564:	81a3      	strh	r3, [r4, #12]
 8003566:	e7e3      	b.n	8003530 <__smakebuf_r+0xc>
 8003568:	4b0d      	ldr	r3, [pc, #52]	; (80035a0 <__smakebuf_r+0x7c>)
 800356a:	62b3      	str	r3, [r6, #40]	; 0x28
 800356c:	89a3      	ldrh	r3, [r4, #12]
 800356e:	6020      	str	r0, [r4, #0]
 8003570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003574:	81a3      	strh	r3, [r4, #12]
 8003576:	9b00      	ldr	r3, [sp, #0]
 8003578:	6163      	str	r3, [r4, #20]
 800357a:	9b01      	ldr	r3, [sp, #4]
 800357c:	6120      	str	r0, [r4, #16]
 800357e:	b15b      	cbz	r3, 8003598 <__smakebuf_r+0x74>
 8003580:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003584:	4630      	mov	r0, r6
 8003586:	f000 f93d 	bl	8003804 <_isatty_r>
 800358a:	b128      	cbz	r0, 8003598 <__smakebuf_r+0x74>
 800358c:	89a3      	ldrh	r3, [r4, #12]
 800358e:	f023 0303 	bic.w	r3, r3, #3
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	81a3      	strh	r3, [r4, #12]
 8003598:	89a3      	ldrh	r3, [r4, #12]
 800359a:	431d      	orrs	r5, r3
 800359c:	81a5      	strh	r5, [r4, #12]
 800359e:	e7cd      	b.n	800353c <__smakebuf_r+0x18>
 80035a0:	08003391 	.word	0x08003391

080035a4 <_free_r>:
 80035a4:	b538      	push	{r3, r4, r5, lr}
 80035a6:	4605      	mov	r5, r0
 80035a8:	2900      	cmp	r1, #0
 80035aa:	d045      	beq.n	8003638 <_free_r+0x94>
 80035ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035b0:	1f0c      	subs	r4, r1, #4
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	bfb8      	it	lt
 80035b6:	18e4      	addlt	r4, r4, r3
 80035b8:	f000 f946 	bl	8003848 <__malloc_lock>
 80035bc:	4a1f      	ldr	r2, [pc, #124]	; (800363c <_free_r+0x98>)
 80035be:	6813      	ldr	r3, [r2, #0]
 80035c0:	4610      	mov	r0, r2
 80035c2:	b933      	cbnz	r3, 80035d2 <_free_r+0x2e>
 80035c4:	6063      	str	r3, [r4, #4]
 80035c6:	6014      	str	r4, [r2, #0]
 80035c8:	4628      	mov	r0, r5
 80035ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035ce:	f000 b93c 	b.w	800384a <__malloc_unlock>
 80035d2:	42a3      	cmp	r3, r4
 80035d4:	d90c      	bls.n	80035f0 <_free_r+0x4c>
 80035d6:	6821      	ldr	r1, [r4, #0]
 80035d8:	1862      	adds	r2, r4, r1
 80035da:	4293      	cmp	r3, r2
 80035dc:	bf04      	itt	eq
 80035de:	681a      	ldreq	r2, [r3, #0]
 80035e0:	685b      	ldreq	r3, [r3, #4]
 80035e2:	6063      	str	r3, [r4, #4]
 80035e4:	bf04      	itt	eq
 80035e6:	1852      	addeq	r2, r2, r1
 80035e8:	6022      	streq	r2, [r4, #0]
 80035ea:	6004      	str	r4, [r0, #0]
 80035ec:	e7ec      	b.n	80035c8 <_free_r+0x24>
 80035ee:	4613      	mov	r3, r2
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	b10a      	cbz	r2, 80035f8 <_free_r+0x54>
 80035f4:	42a2      	cmp	r2, r4
 80035f6:	d9fa      	bls.n	80035ee <_free_r+0x4a>
 80035f8:	6819      	ldr	r1, [r3, #0]
 80035fa:	1858      	adds	r0, r3, r1
 80035fc:	42a0      	cmp	r0, r4
 80035fe:	d10b      	bne.n	8003618 <_free_r+0x74>
 8003600:	6820      	ldr	r0, [r4, #0]
 8003602:	4401      	add	r1, r0
 8003604:	1858      	adds	r0, r3, r1
 8003606:	4282      	cmp	r2, r0
 8003608:	6019      	str	r1, [r3, #0]
 800360a:	d1dd      	bne.n	80035c8 <_free_r+0x24>
 800360c:	6810      	ldr	r0, [r2, #0]
 800360e:	6852      	ldr	r2, [r2, #4]
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	4401      	add	r1, r0
 8003614:	6019      	str	r1, [r3, #0]
 8003616:	e7d7      	b.n	80035c8 <_free_r+0x24>
 8003618:	d902      	bls.n	8003620 <_free_r+0x7c>
 800361a:	230c      	movs	r3, #12
 800361c:	602b      	str	r3, [r5, #0]
 800361e:	e7d3      	b.n	80035c8 <_free_r+0x24>
 8003620:	6820      	ldr	r0, [r4, #0]
 8003622:	1821      	adds	r1, r4, r0
 8003624:	428a      	cmp	r2, r1
 8003626:	bf04      	itt	eq
 8003628:	6811      	ldreq	r1, [r2, #0]
 800362a:	6852      	ldreq	r2, [r2, #4]
 800362c:	6062      	str	r2, [r4, #4]
 800362e:	bf04      	itt	eq
 8003630:	1809      	addeq	r1, r1, r0
 8003632:	6021      	streq	r1, [r4, #0]
 8003634:	605c      	str	r4, [r3, #4]
 8003636:	e7c7      	b.n	80035c8 <_free_r+0x24>
 8003638:	bd38      	pop	{r3, r4, r5, pc}
 800363a:	bf00      	nop
 800363c:	20000090 	.word	0x20000090

08003640 <_malloc_r>:
 8003640:	b570      	push	{r4, r5, r6, lr}
 8003642:	1ccd      	adds	r5, r1, #3
 8003644:	f025 0503 	bic.w	r5, r5, #3
 8003648:	3508      	adds	r5, #8
 800364a:	2d0c      	cmp	r5, #12
 800364c:	bf38      	it	cc
 800364e:	250c      	movcc	r5, #12
 8003650:	2d00      	cmp	r5, #0
 8003652:	4606      	mov	r6, r0
 8003654:	db01      	blt.n	800365a <_malloc_r+0x1a>
 8003656:	42a9      	cmp	r1, r5
 8003658:	d903      	bls.n	8003662 <_malloc_r+0x22>
 800365a:	230c      	movs	r3, #12
 800365c:	6033      	str	r3, [r6, #0]
 800365e:	2000      	movs	r0, #0
 8003660:	bd70      	pop	{r4, r5, r6, pc}
 8003662:	f000 f8f1 	bl	8003848 <__malloc_lock>
 8003666:	4a21      	ldr	r2, [pc, #132]	; (80036ec <_malloc_r+0xac>)
 8003668:	6814      	ldr	r4, [r2, #0]
 800366a:	4621      	mov	r1, r4
 800366c:	b991      	cbnz	r1, 8003694 <_malloc_r+0x54>
 800366e:	4c20      	ldr	r4, [pc, #128]	; (80036f0 <_malloc_r+0xb0>)
 8003670:	6823      	ldr	r3, [r4, #0]
 8003672:	b91b      	cbnz	r3, 800367c <_malloc_r+0x3c>
 8003674:	4630      	mov	r0, r6
 8003676:	f000 f83d 	bl	80036f4 <_sbrk_r>
 800367a:	6020      	str	r0, [r4, #0]
 800367c:	4629      	mov	r1, r5
 800367e:	4630      	mov	r0, r6
 8003680:	f000 f838 	bl	80036f4 <_sbrk_r>
 8003684:	1c43      	adds	r3, r0, #1
 8003686:	d124      	bne.n	80036d2 <_malloc_r+0x92>
 8003688:	230c      	movs	r3, #12
 800368a:	6033      	str	r3, [r6, #0]
 800368c:	4630      	mov	r0, r6
 800368e:	f000 f8dc 	bl	800384a <__malloc_unlock>
 8003692:	e7e4      	b.n	800365e <_malloc_r+0x1e>
 8003694:	680b      	ldr	r3, [r1, #0]
 8003696:	1b5b      	subs	r3, r3, r5
 8003698:	d418      	bmi.n	80036cc <_malloc_r+0x8c>
 800369a:	2b0b      	cmp	r3, #11
 800369c:	d90f      	bls.n	80036be <_malloc_r+0x7e>
 800369e:	600b      	str	r3, [r1, #0]
 80036a0:	50cd      	str	r5, [r1, r3]
 80036a2:	18cc      	adds	r4, r1, r3
 80036a4:	4630      	mov	r0, r6
 80036a6:	f000 f8d0 	bl	800384a <__malloc_unlock>
 80036aa:	f104 000b 	add.w	r0, r4, #11
 80036ae:	1d23      	adds	r3, r4, #4
 80036b0:	f020 0007 	bic.w	r0, r0, #7
 80036b4:	1ac3      	subs	r3, r0, r3
 80036b6:	d0d3      	beq.n	8003660 <_malloc_r+0x20>
 80036b8:	425a      	negs	r2, r3
 80036ba:	50e2      	str	r2, [r4, r3]
 80036bc:	e7d0      	b.n	8003660 <_malloc_r+0x20>
 80036be:	428c      	cmp	r4, r1
 80036c0:	684b      	ldr	r3, [r1, #4]
 80036c2:	bf16      	itet	ne
 80036c4:	6063      	strne	r3, [r4, #4]
 80036c6:	6013      	streq	r3, [r2, #0]
 80036c8:	460c      	movne	r4, r1
 80036ca:	e7eb      	b.n	80036a4 <_malloc_r+0x64>
 80036cc:	460c      	mov	r4, r1
 80036ce:	6849      	ldr	r1, [r1, #4]
 80036d0:	e7cc      	b.n	800366c <_malloc_r+0x2c>
 80036d2:	1cc4      	adds	r4, r0, #3
 80036d4:	f024 0403 	bic.w	r4, r4, #3
 80036d8:	42a0      	cmp	r0, r4
 80036da:	d005      	beq.n	80036e8 <_malloc_r+0xa8>
 80036dc:	1a21      	subs	r1, r4, r0
 80036de:	4630      	mov	r0, r6
 80036e0:	f000 f808 	bl	80036f4 <_sbrk_r>
 80036e4:	3001      	adds	r0, #1
 80036e6:	d0cf      	beq.n	8003688 <_malloc_r+0x48>
 80036e8:	6025      	str	r5, [r4, #0]
 80036ea:	e7db      	b.n	80036a4 <_malloc_r+0x64>
 80036ec:	20000090 	.word	0x20000090
 80036f0:	20000094 	.word	0x20000094

080036f4 <_sbrk_r>:
 80036f4:	b538      	push	{r3, r4, r5, lr}
 80036f6:	4c06      	ldr	r4, [pc, #24]	; (8003710 <_sbrk_r+0x1c>)
 80036f8:	2300      	movs	r3, #0
 80036fa:	4605      	mov	r5, r0
 80036fc:	4608      	mov	r0, r1
 80036fe:	6023      	str	r3, [r4, #0]
 8003700:	f7fd f8e0 	bl	80008c4 <_sbrk>
 8003704:	1c43      	adds	r3, r0, #1
 8003706:	d102      	bne.n	800370e <_sbrk_r+0x1a>
 8003708:	6823      	ldr	r3, [r4, #0]
 800370a:	b103      	cbz	r3, 800370e <_sbrk_r+0x1a>
 800370c:	602b      	str	r3, [r5, #0]
 800370e:	bd38      	pop	{r3, r4, r5, pc}
 8003710:	2000011c 	.word	0x2000011c

08003714 <__sread>:
 8003714:	b510      	push	{r4, lr}
 8003716:	460c      	mov	r4, r1
 8003718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800371c:	f000 f896 	bl	800384c <_read_r>
 8003720:	2800      	cmp	r0, #0
 8003722:	bfab      	itete	ge
 8003724:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003726:	89a3      	ldrhlt	r3, [r4, #12]
 8003728:	181b      	addge	r3, r3, r0
 800372a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800372e:	bfac      	ite	ge
 8003730:	6563      	strge	r3, [r4, #84]	; 0x54
 8003732:	81a3      	strhlt	r3, [r4, #12]
 8003734:	bd10      	pop	{r4, pc}

08003736 <__swrite>:
 8003736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800373a:	461f      	mov	r7, r3
 800373c:	898b      	ldrh	r3, [r1, #12]
 800373e:	05db      	lsls	r3, r3, #23
 8003740:	4605      	mov	r5, r0
 8003742:	460c      	mov	r4, r1
 8003744:	4616      	mov	r6, r2
 8003746:	d505      	bpl.n	8003754 <__swrite+0x1e>
 8003748:	2302      	movs	r3, #2
 800374a:	2200      	movs	r2, #0
 800374c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003750:	f000 f868 	bl	8003824 <_lseek_r>
 8003754:	89a3      	ldrh	r3, [r4, #12]
 8003756:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800375a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800375e:	81a3      	strh	r3, [r4, #12]
 8003760:	4632      	mov	r2, r6
 8003762:	463b      	mov	r3, r7
 8003764:	4628      	mov	r0, r5
 8003766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800376a:	f000 b817 	b.w	800379c <_write_r>

0800376e <__sseek>:
 800376e:	b510      	push	{r4, lr}
 8003770:	460c      	mov	r4, r1
 8003772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003776:	f000 f855 	bl	8003824 <_lseek_r>
 800377a:	1c43      	adds	r3, r0, #1
 800377c:	89a3      	ldrh	r3, [r4, #12]
 800377e:	bf15      	itete	ne
 8003780:	6560      	strne	r0, [r4, #84]	; 0x54
 8003782:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003786:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800378a:	81a3      	strheq	r3, [r4, #12]
 800378c:	bf18      	it	ne
 800378e:	81a3      	strhne	r3, [r4, #12]
 8003790:	bd10      	pop	{r4, pc}

08003792 <__sclose>:
 8003792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003796:	f000 b813 	b.w	80037c0 <_close_r>
	...

0800379c <_write_r>:
 800379c:	b538      	push	{r3, r4, r5, lr}
 800379e:	4c07      	ldr	r4, [pc, #28]	; (80037bc <_write_r+0x20>)
 80037a0:	4605      	mov	r5, r0
 80037a2:	4608      	mov	r0, r1
 80037a4:	4611      	mov	r1, r2
 80037a6:	2200      	movs	r2, #0
 80037a8:	6022      	str	r2, [r4, #0]
 80037aa:	461a      	mov	r2, r3
 80037ac:	f7fd f839 	bl	8000822 <_write>
 80037b0:	1c43      	adds	r3, r0, #1
 80037b2:	d102      	bne.n	80037ba <_write_r+0x1e>
 80037b4:	6823      	ldr	r3, [r4, #0]
 80037b6:	b103      	cbz	r3, 80037ba <_write_r+0x1e>
 80037b8:	602b      	str	r3, [r5, #0]
 80037ba:	bd38      	pop	{r3, r4, r5, pc}
 80037bc:	2000011c 	.word	0x2000011c

080037c0 <_close_r>:
 80037c0:	b538      	push	{r3, r4, r5, lr}
 80037c2:	4c06      	ldr	r4, [pc, #24]	; (80037dc <_close_r+0x1c>)
 80037c4:	2300      	movs	r3, #0
 80037c6:	4605      	mov	r5, r0
 80037c8:	4608      	mov	r0, r1
 80037ca:	6023      	str	r3, [r4, #0]
 80037cc:	f7fd f845 	bl	800085a <_close>
 80037d0:	1c43      	adds	r3, r0, #1
 80037d2:	d102      	bne.n	80037da <_close_r+0x1a>
 80037d4:	6823      	ldr	r3, [r4, #0]
 80037d6:	b103      	cbz	r3, 80037da <_close_r+0x1a>
 80037d8:	602b      	str	r3, [r5, #0]
 80037da:	bd38      	pop	{r3, r4, r5, pc}
 80037dc:	2000011c 	.word	0x2000011c

080037e0 <_fstat_r>:
 80037e0:	b538      	push	{r3, r4, r5, lr}
 80037e2:	4c07      	ldr	r4, [pc, #28]	; (8003800 <_fstat_r+0x20>)
 80037e4:	2300      	movs	r3, #0
 80037e6:	4605      	mov	r5, r0
 80037e8:	4608      	mov	r0, r1
 80037ea:	4611      	mov	r1, r2
 80037ec:	6023      	str	r3, [r4, #0]
 80037ee:	f7fd f840 	bl	8000872 <_fstat>
 80037f2:	1c43      	adds	r3, r0, #1
 80037f4:	d102      	bne.n	80037fc <_fstat_r+0x1c>
 80037f6:	6823      	ldr	r3, [r4, #0]
 80037f8:	b103      	cbz	r3, 80037fc <_fstat_r+0x1c>
 80037fa:	602b      	str	r3, [r5, #0]
 80037fc:	bd38      	pop	{r3, r4, r5, pc}
 80037fe:	bf00      	nop
 8003800:	2000011c 	.word	0x2000011c

08003804 <_isatty_r>:
 8003804:	b538      	push	{r3, r4, r5, lr}
 8003806:	4c06      	ldr	r4, [pc, #24]	; (8003820 <_isatty_r+0x1c>)
 8003808:	2300      	movs	r3, #0
 800380a:	4605      	mov	r5, r0
 800380c:	4608      	mov	r0, r1
 800380e:	6023      	str	r3, [r4, #0]
 8003810:	f7fd f83f 	bl	8000892 <_isatty>
 8003814:	1c43      	adds	r3, r0, #1
 8003816:	d102      	bne.n	800381e <_isatty_r+0x1a>
 8003818:	6823      	ldr	r3, [r4, #0]
 800381a:	b103      	cbz	r3, 800381e <_isatty_r+0x1a>
 800381c:	602b      	str	r3, [r5, #0]
 800381e:	bd38      	pop	{r3, r4, r5, pc}
 8003820:	2000011c 	.word	0x2000011c

08003824 <_lseek_r>:
 8003824:	b538      	push	{r3, r4, r5, lr}
 8003826:	4c07      	ldr	r4, [pc, #28]	; (8003844 <_lseek_r+0x20>)
 8003828:	4605      	mov	r5, r0
 800382a:	4608      	mov	r0, r1
 800382c:	4611      	mov	r1, r2
 800382e:	2200      	movs	r2, #0
 8003830:	6022      	str	r2, [r4, #0]
 8003832:	461a      	mov	r2, r3
 8003834:	f7fd f838 	bl	80008a8 <_lseek>
 8003838:	1c43      	adds	r3, r0, #1
 800383a:	d102      	bne.n	8003842 <_lseek_r+0x1e>
 800383c:	6823      	ldr	r3, [r4, #0]
 800383e:	b103      	cbz	r3, 8003842 <_lseek_r+0x1e>
 8003840:	602b      	str	r3, [r5, #0]
 8003842:	bd38      	pop	{r3, r4, r5, pc}
 8003844:	2000011c 	.word	0x2000011c

08003848 <__malloc_lock>:
 8003848:	4770      	bx	lr

0800384a <__malloc_unlock>:
 800384a:	4770      	bx	lr

0800384c <_read_r>:
 800384c:	b538      	push	{r3, r4, r5, lr}
 800384e:	4c07      	ldr	r4, [pc, #28]	; (800386c <_read_r+0x20>)
 8003850:	4605      	mov	r5, r0
 8003852:	4608      	mov	r0, r1
 8003854:	4611      	mov	r1, r2
 8003856:	2200      	movs	r2, #0
 8003858:	6022      	str	r2, [r4, #0]
 800385a:	461a      	mov	r2, r3
 800385c:	f7fc ffc4 	bl	80007e8 <_read>
 8003860:	1c43      	adds	r3, r0, #1
 8003862:	d102      	bne.n	800386a <_read_r+0x1e>
 8003864:	6823      	ldr	r3, [r4, #0]
 8003866:	b103      	cbz	r3, 800386a <_read_r+0x1e>
 8003868:	602b      	str	r3, [r5, #0]
 800386a:	bd38      	pop	{r3, r4, r5, pc}
 800386c:	2000011c 	.word	0x2000011c

08003870 <_init>:
 8003870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003872:	bf00      	nop
 8003874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003876:	bc08      	pop	{r3}
 8003878:	469e      	mov	lr, r3
 800387a:	4770      	bx	lr

0800387c <_fini>:
 800387c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387e:	bf00      	nop
 8003880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003882:	bc08      	pop	{r3}
 8003884:	469e      	mov	lr, r3
 8003886:	4770      	bx	lr
