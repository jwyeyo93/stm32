
USART-Printf_open103V.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c98  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08002e7c  08002e7c  00012e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f70  08002f70  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002f70  08002f70  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f70  08002f70  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f70  08002f70  00012f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f74  08002f74  00012f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002f78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000068  08002fe0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08002fe0  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c41f  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d49  00000000  00000000  0002c4b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005b8  00000000  00000000  0002e200  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004e0  00000000  00000000  0002e7b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000118af  00000000  00000000  0002ec98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007b87  00000000  00000000  00040547  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00062190  00000000  00000000  000480ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000aa25e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a90  00000000  00000000  000aa2dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000068 	.word	0x20000068
 8000200:	00000000 	.word	0x00000000
 8000204:	08002e64 	.word	0x08002e64

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000006c 	.word	0x2000006c
 8000220:	08002e64 	.word	0x08002e64

08000224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800022a:	4b08      	ldr	r3, [pc, #32]	; (800024c <MX_GPIO_Init+0x28>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	4a07      	ldr	r2, [pc, #28]	; (800024c <MX_GPIO_Init+0x28>)
 8000230:	f043 0304 	orr.w	r3, r3, #4
 8000234:	6193      	str	r3, [r2, #24]
 8000236:	4b05      	ldr	r3, [pc, #20]	; (800024c <MX_GPIO_Init+0x28>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	f003 0304 	and.w	r3, r3, #4
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	687b      	ldr	r3, [r7, #4]

}
 8000242:	bf00      	nop
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr
 800024c:	40021000 	.word	0x40021000

08000250 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000254:	f000 f9ee 	bl	8000634 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000258:	f000 f816 	bl	8000288 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025c:	f7ff ffe2 	bl	8000224 <MX_GPIO_Init>
  SystemClock_Config();
 8000260:	f000 f812 	bl	8000288 <SystemClock_Config>
  MX_USART1_UART_Init();
 8000264:	f000 f962 	bl	800052c <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  printf("UART Printf Example: retarget the C library printf function to the UART\n");
 8000268:	4805      	ldr	r0, [pc, #20]	; (8000280 <main+0x30>)
 800026a:	f002 f9f1 	bl	8002650 <puts>
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  printf("welcome to www.waveshare.net !!!\n");
 800026e:	4805      	ldr	r0, [pc, #20]	; (8000284 <main+0x34>)
 8000270:	f002 f9ee 	bl	8002650 <puts>
	  HAL_Delay(1000);
 8000274:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000278:	f000 fa26 	bl	80006c8 <HAL_Delay>
	  printf("welcome to www.waveshare.net !!!\n");
 800027c:	e7f7      	b.n	800026e <main+0x1e>
 800027e:	bf00      	nop
 8000280:	08002e7c 	.word	0x08002e7c
 8000284:	08002ec4 	.word	0x08002ec4

08000288 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b090      	sub	sp, #64	; 0x40
 800028c:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800028e:	2302      	movs	r3, #2
 8000290:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000292:	2301      	movs	r3, #1
 8000294:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000296:	2310      	movs	r3, #16
 8000298:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800029a:	2300      	movs	r3, #0
 800029c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800029e:	f107 0318 	add.w	r3, r7, #24
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 fca0 	bl	8000be8 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a8:	230f      	movs	r3, #15
 80002aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ac:	2300      	movs	r3, #0
 80002ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	617b      	str	r3, [r7, #20]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2100      	movs	r1, #0
 80002c0:	4618      	mov	r0, r3
 80002c2:	f001 fb7f 	bl	80019c4 <HAL_RCC_ClockConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80002c6:	f001 fe7d 	bl	8001fc4 <HAL_RCC_GetHCLKFreq>
 80002ca:	4602      	mov	r2, r0
 80002cc:	4b09      	ldr	r3, [pc, #36]	; (80002f4 <SystemClock_Config+0x6c>)
 80002ce:	fba3 2302 	umull	r2, r3, r3, r2
 80002d2:	099b      	lsrs	r3, r3, #6
 80002d4:	4618      	mov	r0, r3
 80002d6:	f000 fae4 	bl	80008a2 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80002da:	2004      	movs	r0, #4
 80002dc:	f000 faee 	bl	80008bc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80002e0:	2200      	movs	r2, #0
 80002e2:	2100      	movs	r1, #0
 80002e4:	f04f 30ff 	mov.w	r0, #4294967295
 80002e8:	f000 fabf 	bl	800086a <HAL_NVIC_SetPriority>
}
 80002ec:	bf00      	nop
 80002ee:	3740      	adds	r7, #64	; 0x40
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	10624dd3 	.word	0x10624dd3

080002f8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000300:	1d39      	adds	r1, r7, #4
 8000302:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000306:	2201      	movs	r2, #1
 8000308:	4803      	ldr	r0, [pc, #12]	; (8000318 <__io_putchar+0x20>)
 800030a:	f001 ff10 	bl	800212e <HAL_UART_Transmit>

  return ch;
 800030e:	687b      	ldr	r3, [r7, #4]
}
 8000310:	4618      	mov	r0, r3
 8000312:	3708      	adds	r7, #8
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	20000094 	.word	0x20000094

0800031c <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000322:	4b18      	ldr	r3, [pc, #96]	; (8000384 <HAL_MspInit+0x68>)
 8000324:	699b      	ldr	r3, [r3, #24]
 8000326:	4a17      	ldr	r2, [pc, #92]	; (8000384 <HAL_MspInit+0x68>)
 8000328:	f043 0301 	orr.w	r3, r3, #1
 800032c:	6193      	str	r3, [r2, #24]
 800032e:	4b15      	ldr	r3, [pc, #84]	; (8000384 <HAL_MspInit+0x68>)
 8000330:	699b      	ldr	r3, [r3, #24]
 8000332:	f003 0301 	and.w	r3, r3, #1
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800033a:	2003      	movs	r0, #3
 800033c:	f000 fa8a 	bl	8000854 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000340:	2200      	movs	r2, #0
 8000342:	2100      	movs	r1, #0
 8000344:	f06f 000b 	mvn.w	r0, #11
 8000348:	f000 fa8f 	bl	800086a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800034c:	2200      	movs	r2, #0
 800034e:	2100      	movs	r1, #0
 8000350:	f06f 000a 	mvn.w	r0, #10
 8000354:	f000 fa89 	bl	800086a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000358:	2200      	movs	r2, #0
 800035a:	2100      	movs	r1, #0
 800035c:	f06f 0009 	mvn.w	r0, #9
 8000360:	f000 fa83 	bl	800086a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000364:	2200      	movs	r2, #0
 8000366:	2100      	movs	r1, #0
 8000368:	f06f 0003 	mvn.w	r0, #3
 800036c:	f000 fa7d 	bl	800086a <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000370:	2200      	movs	r2, #0
 8000372:	2100      	movs	r1, #0
 8000374:	f04f 30ff 	mov.w	r0, #4294967295
 8000378:	f000 fa77 	bl	800086a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40021000 	.word	0x40021000

08000388 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800038c:	f000 f984 	bl	8000698 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000390:	f000 fab0 	bl	80008f4 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}

08000398 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b086      	sub	sp, #24
 800039c:	af00      	add	r7, sp, #0
 800039e:	60f8      	str	r0, [r7, #12]
 80003a0:	60b9      	str	r1, [r7, #8]
 80003a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003a4:	2300      	movs	r3, #0
 80003a6:	617b      	str	r3, [r7, #20]
 80003a8:	e00a      	b.n	80003c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80003aa:	f3af 8000 	nop.w
 80003ae:	4601      	mov	r1, r0
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	1c5a      	adds	r2, r3, #1
 80003b4:	60ba      	str	r2, [r7, #8]
 80003b6:	b2ca      	uxtb	r2, r1
 80003b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ba:	697b      	ldr	r3, [r7, #20]
 80003bc:	3301      	adds	r3, #1
 80003be:	617b      	str	r3, [r7, #20]
 80003c0:	697a      	ldr	r2, [r7, #20]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	429a      	cmp	r2, r3
 80003c6:	dbf0      	blt.n	80003aa <_read+0x12>
	}

return len;
 80003c8:	687b      	ldr	r3, [r7, #4]
}
 80003ca:	4618      	mov	r0, r3
 80003cc:	3718      	adds	r7, #24
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}

080003d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003d2:	b580      	push	{r7, lr}
 80003d4:	b086      	sub	sp, #24
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	60f8      	str	r0, [r7, #12]
 80003da:	60b9      	str	r1, [r7, #8]
 80003dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003de:	2300      	movs	r3, #0
 80003e0:	617b      	str	r3, [r7, #20]
 80003e2:	e009      	b.n	80003f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	1c5a      	adds	r2, r3, #1
 80003e8:	60ba      	str	r2, [r7, #8]
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	4618      	mov	r0, r3
 80003ee:	f7ff ff83 	bl	80002f8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003f2:	697b      	ldr	r3, [r7, #20]
 80003f4:	3301      	adds	r3, #1
 80003f6:	617b      	str	r3, [r7, #20]
 80003f8:	697a      	ldr	r2, [r7, #20]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	429a      	cmp	r2, r3
 80003fe:	dbf1      	blt.n	80003e4 <_write+0x12>
	}
	return len;
 8000400:	687b      	ldr	r3, [r7, #4]
}
 8000402:	4618      	mov	r0, r3
 8000404:	3718      	adds	r7, #24
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}

0800040a <_close>:

int _close(int file)
{
 800040a:	b480      	push	{r7}
 800040c:	b083      	sub	sp, #12
 800040e:	af00      	add	r7, sp, #0
 8000410:	6078      	str	r0, [r7, #4]
	return -1;
 8000412:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000416:	4618      	mov	r0, r3
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr

08000420 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000430:	605a      	str	r2, [r3, #4]
	return 0;
 8000432:	2300      	movs	r3, #0
}
 8000434:	4618      	mov	r0, r3
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	bc80      	pop	{r7}
 800043c:	4770      	bx	lr

0800043e <_isatty>:

int _isatty(int file)
{
 800043e:	b480      	push	{r7}
 8000440:	b083      	sub	sp, #12
 8000442:	af00      	add	r7, sp, #0
 8000444:	6078      	str	r0, [r7, #4]
	return 1;
 8000446:	2301      	movs	r3, #1
}
 8000448:	4618      	mov	r0, r3
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr

08000452 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000452:	b480      	push	{r7}
 8000454:	b085      	sub	sp, #20
 8000456:	af00      	add	r7, sp, #0
 8000458:	60f8      	str	r0, [r7, #12]
 800045a:	60b9      	str	r1, [r7, #8]
 800045c:	607a      	str	r2, [r7, #4]
	return 0;
 800045e:	2300      	movs	r3, #0
}
 8000460:	4618      	mov	r0, r3
 8000462:	3714      	adds	r7, #20
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr
	...

0800046c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000474:	4b11      	ldr	r3, [pc, #68]	; (80004bc <_sbrk+0x50>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d102      	bne.n	8000482 <_sbrk+0x16>
		heap_end = &end;
 800047c:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <_sbrk+0x50>)
 800047e:	4a10      	ldr	r2, [pc, #64]	; (80004c0 <_sbrk+0x54>)
 8000480:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000482:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <_sbrk+0x50>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000488:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <_sbrk+0x50>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4413      	add	r3, r2
 8000490:	466a      	mov	r2, sp
 8000492:	4293      	cmp	r3, r2
 8000494:	d907      	bls.n	80004a6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000496:	f002 f84d 	bl	8002534 <__errno>
 800049a:	4602      	mov	r2, r0
 800049c:	230c      	movs	r3, #12
 800049e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80004a0:	f04f 33ff 	mov.w	r3, #4294967295
 80004a4:	e006      	b.n	80004b4 <_sbrk+0x48>
	}

	heap_end += incr;
 80004a6:	4b05      	ldr	r3, [pc, #20]	; (80004bc <_sbrk+0x50>)
 80004a8:	681a      	ldr	r2, [r3, #0]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4413      	add	r3, r2
 80004ae:	4a03      	ldr	r2, [pc, #12]	; (80004bc <_sbrk+0x50>)
 80004b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80004b2:	68fb      	ldr	r3, [r7, #12]
}
 80004b4:	4618      	mov	r0, r3
 80004b6:	3710      	adds	r7, #16
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	20000084 	.word	0x20000084
 80004c0:	200000d8 	.word	0x200000d8

080004c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004c8:	4b15      	ldr	r3, [pc, #84]	; (8000520 <SystemInit+0x5c>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a14      	ldr	r2, [pc, #80]	; (8000520 <SystemInit+0x5c>)
 80004ce:	f043 0301 	orr.w	r3, r3, #1
 80004d2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80004d4:	4b12      	ldr	r3, [pc, #72]	; (8000520 <SystemInit+0x5c>)
 80004d6:	685a      	ldr	r2, [r3, #4]
 80004d8:	4911      	ldr	r1, [pc, #68]	; (8000520 <SystemInit+0x5c>)
 80004da:	4b12      	ldr	r3, [pc, #72]	; (8000524 <SystemInit+0x60>)
 80004dc:	4013      	ands	r3, r2
 80004de:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80004e0:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <SystemInit+0x5c>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <SystemInit+0x5c>)
 80004e6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80004ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004ee:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80004f0:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <SystemInit+0x5c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <SystemInit+0x5c>)
 80004f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004fa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <SystemInit+0x5c>)
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	4a07      	ldr	r2, [pc, #28]	; (8000520 <SystemInit+0x5c>)
 8000502:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000506:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000508:	4b05      	ldr	r3, [pc, #20]	; (8000520 <SystemInit+0x5c>)
 800050a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800050e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <SystemInit+0x64>)
 8000512:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000516:	609a      	str	r2, [r3, #8]
#endif 
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr
 8000520:	40021000 	.word	0x40021000
 8000524:	f8ff0000 	.word	0xf8ff0000
 8000528:	e000ed00 	.word	0xe000ed00

0800052c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000530:	4b0e      	ldr	r3, [pc, #56]	; (800056c <MX_USART1_UART_Init+0x40>)
 8000532:	4a0f      	ldr	r2, [pc, #60]	; (8000570 <MX_USART1_UART_Init+0x44>)
 8000534:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000536:	4b0d      	ldr	r3, [pc, #52]	; (800056c <MX_USART1_UART_Init+0x40>)
 8000538:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800053c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800053e:	4b0b      	ldr	r3, [pc, #44]	; (800056c <MX_USART1_UART_Init+0x40>)
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000544:	4b09      	ldr	r3, [pc, #36]	; (800056c <MX_USART1_UART_Init+0x40>)
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <MX_USART1_UART_Init+0x40>)
 800054c:	2200      	movs	r2, #0
 800054e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000550:	4b06      	ldr	r3, [pc, #24]	; (800056c <MX_USART1_UART_Init+0x40>)
 8000552:	220c      	movs	r2, #12
 8000554:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000556:	4b05      	ldr	r3, [pc, #20]	; (800056c <MX_USART1_UART_Init+0x40>)
 8000558:	2200      	movs	r2, #0
 800055a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800055c:	4b03      	ldr	r3, [pc, #12]	; (800056c <MX_USART1_UART_Init+0x40>)
 800055e:	2200      	movs	r2, #0
 8000560:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart1);
 8000562:	4802      	ldr	r0, [pc, #8]	; (800056c <MX_USART1_UART_Init+0x40>)
 8000564:	f001 fd9a 	bl	800209c <HAL_UART_Init>

}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000094 	.word	0x20000094
 8000570:	40013800 	.word	0x40013800

08000574 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a16      	ldr	r2, [pc, #88]	; (80005dc <HAL_UART_MspInit+0x68>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d125      	bne.n	80005d2 <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000586:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <HAL_UART_MspInit+0x6c>)
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	4a15      	ldr	r2, [pc, #84]	; (80005e0 <HAL_UART_MspInit+0x6c>)
 800058c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000590:	6193      	str	r3, [r2, #24]
 8000592:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <HAL_UART_MspInit+0x6c>)
 8000594:	699b      	ldr	r3, [r3, #24]
 8000596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800059e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a4:	2302      	movs	r3, #2
 80005a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a8:	2303      	movs	r3, #3
 80005aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	4619      	mov	r1, r3
 80005b2:	480c      	ldr	r0, [pc, #48]	; (80005e4 <HAL_UART_MspInit+0x70>)
 80005b4:	f000 f9aa 	bl	800090c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c6:	f107 0310 	add.w	r3, r7, #16
 80005ca:	4619      	mov	r1, r3
 80005cc:	4805      	ldr	r0, [pc, #20]	; (80005e4 <HAL_UART_MspInit+0x70>)
 80005ce:	f000 f99d 	bl	800090c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80005d2:	bf00      	nop
 80005d4:	3720      	adds	r7, #32
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40013800 	.word	0x40013800
 80005e0:	40021000 	.word	0x40021000
 80005e4:	40010800 	.word	0x40010800

080005e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005e8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005ea:	e003      	b.n	80005f4 <LoopCopyDataInit>

080005ec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005ec:	4b0b      	ldr	r3, [pc, #44]	; (800061c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80005ee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005f0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005f2:	3104      	adds	r1, #4

080005f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005f4:	480a      	ldr	r0, [pc, #40]	; (8000620 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80005f8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005fa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005fc:	d3f6      	bcc.n	80005ec <CopyDataInit>
  ldr r2, =_sbss
 80005fe:	4a0a      	ldr	r2, [pc, #40]	; (8000628 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000600:	e002      	b.n	8000608 <LoopFillZerobss>

08000602 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000604:	f842 3b04 	str.w	r3, [r2], #4

08000608 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800060a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800060c:	d3f9      	bcc.n	8000602 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800060e:	f7ff ff59 	bl	80004c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000612:	f001 ff95 	bl	8002540 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000616:	f7ff fe1b 	bl	8000250 <main>
  bx lr
 800061a:	4770      	bx	lr
  ldr r3, =_sidata
 800061c:	08002f78 	.word	0x08002f78
  ldr r0, =_sdata
 8000620:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000624:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 8000628:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 800062c:	200000d8 	.word	0x200000d8

08000630 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000630:	e7fe      	b.n	8000630 <ADC1_2_IRQHandler>
	...

08000634 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000638:	4b08      	ldr	r3, [pc, #32]	; (800065c <HAL_Init+0x28>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a07      	ldr	r2, [pc, #28]	; (800065c <HAL_Init+0x28>)
 800063e:	f043 0310 	orr.w	r3, r3, #16
 8000642:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000644:	2003      	movs	r0, #3
 8000646:	f000 f905 	bl	8000854 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800064a:	2000      	movs	r0, #0
 800064c:	f000 f808 	bl	8000660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000650:	f7ff fe64 	bl	800031c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000654:	2300      	movs	r3, #0
}
 8000656:	4618      	mov	r0, r3
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40022000 	.word	0x40022000

08000660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000668:	f001 fcac 	bl	8001fc4 <HAL_RCC_GetHCLKFreq>
 800066c:	4602      	mov	r2, r0
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <HAL_InitTick+0x34>)
 8000670:	fba3 2302 	umull	r2, r3, r3, r2
 8000674:	099b      	lsrs	r3, r3, #6
 8000676:	4618      	mov	r0, r3
 8000678:	f000 f913 	bl	80008a2 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800067c:	2200      	movs	r2, #0
 800067e:	6879      	ldr	r1, [r7, #4]
 8000680:	f04f 30ff 	mov.w	r0, #4294967295
 8000684:	f000 f8f1 	bl	800086a <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000688:	2300      	movs	r3, #0
}
 800068a:	4618      	mov	r0, r3
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	10624dd3 	.word	0x10624dd3

08000698 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  uwTick++;
 800069c:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <HAL_IncTick+0x18>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	3301      	adds	r3, #1
 80006a2:	4a03      	ldr	r2, [pc, #12]	; (80006b0 <HAL_IncTick+0x18>)
 80006a4:	6013      	str	r3, [r2, #0]
}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	20000088 	.word	0x20000088

080006b4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  return uwTick;
 80006b8:	4b02      	ldr	r3, [pc, #8]	; (80006c4 <HAL_GetTick+0x10>)
 80006ba:	681b      	ldr	r3, [r3, #0]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr
 80006c4:	20000088 	.word	0x20000088

080006c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 80006d4:	f7ff ffee 	bl	80006b4 <HAL_GetTick>
 80006d8:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80006da:	bf00      	nop
 80006dc:	f7ff ffea 	bl	80006b4 <HAL_GetTick>
 80006e0:	4602      	mov	r2, r0
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	1ad2      	subs	r2, r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d3f7      	bcc.n	80006dc <HAL_Delay+0x14>
  {
  }
}
 80006ec:	bf00      	nop
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f003 0307 	and.w	r3, r3, #7
 8000702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <NVIC_SetPriorityGrouping+0x44>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800070a:	68ba      	ldr	r2, [r7, #8]
 800070c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000710:	4013      	ands	r3, r2
 8000712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800071c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000726:	4a04      	ldr	r2, [pc, #16]	; (8000738 <NVIC_SetPriorityGrouping+0x44>)
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	60d3      	str	r3, [r2, #12]
}
 800072c:	bf00      	nop
 800072e:	3714      	adds	r7, #20
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000740:	4b04      	ldr	r3, [pc, #16]	; (8000754 <NVIC_GetPriorityGrouping+0x18>)
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	0a1b      	lsrs	r3, r3, #8
 8000746:	f003 0307 	and.w	r3, r3, #7
}
 800074a:	4618      	mov	r0, r3
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	6039      	str	r1, [r7, #0]
 8000762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000768:	2b00      	cmp	r3, #0
 800076a:	da0b      	bge.n	8000784 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	b2da      	uxtb	r2, r3
 8000770:	490c      	ldr	r1, [pc, #48]	; (80007a4 <NVIC_SetPriority+0x4c>)
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	f003 030f 	and.w	r3, r3, #15
 8000778:	3b04      	subs	r3, #4
 800077a:	0112      	lsls	r2, r2, #4
 800077c:	b2d2      	uxtb	r2, r2
 800077e:	440b      	add	r3, r1
 8000780:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000782:	e009      	b.n	8000798 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	b2da      	uxtb	r2, r3
 8000788:	4907      	ldr	r1, [pc, #28]	; (80007a8 <NVIC_SetPriority+0x50>)
 800078a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078e:	0112      	lsls	r2, r2, #4
 8000790:	b2d2      	uxtb	r2, r2
 8000792:	440b      	add	r3, r1
 8000794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	e000ed00 	.word	0xe000ed00
 80007a8:	e000e100 	.word	0xe000e100

080007ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b089      	sub	sp, #36	; 0x24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	f1c3 0307 	rsb	r3, r3, #7
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	bf28      	it	cs
 80007ca:	2304      	movcs	r3, #4
 80007cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3304      	adds	r3, #4
 80007d2:	2b06      	cmp	r3, #6
 80007d4:	d902      	bls.n	80007dc <NVIC_EncodePriority+0x30>
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3b03      	subs	r3, #3
 80007da:	e000      	b.n	80007de <NVIC_EncodePriority+0x32>
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e0:	f04f 32ff 	mov.w	r2, #4294967295
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ea:	43da      	mvns	r2, r3
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	401a      	ands	r2, r3
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007f4:	f04f 31ff 	mov.w	r1, #4294967295
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	fa01 f303 	lsl.w	r3, r1, r3
 80007fe:	43d9      	mvns	r1, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000804:	4313      	orrs	r3, r2
         );
}
 8000806:	4618      	mov	r0, r3
 8000808:	3724      	adds	r7, #36	; 0x24
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3b01      	subs	r3, #1
 800081c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000820:	d301      	bcc.n	8000826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000822:	2301      	movs	r3, #1
 8000824:	e00f      	b.n	8000846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000826:	4a0a      	ldr	r2, [pc, #40]	; (8000850 <SysTick_Config+0x40>)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3b01      	subs	r3, #1
 800082c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800082e:	210f      	movs	r1, #15
 8000830:	f04f 30ff 	mov.w	r0, #4294967295
 8000834:	f7ff ff90 	bl	8000758 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <SysTick_Config+0x40>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800083e:	4b04      	ldr	r3, [pc, #16]	; (8000850 <SysTick_Config+0x40>)
 8000840:	2207      	movs	r2, #7
 8000842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000844:	2300      	movs	r3, #0
}
 8000846:	4618      	mov	r0, r3
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	e000e010 	.word	0xe000e010

08000854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff ff49 	bl	80006f4 <NVIC_SetPriorityGrouping>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b086      	sub	sp, #24
 800086e:	af00      	add	r7, sp, #0
 8000870:	4603      	mov	r3, r0
 8000872:	60b9      	str	r1, [r7, #8]
 8000874:	607a      	str	r2, [r7, #4]
 8000876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800087c:	f7ff ff5e 	bl	800073c <NVIC_GetPriorityGrouping>
 8000880:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	68b9      	ldr	r1, [r7, #8]
 8000886:	6978      	ldr	r0, [r7, #20]
 8000888:	f7ff ff90 	bl	80007ac <NVIC_EncodePriority>
 800088c:	4602      	mov	r2, r0
 800088e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff5f 	bl	8000758 <NVIC_SetPriority>
}
 800089a:	bf00      	nop
 800089c:	3718      	adds	r7, #24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ffb0 	bl	8000810 <SysTick_Config>
 80008b0:	4603      	mov	r3, r0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b04      	cmp	r3, #4
 80008c8:	d106      	bne.n	80008d8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a08      	ldr	r2, [pc, #32]	; (80008f0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80008d6:	e005      	b.n	80008e4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a04      	ldr	r2, [pc, #16]	; (80008f0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008de:	f023 0304 	bic.w	r3, r3, #4
 80008e2:	6013      	str	r3, [r2, #0]
}
 80008e4:	bf00      	nop
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000e010 	.word	0xe000e010

080008f4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80008f8:	f000 f802 	bl	8000900 <HAL_SYSTICK_Callback>
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}

08000900 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800090c:	b480      	push	{r7}
 800090e:	b08b      	sub	sp, #44	; 0x2c
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00;
 800091a:	2300      	movs	r3, #0
 800091c:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00;
 8000922:	2300      	movs	r3, #0
 8000924:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
 800092e:	e133      	b.n	8000b98 <HAL_GPIO_Init+0x28c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000930:	2201      	movs	r2, #1
 8000932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	61fb      	str	r3, [r7, #28]
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	69fa      	ldr	r2, [r7, #28]
 8000940:	4013      	ands	r3, r2
 8000942:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	429a      	cmp	r2, r3
 800094a:	f040 8122 	bne.w	8000b92 <HAL_GPIO_Init+0x286>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	2b12      	cmp	r3, #18
 8000954:	d034      	beq.n	80009c0 <HAL_GPIO_Init+0xb4>
 8000956:	2b12      	cmp	r3, #18
 8000958:	d80d      	bhi.n	8000976 <HAL_GPIO_Init+0x6a>
 800095a:	2b02      	cmp	r3, #2
 800095c:	d02b      	beq.n	80009b6 <HAL_GPIO_Init+0xaa>
 800095e:	2b02      	cmp	r3, #2
 8000960:	d804      	bhi.n	800096c <HAL_GPIO_Init+0x60>
 8000962:	2b00      	cmp	r3, #0
 8000964:	d031      	beq.n	80009ca <HAL_GPIO_Init+0xbe>
 8000966:	2b01      	cmp	r3, #1
 8000968:	d01c      	beq.n	80009a4 <HAL_GPIO_Init+0x98>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 800096a:	e048      	b.n	80009fe <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800096c:	2b03      	cmp	r3, #3
 800096e:	d043      	beq.n	80009f8 <HAL_GPIO_Init+0xec>
 8000970:	2b11      	cmp	r3, #17
 8000972:	d01b      	beq.n	80009ac <HAL_GPIO_Init+0xa0>
          break;
 8000974:	e043      	b.n	80009fe <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000976:	4a8d      	ldr	r2, [pc, #564]	; (8000bac <HAL_GPIO_Init+0x2a0>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d026      	beq.n	80009ca <HAL_GPIO_Init+0xbe>
 800097c:	4a8b      	ldr	r2, [pc, #556]	; (8000bac <HAL_GPIO_Init+0x2a0>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d806      	bhi.n	8000990 <HAL_GPIO_Init+0x84>
 8000982:	4a8b      	ldr	r2, [pc, #556]	; (8000bb0 <HAL_GPIO_Init+0x2a4>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d020      	beq.n	80009ca <HAL_GPIO_Init+0xbe>
 8000988:	4a8a      	ldr	r2, [pc, #552]	; (8000bb4 <HAL_GPIO_Init+0x2a8>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d01d      	beq.n	80009ca <HAL_GPIO_Init+0xbe>
          break;
 800098e:	e036      	b.n	80009fe <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000990:	4a89      	ldr	r2, [pc, #548]	; (8000bb8 <HAL_GPIO_Init+0x2ac>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d019      	beq.n	80009ca <HAL_GPIO_Init+0xbe>
 8000996:	4a89      	ldr	r2, [pc, #548]	; (8000bbc <HAL_GPIO_Init+0x2b0>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d016      	beq.n	80009ca <HAL_GPIO_Init+0xbe>
 800099c:	4a88      	ldr	r2, [pc, #544]	; (8000bc0 <HAL_GPIO_Init+0x2b4>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d013      	beq.n	80009ca <HAL_GPIO_Init+0xbe>
          break;
 80009a2:	e02c      	b.n	80009fe <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	623b      	str	r3, [r7, #32]
          break;
 80009aa:	e028      	b.n	80009fe <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	3304      	adds	r3, #4
 80009b2:	623b      	str	r3, [r7, #32]
          break;
 80009b4:	e023      	b.n	80009fe <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	68db      	ldr	r3, [r3, #12]
 80009ba:	3308      	adds	r3, #8
 80009bc:	623b      	str	r3, [r7, #32]
          break;
 80009be:	e01e      	b.n	80009fe <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	330c      	adds	r3, #12
 80009c6:	623b      	str	r3, [r7, #32]
          break;
 80009c8:	e019      	b.n	80009fe <HAL_GPIO_Init+0xf2>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d102      	bne.n	80009d8 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009d2:	2304      	movs	r3, #4
 80009d4:	623b      	str	r3, [r7, #32]
          break; 
 80009d6:	e012      	b.n	80009fe <HAL_GPIO_Init+0xf2>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d105      	bne.n	80009ec <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009e0:	2308      	movs	r3, #8
 80009e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	69fa      	ldr	r2, [r7, #28]
 80009e8:	611a      	str	r2, [r3, #16]
          break; 
 80009ea:	e008      	b.n	80009fe <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009ec:	2308      	movs	r3, #8
 80009ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	69fa      	ldr	r2, [r7, #28]
 80009f4:	615a      	str	r2, [r3, #20]
          break; 
 80009f6:	e002      	b.n	80009fe <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
          break;
 80009fc:	bf00      	nop
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009fe:	69bb      	ldr	r3, [r7, #24]
 8000a00:	2bff      	cmp	r3, #255	; 0xff
 8000a02:	d801      	bhi.n	8000a08 <HAL_GPIO_Init+0xfc>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	e001      	b.n	8000a0c <HAL_GPIO_Init+0x100>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3304      	adds	r3, #4
 8000a0c:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8000a0e:	69bb      	ldr	r3, [r7, #24]
 8000a10:	2bff      	cmp	r3, #255	; 0xff
 8000a12:	d802      	bhi.n	8000a1a <HAL_GPIO_Init+0x10e>
 8000a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	e002      	b.n	8000a20 <HAL_GPIO_Init+0x114>
 8000a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1c:	3b08      	subs	r3, #8
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	613b      	str	r3, [r7, #16]
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	210f      	movs	r1, #15
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	401a      	ands	r2, r3
 8000a32:	6a39      	ldr	r1, [r7, #32]
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3a:	431a      	orrs	r2, r3
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	601a      	str	r2, [r3, #0]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	f000 80a2 	beq.w	8000b92 <HAL_GPIO_Init+0x286>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a4e:	4b5d      	ldr	r3, [pc, #372]	; (8000bc4 <HAL_GPIO_Init+0x2b8>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	4a5c      	ldr	r2, [pc, #368]	; (8000bc4 <HAL_GPIO_Init+0x2b8>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6193      	str	r3, [r2, #24]
 8000a5a:	4b5a      	ldr	r3, [pc, #360]	; (8000bc4 <HAL_GPIO_Init+0x2b8>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2];
 8000a66:	4a58      	ldr	r2, [pc, #352]	; (8000bc8 <HAL_GPIO_Init+0x2bc>)
 8000a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6a:	089b      	lsrs	r3, r3, #2
 8000a6c:	3302      	adds	r3, #2
 8000a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a72:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a76:	f003 0303 	and.w	r3, r3, #3
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	220f      	movs	r2, #15
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	43db      	mvns	r3, r3
 8000a84:	697a      	ldr	r2, [r7, #20]
 8000a86:	4013      	ands	r3, r2
 8000a88:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a4f      	ldr	r2, [pc, #316]	; (8000bcc <HAL_GPIO_Init+0x2c0>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d01f      	beq.n	8000ad2 <HAL_GPIO_Init+0x1c6>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a4e      	ldr	r2, [pc, #312]	; (8000bd0 <HAL_GPIO_Init+0x2c4>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d019      	beq.n	8000ace <HAL_GPIO_Init+0x1c2>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a4d      	ldr	r2, [pc, #308]	; (8000bd4 <HAL_GPIO_Init+0x2c8>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d013      	beq.n	8000aca <HAL_GPIO_Init+0x1be>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a4c      	ldr	r2, [pc, #304]	; (8000bd8 <HAL_GPIO_Init+0x2cc>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d00d      	beq.n	8000ac6 <HAL_GPIO_Init+0x1ba>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a4b      	ldr	r2, [pc, #300]	; (8000bdc <HAL_GPIO_Init+0x2d0>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d007      	beq.n	8000ac2 <HAL_GPIO_Init+0x1b6>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a4a      	ldr	r2, [pc, #296]	; (8000be0 <HAL_GPIO_Init+0x2d4>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d101      	bne.n	8000abe <HAL_GPIO_Init+0x1b2>
 8000aba:	2305      	movs	r3, #5
 8000abc:	e00a      	b.n	8000ad4 <HAL_GPIO_Init+0x1c8>
 8000abe:	2306      	movs	r3, #6
 8000ac0:	e008      	b.n	8000ad4 <HAL_GPIO_Init+0x1c8>
 8000ac2:	2304      	movs	r3, #4
 8000ac4:	e006      	b.n	8000ad4 <HAL_GPIO_Init+0x1c8>
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	e004      	b.n	8000ad4 <HAL_GPIO_Init+0x1c8>
 8000aca:	2302      	movs	r3, #2
 8000acc:	e002      	b.n	8000ad4 <HAL_GPIO_Init+0x1c8>
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e000      	b.n	8000ad4 <HAL_GPIO_Init+0x1c8>
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ad6:	f002 0203 	and.w	r2, r2, #3
 8000ada:	0092      	lsls	r2, r2, #2
 8000adc:	4093      	lsls	r3, r2
 8000ade:	697a      	ldr	r2, [r7, #20]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2] = temp;
 8000ae4:	4938      	ldr	r1, [pc, #224]	; (8000bc8 <HAL_GPIO_Init+0x2bc>)
 8000ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae8:	089b      	lsrs	r3, r3, #2
 8000aea:	3302      	adds	r3, #2
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d006      	beq.n	8000b0c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000afe:	4b39      	ldr	r3, [pc, #228]	; (8000be4 <HAL_GPIO_Init+0x2d8>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	4938      	ldr	r1, [pc, #224]	; (8000be4 <HAL_GPIO_Init+0x2d8>)
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	600b      	str	r3, [r1, #0]
 8000b0a:	e006      	b.n	8000b1a <HAL_GPIO_Init+0x20e>
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8000b0c:	4b35      	ldr	r3, [pc, #212]	; (8000be4 <HAL_GPIO_Init+0x2d8>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	43db      	mvns	r3, r3
 8000b14:	4933      	ldr	r1, [pc, #204]	; (8000be4 <HAL_GPIO_Init+0x2d8>)
 8000b16:	4013      	ands	r3, r2
 8000b18:	600b      	str	r3, [r1, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d006      	beq.n	8000b34 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000b26:	4b2f      	ldr	r3, [pc, #188]	; (8000be4 <HAL_GPIO_Init+0x2d8>)
 8000b28:	685a      	ldr	r2, [r3, #4]
 8000b2a:	492e      	ldr	r1, [pc, #184]	; (8000be4 <HAL_GPIO_Init+0x2d8>)
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	604b      	str	r3, [r1, #4]
 8000b32:	e006      	b.n	8000b42 <HAL_GPIO_Init+0x236>
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8000b34:	4b2b      	ldr	r3, [pc, #172]	; (8000be4 <HAL_GPIO_Init+0x2d8>)
 8000b36:	685a      	ldr	r2, [r3, #4]
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	4929      	ldr	r1, [pc, #164]	; (8000be4 <HAL_GPIO_Init+0x2d8>)
 8000b3e:	4013      	ands	r3, r2
 8000b40:	604b      	str	r3, [r1, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d006      	beq.n	8000b5c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000b4e:	4b25      	ldr	r3, [pc, #148]	; (8000be4 <HAL_GPIO_Init+0x2d8>)
 8000b50:	689a      	ldr	r2, [r3, #8]
 8000b52:	4924      	ldr	r1, [pc, #144]	; (8000be4 <HAL_GPIO_Init+0x2d8>)
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	608b      	str	r3, [r1, #8]
 8000b5a:	e006      	b.n	8000b6a <HAL_GPIO_Init+0x25e>
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8000b5c:	4b21      	ldr	r3, [pc, #132]	; (8000be4 <HAL_GPIO_Init+0x2d8>)
 8000b5e:	689a      	ldr	r2, [r3, #8]
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	43db      	mvns	r3, r3
 8000b64:	491f      	ldr	r1, [pc, #124]	; (8000be4 <HAL_GPIO_Init+0x2d8>)
 8000b66:	4013      	ands	r3, r2
 8000b68:	608b      	str	r3, [r1, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d006      	beq.n	8000b84 <HAL_GPIO_Init+0x278>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000b76:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <HAL_GPIO_Init+0x2d8>)
 8000b78:	68da      	ldr	r2, [r3, #12]
 8000b7a:	491a      	ldr	r1, [pc, #104]	; (8000be4 <HAL_GPIO_Init+0x2d8>)
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	60cb      	str	r3, [r1, #12]
 8000b82:	e006      	b.n	8000b92 <HAL_GPIO_Init+0x286>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8000b84:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <HAL_GPIO_Init+0x2d8>)
 8000b86:	68da      	ldr	r2, [r3, #12]
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	4915      	ldr	r1, [pc, #84]	; (8000be4 <HAL_GPIO_Init+0x2d8>)
 8000b8e:	4013      	ands	r3, r2
 8000b90:	60cb      	str	r3, [r1, #12]
  for (position = 0; position < GPIO_NUMBER; position++)
 8000b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b94:	3301      	adds	r3, #1
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
 8000b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9a:	2b0f      	cmp	r3, #15
 8000b9c:	f67f aec8 	bls.w	8000930 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000ba0:	bf00      	nop
 8000ba2:	372c      	adds	r7, #44	; 0x2c
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	10210000 	.word	0x10210000
 8000bb0:	10110000 	.word	0x10110000
 8000bb4:	10120000 	.word	0x10120000
 8000bb8:	10310000 	.word	0x10310000
 8000bbc:	10320000 	.word	0x10320000
 8000bc0:	10220000 	.word	0x10220000
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	40010000 	.word	0x40010000
 8000bcc:	40010800 	.word	0x40010800
 8000bd0:	40010c00 	.word	0x40010c00
 8000bd4:	40011000 	.word	0x40011000
 8000bd8:	40011400 	.word	0x40011400
 8000bdc:	40011800 	.word	0x40011800
 8000be0:	40011c00 	.word	0x40011c00
 8000be4:	40010400 	.word	0x40010400

08000be8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL is not disabled when USB OTG FS clock is enabled (specific to devices with USB FS)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b0f0      	sub	sp, #448	; 0x1c0
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f000 819e 	beq.w	8000f44 <HAL_RCC_OscConfig+0x35c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c08:	4bb9      	ldr	r3, [pc, #740]	; (8000ef0 <HAL_RCC_OscConfig+0x308>)
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f003 030c 	and.w	r3, r3, #12
 8000c10:	2b04      	cmp	r3, #4
 8000c12:	d00c      	beq.n	8000c2e <HAL_RCC_OscConfig+0x46>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c14:	4bb6      	ldr	r3, [pc, #728]	; (8000ef0 <HAL_RCC_OscConfig+0x308>)
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f003 030c 	and.w	r3, r3, #12
 8000c1c:	2b08      	cmp	r3, #8
 8000c1e:	d14f      	bne.n	8000cc0 <HAL_RCC_OscConfig+0xd8>
 8000c20:	4bb3      	ldr	r3, [pc, #716]	; (8000ef0 <HAL_RCC_OscConfig+0x308>)
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c2c:	d148      	bne.n	8000cc0 <HAL_RCC_OscConfig+0xd8>
 8000c2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c32:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c36:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8000c3a:	fa93 f3a3 	rbit	r3, r3
 8000c3e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000c42:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c46:	fab3 f383 	clz	r3, r3
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	095b      	lsrs	r3, r3, #5
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d102      	bne.n	8000c60 <HAL_RCC_OscConfig+0x78>
 8000c5a:	4ba5      	ldr	r3, [pc, #660]	; (8000ef0 <HAL_RCC_OscConfig+0x308>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	e00b      	b.n	8000c78 <HAL_RCC_OscConfig+0x90>
 8000c60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c64:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c68:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000c6c:	fa93 f3a3 	rbit	r3, r3
 8000c70:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8000c74:	4b9e      	ldr	r3, [pc, #632]	; (8000ef0 <HAL_RCC_OscConfig+0x308>)
 8000c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c7c:	f8c7 21a8 	str.w	r2, [r7, #424]	; 0x1a8
 8000c80:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8000c84:	fa92 f2a2 	rbit	r2, r2
 8000c88:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
  return(result);
 8000c8c:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8000c90:	fab2 f282 	clz	r2, r2
 8000c94:	b252      	sxtb	r2, r2
 8000c96:	f042 0220 	orr.w	r2, r2, #32
 8000c9a:	b252      	sxtb	r2, r2
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	f002 021f 	and.w	r2, r2, #31
 8000ca2:	40d3      	lsrs	r3, r2
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	f000 814a 	beq.w	8000f42 <HAL_RCC_OscConfig+0x35a>
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	f040 8144 	bne.w	8000f42 <HAL_RCC_OscConfig+0x35a>
      {
        return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	f000 be7b 	b.w	80019b6 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8000cc0:	4b8b      	ldr	r3, [pc, #556]	; (8000ef0 <HAL_RCC_OscConfig+0x308>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a8a      	ldr	r2, [pc, #552]	; (8000ef0 <HAL_RCC_OscConfig+0x308>)
 8000cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cca:	6013      	str	r3, [r2, #0]
 8000ccc:	4b88      	ldr	r3, [pc, #544]	; (8000ef0 <HAL_RCC_OscConfig+0x308>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a87      	ldr	r2, [pc, #540]	; (8000ef0 <HAL_RCC_OscConfig+0x308>)
 8000cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cd6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cd8:	f7ff fcec 	bl	80006b4 <HAL_GetTick>
 8000cdc:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ce0:	e00a      	b.n	8000cf8 <HAL_RCC_OscConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ce2:	f7ff fce7 	bl	80006b4 <HAL_GetTick>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	2b64      	cmp	r3, #100	; 0x64
 8000cf0:	d902      	bls.n	8000cf8 <HAL_RCC_OscConfig+0x110>
        {
          return HAL_TIMEOUT;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	f000 be5f 	b.w	80019b6 <HAL_RCC_OscConfig+0xdce>
 8000cf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cfc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d00:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000d04:	fa93 f3a3 	rbit	r3, r3
 8000d08:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  return(result);
 8000d0c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d10:	fab3 f383 	clz	r3, r3
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	095b      	lsrs	r3, r3, #5
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	f043 0301 	orr.w	r3, r3, #1
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d102      	bne.n	8000d2a <HAL_RCC_OscConfig+0x142>
 8000d24:	4b72      	ldr	r3, [pc, #456]	; (8000ef0 <HAL_RCC_OscConfig+0x308>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	e00b      	b.n	8000d42 <HAL_RCC_OscConfig+0x15a>
 8000d2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d2e:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d32:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8000d36:	fa93 f3a3 	rbit	r3, r3
 8000d3a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8000d3e:	4b6c      	ldr	r3, [pc, #432]	; (8000ef0 <HAL_RCC_OscConfig+0x308>)
 8000d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d46:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
 8000d4a:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8000d4e:	fa92 f2a2 	rbit	r2, r2
 8000d52:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
  return(result);
 8000d56:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b252      	sxtb	r2, r2
 8000d60:	f042 0220 	orr.w	r2, r2, #32
 8000d64:	b252      	sxtb	r2, r2
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	f002 021f 	and.w	r2, r2, #31
 8000d6c:	40d3      	lsrs	r3, r2
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d1b5      	bne.n	8000ce2 <HAL_RCC_OscConfig+0xfa>
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d80:	d106      	bne.n	8000d90 <HAL_RCC_OscConfig+0x1a8>
 8000d82:	4b5b      	ldr	r3, [pc, #364]	; (8000ef0 <HAL_RCC_OscConfig+0x308>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a5a      	ldr	r2, [pc, #360]	; (8000ef0 <HAL_RCC_OscConfig+0x308>)
 8000d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d8c:	6013      	str	r3, [r2, #0]
 8000d8e:	e030      	b.n	8000df2 <HAL_RCC_OscConfig+0x20a>
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d10c      	bne.n	8000db4 <HAL_RCC_OscConfig+0x1cc>
 8000d9a:	4b55      	ldr	r3, [pc, #340]	; (8000ef0 <HAL_RCC_OscConfig+0x308>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a54      	ldr	r2, [pc, #336]	; (8000ef0 <HAL_RCC_OscConfig+0x308>)
 8000da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000da4:	6013      	str	r3, [r2, #0]
 8000da6:	4b52      	ldr	r3, [pc, #328]	; (8000ef0 <HAL_RCC_OscConfig+0x308>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a51      	ldr	r2, [pc, #324]	; (8000ef0 <HAL_RCC_OscConfig+0x308>)
 8000dac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000db0:	6013      	str	r3, [r2, #0]
 8000db2:	e01e      	b.n	8000df2 <HAL_RCC_OscConfig+0x20a>
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dbe:	d10c      	bne.n	8000dda <HAL_RCC_OscConfig+0x1f2>
 8000dc0:	4b4b      	ldr	r3, [pc, #300]	; (8000ef0 <HAL_RCC_OscConfig+0x308>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a4a      	ldr	r2, [pc, #296]	; (8000ef0 <HAL_RCC_OscConfig+0x308>)
 8000dc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dca:	6013      	str	r3, [r2, #0]
 8000dcc:	4b48      	ldr	r3, [pc, #288]	; (8000ef0 <HAL_RCC_OscConfig+0x308>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a47      	ldr	r2, [pc, #284]	; (8000ef0 <HAL_RCC_OscConfig+0x308>)
 8000dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	e00b      	b.n	8000df2 <HAL_RCC_OscConfig+0x20a>
 8000dda:	4b45      	ldr	r3, [pc, #276]	; (8000ef0 <HAL_RCC_OscConfig+0x308>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a44      	ldr	r2, [pc, #272]	; (8000ef0 <HAL_RCC_OscConfig+0x308>)
 8000de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	4b42      	ldr	r3, [pc, #264]	; (8000ef0 <HAL_RCC_OscConfig+0x308>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a41      	ldr	r2, [pc, #260]	; (8000ef0 <HAL_RCC_OscConfig+0x308>)
 8000dec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df0:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d04f      	beq.n	8000e9c <HAL_RCC_OscConfig+0x2b4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dfc:	f7ff fc5a 	bl	80006b4 <HAL_GetTick>
 8000e00:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e04:	e00a      	b.n	8000e1c <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e06:	f7ff fc55 	bl	80006b4 <HAL_GetTick>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	2b64      	cmp	r3, #100	; 0x64
 8000e14:	d902      	bls.n	8000e1c <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8000e16:	2303      	movs	r3, #3
 8000e18:	f000 bdcd 	b.w	80019b6 <HAL_RCC_OscConfig+0xdce>
 8000e1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e20:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e24:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000e28:	fa93 f3a3 	rbit	r3, r3
 8000e2c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
  return(result);
 8000e30:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e34:	fab3 f383 	clz	r3, r3
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	095b      	lsrs	r3, r3, #5
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d102      	bne.n	8000e4e <HAL_RCC_OscConfig+0x266>
 8000e48:	4b29      	ldr	r3, [pc, #164]	; (8000ef0 <HAL_RCC_OscConfig+0x308>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	e00b      	b.n	8000e66 <HAL_RCC_OscConfig+0x27e>
 8000e4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e52:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e56:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000e5a:	fa93 f3a3 	rbit	r3, r3
 8000e5e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000e62:	4b23      	ldr	r3, [pc, #140]	; (8000ef0 <HAL_RCC_OscConfig+0x308>)
 8000e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e6a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000e6e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000e72:	fa92 f2a2 	rbit	r2, r2
 8000e76:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return(result);
 8000e7a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000e7e:	fab2 f282 	clz	r2, r2
 8000e82:	b252      	sxtb	r2, r2
 8000e84:	f042 0220 	orr.w	r2, r2, #32
 8000e88:	b252      	sxtb	r2, r2
 8000e8a:	b2d2      	uxtb	r2, r2
 8000e8c:	f002 021f 	and.w	r2, r2, #31
 8000e90:	40d3      	lsrs	r3, r2
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d0b5      	beq.n	8000e06 <HAL_RCC_OscConfig+0x21e>
 8000e9a:	e053      	b.n	8000f44 <HAL_RCC_OscConfig+0x35c>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9c:	f7ff fc0a 	bl	80006b4 <HAL_GetTick>
 8000ea0:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ea4:	e00a      	b.n	8000ebc <HAL_RCC_OscConfig+0x2d4>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ea6:	f7ff fc05 	bl	80006b4 <HAL_GetTick>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b64      	cmp	r3, #100	; 0x64
 8000eb4:	d902      	bls.n	8000ebc <HAL_RCC_OscConfig+0x2d4>
          {
            return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	f000 bd7d 	b.w	80019b6 <HAL_RCC_OscConfig+0xdce>
 8000ebc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ec0:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000ec8:	fa93 f3a3 	rbit	r3, r3
 8000ecc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  return(result);
 8000ed0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ed4:	fab3 f383 	clz	r3, r3
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	095b      	lsrs	r3, r3, #5
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d105      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x30c>
 8000ee8:	4b01      	ldr	r3, [pc, #4]	; (8000ef0 <HAL_RCC_OscConfig+0x308>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	e00e      	b.n	8000f0c <HAL_RCC_OscConfig+0x324>
 8000eee:	bf00      	nop
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ef8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000f00:	fa93 f3a3 	rbit	r3, r3
 8000f04:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8000f08:	4bce      	ldr	r3, [pc, #824]	; (8001244 <HAL_RCC_OscConfig+0x65c>)
 8000f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f10:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 8000f14:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8000f18:	fa92 f2a2 	rbit	r2, r2
 8000f1c:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
  return(result);
 8000f20:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8000f24:	fab2 f282 	clz	r2, r2
 8000f28:	b252      	sxtb	r2, r2
 8000f2a:	f042 0220 	orr.w	r2, r2, #32
 8000f2e:	b252      	sxtb	r2, r2
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	f002 021f 	and.w	r2, r2, #31
 8000f36:	40d3      	lsrs	r3, r2
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1b2      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x2be>
 8000f40:	e000      	b.n	8000f44 <HAL_RCC_OscConfig+0x35c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f42:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 8151 	beq.w	80011f6 <HAL_RCC_OscConfig+0x60e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f54:	4bbb      	ldr	r3, [pc, #748]	; (8001244 <HAL_RCC_OscConfig+0x65c>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 030c 	and.w	r3, r3, #12
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d00b      	beq.n	8000f78 <HAL_RCC_OscConfig+0x390>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f60:	4bb8      	ldr	r3, [pc, #736]	; (8001244 <HAL_RCC_OscConfig+0x65c>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 030c 	and.w	r3, r3, #12
 8000f68:	2b08      	cmp	r3, #8
 8000f6a:	d163      	bne.n	8001034 <HAL_RCC_OscConfig+0x44c>
 8000f6c:	4bb5      	ldr	r3, [pc, #724]	; (8001244 <HAL_RCC_OscConfig+0x65c>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d15d      	bne.n	8001034 <HAL_RCC_OscConfig+0x44c>
 8000f78:	2302      	movs	r3, #2
 8000f7a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f7e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000f82:	fa93 f3a3 	rbit	r3, r3
 8000f86:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  return(result);
 8000f8a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f8e:	fab3 f383 	clz	r3, r3
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	095b      	lsrs	r3, r3, #5
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d102      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x3c0>
 8000fa2:	4ba8      	ldr	r3, [pc, #672]	; (8001244 <HAL_RCC_OscConfig+0x65c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	e00a      	b.n	8000fbe <HAL_RCC_OscConfig+0x3d6>
 8000fa8:	2302      	movs	r3, #2
 8000faa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fae:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000fb2:	fa93 f3a3 	rbit	r3, r3
 8000fb6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000fba:	4ba2      	ldr	r3, [pc, #648]	; (8001244 <HAL_RCC_OscConfig+0x65c>)
 8000fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8000fc4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000fc8:	fa92 f2a2 	rbit	r2, r2
 8000fcc:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return(result);
 8000fd0:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000fd4:	fab2 f282 	clz	r2, r2
 8000fd8:	b252      	sxtb	r2, r2
 8000fda:	f042 0220 	orr.w	r2, r2, #32
 8000fde:	b252      	sxtb	r2, r2
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	f002 021f 	and.w	r2, r2, #31
 8000fe6:	40d3      	lsrs	r3, r2
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d007      	beq.n	8001000 <HAL_RCC_OscConfig+0x418>
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d002      	beq.n	8001000 <HAL_RCC_OscConfig+0x418>
      {
        return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	f000 bcdb 	b.w	80019b6 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001000:	4b90      	ldr	r3, [pc, #576]	; (8001244 <HAL_RCC_OscConfig+0x65c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6959      	ldr	r1, [r3, #20]
 800100e:	23f8      	movs	r3, #248	; 0xf8
 8001010:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001014:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001018:	fa93 f3a3 	rbit	r3, r3
 800101c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  return(result);
 8001020:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001024:	fab3 f383 	clz	r3, r3
 8001028:	fa01 f303 	lsl.w	r3, r1, r3
 800102c:	4985      	ldr	r1, [pc, #532]	; (8001244 <HAL_RCC_OscConfig+0x65c>)
 800102e:	4313      	orrs	r3, r2
 8001030:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001032:	e0e0      	b.n	80011f6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	691b      	ldr	r3, [r3, #16]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d07a      	beq.n	8001134 <HAL_RCC_OscConfig+0x54c>
 800103e:	2301      	movs	r3, #1
 8001040:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001044:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001048:	fa93 f3a3 	rbit	r3, r3
 800104c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return(result);
 8001050:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001054:	fab3 f383 	clz	r3, r3
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800105e:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001062:	461a      	mov	r2, r3
 8001064:	2301      	movs	r3, #1
 8001066:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001068:	f7ff fb24 	bl	80006b4 <HAL_GetTick>
 800106c:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001070:	e00a      	b.n	8001088 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001072:	f7ff fb1f 	bl	80006b4 <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d902      	bls.n	8001088 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	f000 bc97 	b.w	80019b6 <HAL_RCC_OscConfig+0xdce>
 8001088:	2302      	movs	r3, #2
 800108a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001092:	fa93 f3a3 	rbit	r3, r3
 8001096:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return(result);
 800109a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800109e:	fab3 f383 	clz	r3, r3
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	095b      	lsrs	r3, r3, #5
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d102      	bne.n	80010b8 <HAL_RCC_OscConfig+0x4d0>
 80010b2:	4b64      	ldr	r3, [pc, #400]	; (8001244 <HAL_RCC_OscConfig+0x65c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	e00a      	b.n	80010ce <HAL_RCC_OscConfig+0x4e6>
 80010b8:	2302      	movs	r3, #2
 80010ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80010c2:	fa93 f3a3 	rbit	r3, r3
 80010c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80010ca:	4b5e      	ldr	r3, [pc, #376]	; (8001244 <HAL_RCC_OscConfig+0x65c>)
 80010cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ce:	2202      	movs	r2, #2
 80010d0:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 80010d4:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80010d8:	fa92 f2a2 	rbit	r2, r2
 80010dc:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
  return(result);
 80010e0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80010e4:	fab2 f282 	clz	r2, r2
 80010e8:	b252      	sxtb	r2, r2
 80010ea:	f042 0220 	orr.w	r2, r2, #32
 80010ee:	b252      	sxtb	r2, r2
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	f002 021f 	and.w	r2, r2, #31
 80010f6:	40d3      	lsrs	r3, r2
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d0b8      	beq.n	8001072 <HAL_RCC_OscConfig+0x48a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001100:	4b50      	ldr	r3, [pc, #320]	; (8001244 <HAL_RCC_OscConfig+0x65c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	6959      	ldr	r1, [r3, #20]
 800110e:	23f8      	movs	r3, #248	; 0xf8
 8001110:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001114:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001118:	fa93 f3a3 	rbit	r3, r3
 800111c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  return(result);
 8001120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001124:	fab3 f383 	clz	r3, r3
 8001128:	fa01 f303 	lsl.w	r3, r1, r3
 800112c:	4945      	ldr	r1, [pc, #276]	; (8001244 <HAL_RCC_OscConfig+0x65c>)
 800112e:	4313      	orrs	r3, r2
 8001130:	600b      	str	r3, [r1, #0]
 8001132:	e060      	b.n	80011f6 <HAL_RCC_OscConfig+0x60e>
 8001134:	2301      	movs	r3, #1
 8001136:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800113e:	fa93 f3a3 	rbit	r3, r3
 8001142:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return(result);
 8001146:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800114a:	fab3 f383 	clz	r3, r3
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001154:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001158:	461a      	mov	r2, r3
 800115a:	2300      	movs	r3, #0
 800115c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115e:	f7ff faa9 	bl	80006b4 <HAL_GetTick>
 8001162:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001166:	e00a      	b.n	800117e <HAL_RCC_OscConfig+0x596>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001168:	f7ff faa4 	bl	80006b4 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d902      	bls.n	800117e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	f000 bc1c 	b.w	80019b6 <HAL_RCC_OscConfig+0xdce>
 800117e:	2302      	movs	r3, #2
 8001180:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001184:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001188:	fa93 f3a3 	rbit	r3, r3
 800118c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  return(result);
 8001190:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001194:	fab3 f383 	clz	r3, r3
 8001198:	b2db      	uxtb	r3, r3
 800119a:	095b      	lsrs	r3, r3, #5
 800119c:	b2db      	uxtb	r3, r3
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d102      	bne.n	80011ae <HAL_RCC_OscConfig+0x5c6>
 80011a8:	4b26      	ldr	r3, [pc, #152]	; (8001244 <HAL_RCC_OscConfig+0x65c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	e00a      	b.n	80011c4 <HAL_RCC_OscConfig+0x5dc>
 80011ae:	2302      	movs	r3, #2
 80011b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80011b8:	fa93 f3a3 	rbit	r3, r3
 80011bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80011c0:	4b20      	ldr	r3, [pc, #128]	; (8001244 <HAL_RCC_OscConfig+0x65c>)
 80011c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c4:	2202      	movs	r2, #2
 80011c6:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 80011ca:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80011ce:	fa92 f2a2 	rbit	r2, r2
 80011d2:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
  return(result);
 80011d6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80011da:	fab2 f282 	clz	r2, r2
 80011de:	b252      	sxtb	r2, r2
 80011e0:	f042 0220 	orr.w	r2, r2, #32
 80011e4:	b252      	sxtb	r2, r2
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	f002 021f 	and.w	r2, r2, #31
 80011ec:	40d3      	lsrs	r3, r2
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1b8      	bne.n	8001168 <HAL_RCC_OscConfig+0x580>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0308 	and.w	r3, r3, #8
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 80b7 	beq.w	8001374 <HAL_RCC_OscConfig+0x78c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d059      	beq.n	80012c4 <HAL_RCC_OscConfig+0x6dc>
 8001210:	2301      	movs	r3, #1
 8001212:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001216:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800121a:	fa93 f3a3 	rbit	r3, r3
 800121e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  return(result);
 8001222:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001226:	fab3 f383 	clz	r3, r3
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	461a      	mov	r2, r3
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_RCC_OscConfig+0x660>)
 8001230:	4413      	add	r3, r2
 8001232:	461a      	mov	r2, r3
 8001234:	2301      	movs	r3, #1
 8001236:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001238:	f7ff fa3c 	bl	80006b4 <HAL_GetTick>
 800123c:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001240:	e00e      	b.n	8001260 <HAL_RCC_OscConfig+0x678>
 8001242:	bf00      	nop
 8001244:	40021000 	.word	0x40021000
 8001248:	42420480 	.word	0x42420480
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800124c:	f7ff fa32 	bl	80006b4 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x678>
        {
          return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e3aa      	b.n	80019b6 <HAL_RCC_OscConfig+0xdce>
 8001260:	2302      	movs	r3, #2
 8001262:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001266:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800126a:	fa93 f3a3 	rbit	r3, r3
 800126e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001272:	2302      	movs	r3, #2
 8001274:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800127c:	fa93 f3a3 	rbit	r3, r3
 8001280:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001284:	4bb0      	ldr	r3, [pc, #704]	; (8001548 <HAL_RCC_OscConfig+0x960>)
 8001286:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001288:	2302      	movs	r3, #2
 800128a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800128e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001292:	fa93 f3a3 	rbit	r3, r3
 8001296:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  return(result);
 800129a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800129e:	fab3 f383 	clz	r3, r3
 80012a2:	b25b      	sxtb	r3, r3
 80012a4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012a8:	b25b      	sxtb	r3, r3
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	f003 031f 	and.w	r3, r3, #31
 80012b0:	fa22 f303 	lsr.w	r3, r2, r3
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0c7      	beq.n	800124c <HAL_RCC_OscConfig+0x664>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software temporization of 1ms 
          should be added.*/
      HAL_Delay(1);
 80012bc:	2001      	movs	r0, #1
 80012be:	f7ff fa03 	bl	80006c8 <HAL_Delay>
 80012c2:	e057      	b.n	8001374 <HAL_RCC_OscConfig+0x78c>
 80012c4:	2301      	movs	r3, #1
 80012c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80012ce:	fa93 f3a3 	rbit	r3, r3
 80012d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  return(result);
 80012d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012da:	fab3 f383 	clz	r3, r3
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b9a      	ldr	r3, [pc, #616]	; (800154c <HAL_RCC_OscConfig+0x964>)
 80012e4:	4413      	add	r3, r2
 80012e6:	461a      	mov	r2, r3
 80012e8:	2300      	movs	r3, #0
 80012ea:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ec:	f7ff f9e2 	bl	80006b4 <HAL_GetTick>
 80012f0:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f4:	e009      	b.n	800130a <HAL_RCC_OscConfig+0x722>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012f6:	f7ff f9dd 	bl	80006b4 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x722>
        {
          return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e355      	b.n	80019b6 <HAL_RCC_OscConfig+0xdce>
 800130a:	2302      	movs	r3, #2
 800130c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001310:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001314:	fa93 f3a3 	rbit	r3, r3
 8001318:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800131c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001320:	2202      	movs	r2, #2
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	fa93 f2a3 	rbit	r2, r3
 800132e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001332:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001334:	4b84      	ldr	r3, [pc, #528]	; (8001548 <HAL_RCC_OscConfig+0x960>)
 8001336:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001338:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800133c:	2102      	movs	r1, #2
 800133e:	6019      	str	r1, [r3, #0]
 8001340:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	fa93 f1a3 	rbit	r1, r3
 800134a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800134e:	6019      	str	r1, [r3, #0]
  return(result);
 8001350:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	fab3 f383 	clz	r3, r3
 800135a:	b25b      	sxtb	r3, r3
 800135c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001360:	b25b      	sxtb	r3, r3
 8001362:	b2db      	uxtb	r3, r3
 8001364:	f003 031f 	and.w	r3, r3, #31
 8001368:	fa22 f303 	lsr.w	r3, r2, r3
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1c0      	bne.n	80012f6 <HAL_RCC_OscConfig+0x70e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 8188 	beq.w	8001694 <HAL_RCC_OscConfig+0xaac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001384:	4b70      	ldr	r3, [pc, #448]	; (8001548 <HAL_RCC_OscConfig+0x960>)
 8001386:	69db      	ldr	r3, [r3, #28]
 8001388:	4a6f      	ldr	r2, [pc, #444]	; (8001548 <HAL_RCC_OscConfig+0x960>)
 800138a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138e:	61d3      	str	r3, [r2, #28]
 8001390:	4b6d      	ldr	r3, [pc, #436]	; (8001548 <HAL_RCC_OscConfig+0x960>)
 8001392:	69db      	ldr	r3, [r3, #28]
 8001394:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001398:	f107 0308 	add.w	r3, r7, #8
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	f107 0308 	add.w	r3, r7, #8
 80013a2:	681b      	ldr	r3, [r3, #0]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80013a4:	4b6a      	ldr	r3, [pc, #424]	; (8001550 <HAL_RCC_OscConfig+0x968>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a69      	ldr	r2, [pc, #420]	; (8001550 <HAL_RCC_OscConfig+0x968>)
 80013aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80013b0:	f7ff f980 	bl	80006b4 <HAL_GetTick>
 80013b4:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80013b8:	e009      	b.n	80013ce <HAL_RCC_OscConfig+0x7e6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80013ba:	f7ff f97b 	bl	80006b4 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b64      	cmp	r3, #100	; 0x64
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x7e6>
      {
        return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e2f3      	b.n	80019b6 <HAL_RCC_OscConfig+0xdce>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80013ce:	4b60      	ldr	r3, [pc, #384]	; (8001550 <HAL_RCC_OscConfig+0x968>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0ef      	beq.n	80013ba <HAL_RCC_OscConfig+0x7d2>
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80013da:	4b5b      	ldr	r3, [pc, #364]	; (8001548 <HAL_RCC_OscConfig+0x960>)
 80013dc:	6a1b      	ldr	r3, [r3, #32]
 80013de:	4a5a      	ldr	r2, [pc, #360]	; (8001548 <HAL_RCC_OscConfig+0x960>)
 80013e0:	f023 0301 	bic.w	r3, r3, #1
 80013e4:	6213      	str	r3, [r2, #32]
 80013e6:	4b58      	ldr	r3, [pc, #352]	; (8001548 <HAL_RCC_OscConfig+0x960>)
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	4a57      	ldr	r2, [pc, #348]	; (8001548 <HAL_RCC_OscConfig+0x960>)
 80013ec:	f023 0304 	bic.w	r3, r3, #4
 80013f0:	6213      	str	r3, [r2, #32]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013f2:	f7ff f95f 	bl	80006b4 <HAL_GetTick>
 80013f6:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
    
    /* Wait till LSE is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013fa:	e00b      	b.n	8001414 <HAL_RCC_OscConfig+0x82c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013fc:	f7ff f95a 	bl	80006b4 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	f241 3288 	movw	r2, #5000	; 0x1388
 800140c:	4293      	cmp	r3, r2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x82c>
      {
        return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e2d0      	b.n	80019b6 <HAL_RCC_OscConfig+0xdce>
 8001414:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001418:	2202      	movs	r2, #2
 800141a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	fa93 f2a3 	rbit	r2, r3
 8001426:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001430:	2202      	movs	r2, #2
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	fa93 f2a3 	rbit	r2, r3
 800143e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001442:	601a      	str	r2, [r3, #0]
  return(result);
 8001444:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001448:	681b      	ldr	r3, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800144a:	fab3 f383 	clz	r3, r3
 800144e:	b2db      	uxtb	r3, r3
 8001450:	095b      	lsrs	r3, r3, #5
 8001452:	b2db      	uxtb	r3, r3
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d102      	bne.n	8001464 <HAL_RCC_OscConfig+0x87c>
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <HAL_RCC_OscConfig+0x960>)
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	e001      	b.n	8001468 <HAL_RCC_OscConfig+0x880>
 8001464:	4b38      	ldr	r3, [pc, #224]	; (8001548 <HAL_RCC_OscConfig+0x960>)
 8001466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001468:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800146c:	2102      	movs	r1, #2
 800146e:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001470:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001474:	6812      	ldr	r2, [r2, #0]
 8001476:	fa92 f1a2 	rbit	r1, r2
 800147a:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800147e:	6011      	str	r1, [r2, #0]
  return(result);
 8001480:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8001484:	6812      	ldr	r2, [r2, #0]
 8001486:	fab2 f282 	clz	r2, r2
 800148a:	b252      	sxtb	r2, r2
 800148c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001490:	b252      	sxtb	r2, r2
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	f002 021f 	and.w	r2, r2, #31
 8001498:	40d3      	lsrs	r3, r2
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1ac      	bne.n	80013fc <HAL_RCC_OscConfig+0x814>
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d106      	bne.n	80014ba <HAL_RCC_OscConfig+0x8d2>
 80014ac:	4b26      	ldr	r3, [pc, #152]	; (8001548 <HAL_RCC_OscConfig+0x960>)
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	4a25      	ldr	r2, [pc, #148]	; (8001548 <HAL_RCC_OscConfig+0x960>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6213      	str	r3, [r2, #32]
 80014b8:	e02f      	b.n	800151a <HAL_RCC_OscConfig+0x932>
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d10c      	bne.n	80014de <HAL_RCC_OscConfig+0x8f6>
 80014c4:	4b20      	ldr	r3, [pc, #128]	; (8001548 <HAL_RCC_OscConfig+0x960>)
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	4a1f      	ldr	r2, [pc, #124]	; (8001548 <HAL_RCC_OscConfig+0x960>)
 80014ca:	f023 0301 	bic.w	r3, r3, #1
 80014ce:	6213      	str	r3, [r2, #32]
 80014d0:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <HAL_RCC_OscConfig+0x960>)
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	4a1c      	ldr	r2, [pc, #112]	; (8001548 <HAL_RCC_OscConfig+0x960>)
 80014d6:	f023 0304 	bic.w	r3, r3, #4
 80014da:	6213      	str	r3, [r2, #32]
 80014dc:	e01d      	b.n	800151a <HAL_RCC_OscConfig+0x932>
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	2b05      	cmp	r3, #5
 80014e6:	d10c      	bne.n	8001502 <HAL_RCC_OscConfig+0x91a>
 80014e8:	4b17      	ldr	r3, [pc, #92]	; (8001548 <HAL_RCC_OscConfig+0x960>)
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	4a16      	ldr	r2, [pc, #88]	; (8001548 <HAL_RCC_OscConfig+0x960>)
 80014ee:	f043 0304 	orr.w	r3, r3, #4
 80014f2:	6213      	str	r3, [r2, #32]
 80014f4:	4b14      	ldr	r3, [pc, #80]	; (8001548 <HAL_RCC_OscConfig+0x960>)
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	4a13      	ldr	r2, [pc, #76]	; (8001548 <HAL_RCC_OscConfig+0x960>)
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	6213      	str	r3, [r2, #32]
 8001500:	e00b      	b.n	800151a <HAL_RCC_OscConfig+0x932>
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <HAL_RCC_OscConfig+0x960>)
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	4a10      	ldr	r2, [pc, #64]	; (8001548 <HAL_RCC_OscConfig+0x960>)
 8001508:	f023 0301 	bic.w	r3, r3, #1
 800150c:	6213      	str	r3, [r2, #32]
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <HAL_RCC_OscConfig+0x960>)
 8001510:	6a1b      	ldr	r3, [r3, #32]
 8001512:	4a0d      	ldr	r2, [pc, #52]	; (8001548 <HAL_RCC_OscConfig+0x960>)
 8001514:	f023 0304 	bic.w	r3, r3, #4
 8001518:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d05f      	beq.n	80015e4 <HAL_RCC_OscConfig+0x9fc>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001524:	f7ff f8c6 	bl	80006b4 <HAL_GetTick>
 8001528:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800152c:	e012      	b.n	8001554 <HAL_RCC_OscConfig+0x96c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800152e:	f7ff f8c1 	bl	80006b4 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	f241 3288 	movw	r2, #5000	; 0x1388
 800153e:	4293      	cmp	r3, r2
 8001540:	d908      	bls.n	8001554 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e237      	b.n	80019b6 <HAL_RCC_OscConfig+0xdce>
 8001546:	bf00      	nop
 8001548:	40021000 	.word	0x40021000
 800154c:	42420480 	.word	0x42420480
 8001550:	40007000 	.word	0x40007000
 8001554:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001558:	2202      	movs	r2, #2
 800155a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	fa93 f2a3 	rbit	r2, r3
 8001566:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001570:	2202      	movs	r2, #2
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	fa93 f2a3 	rbit	r2, r3
 800157e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001582:	601a      	str	r2, [r3, #0]
  return(result);
 8001584:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001588:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158a:	fab3 f383 	clz	r3, r3
 800158e:	b2db      	uxtb	r3, r3
 8001590:	095b      	lsrs	r3, r3, #5
 8001592:	b2db      	uxtb	r3, r3
 8001594:	f043 0302 	orr.w	r3, r3, #2
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d102      	bne.n	80015a4 <HAL_RCC_OscConfig+0x9bc>
 800159e:	4bb2      	ldr	r3, [pc, #712]	; (8001868 <HAL_RCC_OscConfig+0xc80>)
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	e001      	b.n	80015a8 <HAL_RCC_OscConfig+0x9c0>
 80015a4:	4bb0      	ldr	r3, [pc, #704]	; (8001868 <HAL_RCC_OscConfig+0xc80>)
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80015ac:	2102      	movs	r1, #2
 80015ae:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80015b4:	6812      	ldr	r2, [r2, #0]
 80015b6:	fa92 f1a2 	rbit	r1, r2
 80015ba:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80015be:	6011      	str	r1, [r2, #0]
  return(result);
 80015c0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80015c4:	6812      	ldr	r2, [r2, #0]
 80015c6:	fab2 f282 	clz	r2, r2
 80015ca:	b252      	sxtb	r2, r2
 80015cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015d0:	b252      	sxtb	r2, r2
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	f002 021f 	and.w	r2, r2, #31
 80015d8:	40d3      	lsrs	r3, r2
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0a5      	beq.n	800152e <HAL_RCC_OscConfig+0x946>
 80015e2:	e057      	b.n	8001694 <HAL_RCC_OscConfig+0xaac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e4:	f7ff f866 	bl	80006b4 <HAL_GetTick>
 80015e8:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ec:	e00b      	b.n	8001606 <HAL_RCC_OscConfig+0xa1e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ee:	f7ff f861 	bl	80006b4 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fe:	4293      	cmp	r3, r2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0xa1e>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e1d7      	b.n	80019b6 <HAL_RCC_OscConfig+0xdce>
 8001606:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800160a:	2202      	movs	r2, #2
 800160c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	fa93 f2a3 	rbit	r2, r3
 8001618:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001622:	2202      	movs	r2, #2
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	fa93 f2a3 	rbit	r2, r3
 8001630:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001634:	601a      	str	r2, [r3, #0]
  return(result);
 8001636:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800163a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800163c:	fab3 f383 	clz	r3, r3
 8001640:	b2db      	uxtb	r3, r3
 8001642:	095b      	lsrs	r3, r3, #5
 8001644:	b2db      	uxtb	r3, r3
 8001646:	f043 0302 	orr.w	r3, r3, #2
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d102      	bne.n	8001656 <HAL_RCC_OscConfig+0xa6e>
 8001650:	4b85      	ldr	r3, [pc, #532]	; (8001868 <HAL_RCC_OscConfig+0xc80>)
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	e001      	b.n	800165a <HAL_RCC_OscConfig+0xa72>
 8001656:	4b84      	ldr	r3, [pc, #528]	; (8001868 <HAL_RCC_OscConfig+0xc80>)
 8001658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800165e:	2102      	movs	r1, #2
 8001660:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001662:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	fa92 f1a2 	rbit	r1, r2
 800166c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001670:	6011      	str	r1, [r2, #0]
  return(result);
 8001672:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001676:	6812      	ldr	r2, [r2, #0]
 8001678:	fab2 f282 	clz	r2, r2
 800167c:	b252      	sxtb	r2, r2
 800167e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001682:	b252      	sxtb	r2, r2
 8001684:	b2d2      	uxtb	r2, r2
 8001686:	f002 021f 	and.w	r2, r2, #31
 800168a:	40d3      	lsrs	r3, r2
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1ac      	bne.n	80015ee <HAL_RCC_OscConfig+0xa06>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 818a 	beq.w	80019b4 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016a0:	4b71      	ldr	r3, [pc, #452]	; (8001868 <HAL_RCC_OscConfig+0xc80>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	2b08      	cmp	r3, #8
 80016aa:	f000 8181 	beq.w	80019b0 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	f040 8107 	bne.w	80018c8 <HAL_RCC_OscConfig+0xce0>
 80016ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80016be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	fa93 f2a3 	rbit	r2, r3
 80016ce:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016d2:	601a      	str	r2, [r3, #0]
  return(result);
 80016d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016d8:	681b      	ldr	r3, [r3, #0]
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016da:	fab3 f383 	clz	r3, r3
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80016e4:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80016e8:	461a      	mov	r2, r3
 80016ea:	2300      	movs	r3, #0
 80016ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ee:	f7fe ffe1 	bl	80006b4 <HAL_GetTick>
 80016f2:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016f6:	e009      	b.n	800170c <HAL_RCC_OscConfig+0xb24>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f8:	f7fe ffdc 	bl	80006b4 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0xb24>
          {
            return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e154      	b.n	80019b6 <HAL_RCC_OscConfig+0xdce>
 800170c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001710:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001714:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001716:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	fa93 f2a3 	rbit	r2, r3
 8001720:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001724:	601a      	str	r2, [r3, #0]
  return(result);
 8001726:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800172a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800172c:	fab3 f383 	clz	r3, r3
 8001730:	b2db      	uxtb	r3, r3
 8001732:	095b      	lsrs	r3, r3, #5
 8001734:	b2db      	uxtb	r3, r3
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b01      	cmp	r3, #1
 800173e:	d102      	bne.n	8001746 <HAL_RCC_OscConfig+0xb5e>
 8001740:	4b49      	ldr	r3, [pc, #292]	; (8001868 <HAL_RCC_OscConfig+0xc80>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	e00e      	b.n	8001764 <HAL_RCC_OscConfig+0xb7c>
 8001746:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800174a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800174e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001750:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	fa93 f2a3 	rbit	r2, r3
 800175a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	4b41      	ldr	r3, [pc, #260]	; (8001868 <HAL_RCC_OscConfig+0xc80>)
 8001762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001764:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001768:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800176c:	6011      	str	r1, [r2, #0]
 800176e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001772:	6812      	ldr	r2, [r2, #0]
 8001774:	fa92 f1a2 	rbit	r1, r2
 8001778:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800177c:	6011      	str	r1, [r2, #0]
  return(result);
 800177e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001782:	6812      	ldr	r2, [r2, #0]
 8001784:	fab2 f282 	clz	r2, r2
 8001788:	b252      	sxtb	r2, r2
 800178a:	f042 0220 	orr.w	r2, r2, #32
 800178e:	b252      	sxtb	r2, r2
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	f002 021f 	and.w	r2, r2, #31
 8001796:	40d3      	lsrs	r3, r2
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1ab      	bne.n	80016f8 <HAL_RCC_OscConfig+0xb10>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017aa:	d109      	bne.n	80017c0 <HAL_RCC_OscConfig+0xbd8>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017ac:	4b2e      	ldr	r3, [pc, #184]	; (8001868 <HAL_RCC_OscConfig+0xc80>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	492b      	ldr	r1, [pc, #172]	; (8001868 <HAL_RCC_OscConfig+0xc80>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017c0:	4b29      	ldr	r3, [pc, #164]	; (8001868 <HAL_RCC_OscConfig+0xc80>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017c8:	1d3b      	adds	r3, r7, #4
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6a19      	ldr	r1, [r3, #32]
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	430b      	orrs	r3, r1
 80017d6:	4924      	ldr	r1, [pc, #144]	; (8001868 <HAL_RCC_OscConfig+0xc80>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	604b      	str	r3, [r1, #4]
 80017dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	fa93 f2a3 	rbit	r2, r3
 80017f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017f4:	601a      	str	r2, [r3, #0]
  return(result);
 80017f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017fa:	681b      	ldr	r3, [r3, #0]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017fc:	fab3 f383 	clz	r3, r3
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001806:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800180a:	461a      	mov	r2, r3
 800180c:	2301      	movs	r3, #1
 800180e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001810:	f7fe ff50 	bl	80006b4 <HAL_GetTick>
 8001814:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001818:	e009      	b.n	800182e <HAL_RCC_OscConfig+0xc46>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800181a:	f7fe ff4b 	bl	80006b4 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0xc46>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e0c3      	b.n	80019b6 <HAL_RCC_OscConfig+0xdce>
 800182e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001832:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001836:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001838:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	fa93 f2a3 	rbit	r2, r3
 8001842:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001846:	601a      	str	r2, [r3, #0]
  return(result);
 8001848:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800184c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800184e:	fab3 f383 	clz	r3, r3
 8001852:	b2db      	uxtb	r3, r3
 8001854:	095b      	lsrs	r3, r3, #5
 8001856:	b2db      	uxtb	r3, r3
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b01      	cmp	r3, #1
 8001860:	d104      	bne.n	800186c <HAL_RCC_OscConfig+0xc84>
 8001862:	4b01      	ldr	r3, [pc, #4]	; (8001868 <HAL_RCC_OscConfig+0xc80>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	e010      	b.n	800188a <HAL_RCC_OscConfig+0xca2>
 8001868:	40021000 	.word	0x40021000
 800186c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001870:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001874:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001876:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	fa93 f2a3 	rbit	r2, r3
 8001880:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	4b4e      	ldr	r3, [pc, #312]	; (80019c0 <HAL_RCC_OscConfig+0xdd8>)
 8001888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800188e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001892:	6011      	str	r1, [r2, #0]
 8001894:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001898:	6812      	ldr	r2, [r2, #0]
 800189a:	fa92 f1a2 	rbit	r1, r2
 800189e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80018a2:	6011      	str	r1, [r2, #0]
  return(result);
 80018a4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	fab2 f282 	clz	r2, r2
 80018ae:	b252      	sxtb	r2, r2
 80018b0:	f042 0220 	orr.w	r2, r2, #32
 80018b4:	b252      	sxtb	r2, r2
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	f002 021f 	and.w	r2, r2, #31
 80018bc:	40d3      	lsrs	r3, r2
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0a9      	beq.n	800181a <HAL_RCC_OscConfig+0xc32>
 80018c6:	e075      	b.n	80019b4 <HAL_RCC_OscConfig+0xdcc>
 80018c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	fa93 f2a3 	rbit	r2, r3
 80018dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e0:	601a      	str	r2, [r3, #0]
  return(result);
 80018e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e8:	fab3 f383 	clz	r3, r3
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80018f2:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80018f6:	461a      	mov	r2, r3
 80018f8:	2300      	movs	r3, #0
 80018fa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fc:	f7fe feda 	bl	80006b4 <HAL_GetTick>
 8001900:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001904:	e009      	b.n	800191a <HAL_RCC_OscConfig+0xd32>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001906:	f7fe fed5 	bl	80006b4 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0xd32>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e04d      	b.n	80019b6 <HAL_RCC_OscConfig+0xdce>
 800191a:	f107 0320 	add.w	r3, r7, #32
 800191e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001922:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001924:	f107 0320 	add.w	r3, r7, #32
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	fa93 f2a3 	rbit	r2, r3
 800192e:	f107 031c 	add.w	r3, r7, #28
 8001932:	601a      	str	r2, [r3, #0]
  return(result);
 8001934:	f107 031c 	add.w	r3, r7, #28
 8001938:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193a:	fab3 f383 	clz	r3, r3
 800193e:	b2db      	uxtb	r3, r3
 8001940:	095b      	lsrs	r3, r3, #5
 8001942:	b2db      	uxtb	r3, r3
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b01      	cmp	r3, #1
 800194c:	d102      	bne.n	8001954 <HAL_RCC_OscConfig+0xd6c>
 800194e:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <HAL_RCC_OscConfig+0xdd8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	e00e      	b.n	8001972 <HAL_RCC_OscConfig+0xd8a>
 8001954:	f107 0318 	add.w	r3, r7, #24
 8001958:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800195c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195e:	f107 0318 	add.w	r3, r7, #24
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	fa93 f2a3 	rbit	r2, r3
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <HAL_RCC_OscConfig+0xdd8>)
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	f107 0210 	add.w	r2, r7, #16
 8001976:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800197a:	6011      	str	r1, [r2, #0]
 800197c:	f107 0210 	add.w	r2, r7, #16
 8001980:	6812      	ldr	r2, [r2, #0]
 8001982:	fa92 f1a2 	rbit	r1, r2
 8001986:	f107 020c 	add.w	r2, r7, #12
 800198a:	6011      	str	r1, [r2, #0]
  return(result);
 800198c:	f107 020c 	add.w	r2, r7, #12
 8001990:	6812      	ldr	r2, [r2, #0]
 8001992:	fab2 f282 	clz	r2, r2
 8001996:	b252      	sxtb	r2, r2
 8001998:	f042 0220 	orr.w	r2, r2, #32
 800199c:	b252      	sxtb	r2, r2
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	f002 021f 	and.w	r2, r2, #31
 80019a4:	40d3      	lsrs	r3, r2
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1ab      	bne.n	8001906 <HAL_RCC_OscConfig+0xd1e>
 80019ae:	e001      	b.n	80019b4 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e000      	b.n	80019b6 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40021000 	.word	0x40021000

080019c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b0a8      	sub	sp, #160	; 0xa0
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80019d4:	4bb0      	ldr	r3, [pc, #704]	; (8001c98 <HAL_RCC_ClockConfig+0x2d4>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	f240 812b 	bls.w	8001c3a <HAL_RCC_ClockConfig+0x276>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e4:	4bac      	ldr	r3, [pc, #688]	; (8001c98 <HAL_RCC_ClockConfig+0x2d4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f023 0207 	bic.w	r2, r3, #7
 80019ec:	49aa      	ldr	r1, [pc, #680]	; (8001c98 <HAL_RCC_ClockConfig+0x2d4>)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019f4:	4ba8      	ldr	r3, [pc, #672]	; (8001c98 <HAL_RCC_ClockConfig+0x2d4>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d001      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x42>
    {
      return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e25d      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x4fe>
    }
    
#endif /* FLASH_ACR_LATENCY */
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d008      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x60>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a12:	4ba2      	ldr	r3, [pc, #648]	; (8001c9c <HAL_RCC_ClockConfig+0x2d8>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	499f      	ldr	r1, [pc, #636]	; (8001c9c <HAL_RCC_ClockConfig+0x2d8>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	604b      	str	r3, [r1, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 8225 	beq.w	8001e7c <HAL_RCC_ClockConfig+0x4b8>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d140      	bne.n	8001abc <HAL_RCC_ClockConfig+0xf8>
 8001a3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a3e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a46:	fa93 f3a3 	rbit	r3, r3
 8001a4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return(result);
 8001a4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a52:	fab3 f383 	clz	r3, r3
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	095b      	lsrs	r3, r3, #5
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d102      	bne.n	8001a6c <HAL_RCC_ClockConfig+0xa8>
 8001a66:	4b8d      	ldr	r3, [pc, #564]	; (8001c9c <HAL_RCC_ClockConfig+0x2d8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	e00b      	b.n	8001a84 <HAL_RCC_ClockConfig+0xc0>
 8001a6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a78:	fa93 f3a3 	rbit	r3, r3
 8001a7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001a80:	4b86      	ldr	r3, [pc, #536]	; (8001c9c <HAL_RCC_ClockConfig+0x2d8>)
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a88:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001a8c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001a90:	fa92 f2a2 	rbit	r2, r2
 8001a94:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
  return(result);
 8001a98:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001a9c:	fab2 f282 	clz	r2, r2
 8001aa0:	b252      	sxtb	r2, r2
 8001aa2:	f042 0220 	orr.w	r2, r2, #32
 8001aa6:	b252      	sxtb	r2, r2
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	f002 021f 	and.w	r2, r2, #31
 8001aae:	40d3      	lsrs	r3, r2
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d170      	bne.n	8001b9a <HAL_RCC_ClockConfig+0x1d6>
        {
          return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e202      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x4fe>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d137      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x170>
 8001ac4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ac8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001acc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ad0:	fa93 f3a3 	rbit	r3, r3
 8001ad4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return(result);
 8001ad6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad8:	fab3 f383 	clz	r3, r3
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	095b      	lsrs	r3, r3, #5
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d102      	bne.n	8001af2 <HAL_RCC_ClockConfig+0x12e>
 8001aec:	4b6b      	ldr	r3, [pc, #428]	; (8001c9c <HAL_RCC_ClockConfig+0x2d8>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_ClockConfig+0x140>
 8001af2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001af6:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001afa:	fa93 f3a3 	rbit	r3, r3
 8001afe:	677b      	str	r3, [r7, #116]	; 0x74
 8001b00:	4b66      	ldr	r3, [pc, #408]	; (8001c9c <HAL_RCC_ClockConfig+0x2d8>)
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b08:	673a      	str	r2, [r7, #112]	; 0x70
 8001b0a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001b0c:	fa92 f2a2 	rbit	r2, r2
 8001b10:	66fa      	str	r2, [r7, #108]	; 0x6c
  return(result);
 8001b12:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001b14:	fab2 f282 	clz	r2, r2
 8001b18:	b252      	sxtb	r2, r2
 8001b1a:	f042 0220 	orr.w	r2, r2, #32
 8001b1e:	b252      	sxtb	r2, r2
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	f002 021f 	and.w	r2, r2, #31
 8001b26:	40d3      	lsrs	r3, r2
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d134      	bne.n	8001b9a <HAL_RCC_ClockConfig+0x1d6>
        {
          return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e1c6      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x4fe>
 8001b34:	2302      	movs	r3, #2
 8001b36:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b3a:	fa93 f3a3 	rbit	r3, r3
 8001b3e:	667b      	str	r3, [r7, #100]	; 0x64
  return(result);
 8001b40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b42:	fab3 f383 	clz	r3, r3
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	095b      	lsrs	r3, r3, #5
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d102      	bne.n	8001b5c <HAL_RCC_ClockConfig+0x198>
 8001b56:	4b51      	ldr	r3, [pc, #324]	; (8001c9c <HAL_RCC_ClockConfig+0x2d8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	e007      	b.n	8001b6c <HAL_RCC_ClockConfig+0x1a8>
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b62:	fa93 f3a3 	rbit	r3, r3
 8001b66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b68:	4b4c      	ldr	r3, [pc, #304]	; (8001c9c <HAL_RCC_ClockConfig+0x2d8>)
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001b70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b72:	fa92 f2a2 	rbit	r2, r2
 8001b76:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001b78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b7a:	fab2 f282 	clz	r2, r2
 8001b7e:	b252      	sxtb	r2, r2
 8001b80:	f042 0220 	orr.w	r2, r2, #32
 8001b84:	b252      	sxtb	r2, r2
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	f002 021f 	and.w	r2, r2, #31
 8001b8c:	40d3      	lsrs	r3, r2
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_RCC_ClockConfig+0x1d6>
        {
          return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e193      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x4fe>
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b9a:	4b40      	ldr	r3, [pc, #256]	; (8001c9c <HAL_RCC_ClockConfig+0x2d8>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f023 0203 	bic.w	r2, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	493d      	ldr	r1, [pc, #244]	; (8001c9c <HAL_RCC_ClockConfig+0x2d8>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	604b      	str	r3, [r1, #4]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bac:	f7fe fd82 	bl	80006b4 <HAL_GetTick>
 8001bb0:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d113      	bne.n	8001be4 <HAL_RCC_ClockConfig+0x220>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bbc:	e00b      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x212>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bbe:	f7fe fd79 	bl	80006b4 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_ClockConfig+0x212>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e175      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bd6:	4b31      	ldr	r3, [pc, #196]	; (8001c9c <HAL_RCC_ClockConfig+0x2d8>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d1ed      	bne.n	8001bbe <HAL_RCC_ClockConfig+0x1fa>
 8001be2:	e14b      	b.n	8001e7c <HAL_RCC_ClockConfig+0x4b8>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d11f      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x268>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bec:	e00b      	b.n	8001c06 <HAL_RCC_ClockConfig+0x242>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bee:	f7fe fd61 	bl	80006b4 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_ClockConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e15d      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c06:	4b25      	ldr	r3, [pc, #148]	; (8001c9c <HAL_RCC_ClockConfig+0x2d8>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d1ed      	bne.n	8001bee <HAL_RCC_ClockConfig+0x22a>
 8001c12:	e133      	b.n	8001e7c <HAL_RCC_ClockConfig+0x4b8>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c14:	f7fe fd4e 	bl	80006b4 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_ClockConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e14a      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c2c:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <HAL_RCC_ClockConfig+0x2d8>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 030c 	and.w	r3, r3, #12
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1ed      	bne.n	8001c14 <HAL_RCC_ClockConfig+0x250>
 8001c38:	e120      	b.n	8001e7c <HAL_RCC_ClockConfig+0x4b8>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d008      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x294>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c46:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <HAL_RCC_ClockConfig+0x2d8>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	4912      	ldr	r1, [pc, #72]	; (8001c9c <HAL_RCC_ClockConfig+0x2d8>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	604b      	str	r3, [r1, #4]
    }
    
    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 80fa 	beq.w	8001e5a <HAL_RCC_ClockConfig+0x496>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d139      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0x31e>
 8001c6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c72:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c76:	fa93 f3a3 	rbit	r3, r3
 8001c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8001c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7e:	fab3 f383 	clz	r3, r3
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	095b      	lsrs	r3, r3, #5
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d106      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0x2dc>
 8001c92:	4b02      	ldr	r3, [pc, #8]	; (8001c9c <HAL_RCC_ClockConfig+0x2d8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	e00c      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x2ee>
 8001c98:	40022000 	.word	0x40022000
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ca4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ca8:	fa93 f3a3 	rbit	r3, r3
 8001cac:	647b      	str	r3, [r7, #68]	; 0x44
 8001cae:	4b87      	ldr	r3, [pc, #540]	; (8001ecc <HAL_RCC_ClockConfig+0x508>)
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cb6:	643a      	str	r2, [r7, #64]	; 0x40
 8001cb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001cba:	fa92 f2a2 	rbit	r2, r2
 8001cbe:	63fa      	str	r2, [r7, #60]	; 0x3c
  return(result);
 8001cc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cc2:	fab2 f282 	clz	r2, r2
 8001cc6:	b252      	sxtb	r2, r2
 8001cc8:	f042 0220 	orr.w	r2, r2, #32
 8001ccc:	b252      	sxtb	r2, r2
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	f002 021f 	and.w	r2, r2, #31
 8001cd4:	40d3      	lsrs	r3, r2
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d16e      	bne.n	8001dbc <HAL_RCC_ClockConfig+0x3f8>
        {
          return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e0ef      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x4fe>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d135      	bne.n	8001d56 <HAL_RCC_ClockConfig+0x392>
 8001cea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cf2:	fa93 f3a3 	rbit	r3, r3
 8001cf6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8001cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cfa:	fab3 f383 	clz	r3, r3
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	095b      	lsrs	r3, r3, #5
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d102      	bne.n	8001d14 <HAL_RCC_ClockConfig+0x350>
 8001d0e:	4b6f      	ldr	r3, [pc, #444]	; (8001ecc <HAL_RCC_ClockConfig+0x508>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_ClockConfig+0x362>
 8001d14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d18:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1c:	fa93 f3a3 	rbit	r3, r3
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d22:	4b6a      	ldr	r3, [pc, #424]	; (8001ecc <HAL_RCC_ClockConfig+0x508>)
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d2a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d2e:	fa92 f2a2 	rbit	r2, r2
 8001d32:	627a      	str	r2, [r7, #36]	; 0x24
  return(result);
 8001d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d36:	fab2 f282 	clz	r2, r2
 8001d3a:	b252      	sxtb	r2, r2
 8001d3c:	f042 0220 	orr.w	r2, r2, #32
 8001d40:	b252      	sxtb	r2, r2
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	f002 021f 	and.w	r2, r2, #31
 8001d48:	40d3      	lsrs	r3, r2
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d134      	bne.n	8001dbc <HAL_RCC_ClockConfig+0x3f8>
        {
          return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e0b5      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x4fe>
 8001d56:	2302      	movs	r3, #2
 8001d58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5a:	6a3b      	ldr	r3, [r7, #32]
 8001d5c:	fa93 f3a3 	rbit	r3, r3
 8001d60:	61fb      	str	r3, [r7, #28]
  return(result);
 8001d62:	69fb      	ldr	r3, [r7, #28]
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d64:	fab3 f383 	clz	r3, r3
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	095b      	lsrs	r3, r3, #5
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d102      	bne.n	8001d7e <HAL_RCC_ClockConfig+0x3ba>
 8001d78:	4b54      	ldr	r3, [pc, #336]	; (8001ecc <HAL_RCC_ClockConfig+0x508>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	e007      	b.n	8001d8e <HAL_RCC_ClockConfig+0x3ca>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	fa93 f3a3 	rbit	r3, r3
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	4b50      	ldr	r3, [pc, #320]	; (8001ecc <HAL_RCC_ClockConfig+0x508>)
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	2202      	movs	r2, #2
 8001d90:	613a      	str	r2, [r7, #16]
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	fa92 f2a2 	rbit	r2, r2
 8001d98:	60fa      	str	r2, [r7, #12]
  return(result);
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	fab2 f282 	clz	r2, r2
 8001da0:	b252      	sxtb	r2, r2
 8001da2:	f042 0220 	orr.w	r2, r2, #32
 8001da6:	b252      	sxtb	r2, r2
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	f002 021f 	and.w	r2, r2, #31
 8001dae:	40d3      	lsrs	r3, r2
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_RCC_ClockConfig+0x3f8>
        {
          return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e082      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x4fe>
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dbc:	4b43      	ldr	r3, [pc, #268]	; (8001ecc <HAL_RCC_ClockConfig+0x508>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f023 0203 	bic.w	r2, r3, #3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	4940      	ldr	r1, [pc, #256]	; (8001ecc <HAL_RCC_ClockConfig+0x508>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	604b      	str	r3, [r1, #4]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dce:	f7fe fc71 	bl	80006b4 <HAL_GetTick>
 8001dd2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d113      	bne.n	8001e06 <HAL_RCC_ClockConfig+0x442>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dde:	e00b      	b.n	8001df8 <HAL_RCC_ClockConfig+0x434>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de0:	f7fe fc68 	bl	80006b4 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_ClockConfig+0x434>
          {
            return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e064      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001df8:	4b34      	ldr	r3, [pc, #208]	; (8001ecc <HAL_RCC_ClockConfig+0x508>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 030c 	and.w	r3, r3, #12
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d1ed      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x41c>
 8001e04:	e029      	b.n	8001e5a <HAL_RCC_ClockConfig+0x496>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d11f      	bne.n	8001e4e <HAL_RCC_ClockConfig+0x48a>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e0e:	e00b      	b.n	8001e28 <HAL_RCC_ClockConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e10:	f7fe fc50 	bl	80006b4 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_ClockConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e04c      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e28:	4b28      	ldr	r3, [pc, #160]	; (8001ecc <HAL_RCC_ClockConfig+0x508>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d1ed      	bne.n	8001e10 <HAL_RCC_ClockConfig+0x44c>
 8001e34:	e011      	b.n	8001e5a <HAL_RCC_ClockConfig+0x496>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e36:	f7fe fc3d 	bl	80006b4 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_ClockConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e039      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e4e:	4b1f      	ldr	r3, [pc, #124]	; (8001ecc <HAL_RCC_ClockConfig+0x508>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 030c 	and.w	r3, r3, #12
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1ed      	bne.n	8001e36 <HAL_RCC_ClockConfig+0x472>
        }
      }      
    } 
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <HAL_RCC_ClockConfig+0x50c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 0207 	bic.w	r2, r3, #7
 8001e62:	491b      	ldr	r1, [pc, #108]	; (8001ed0 <HAL_RCC_ClockConfig+0x50c>)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e6a:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <HAL_RCC_ClockConfig+0x50c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d001      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x4b8>
    {
      return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e022      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x4fe>
    }
  }
#endif /* FLASH_ACR_LATENCY */
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d008      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x4d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e88:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <HAL_RCC_ClockConfig+0x508>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	490d      	ldr	r1, [pc, #52]	; (8001ecc <HAL_RCC_ClockConfig+0x508>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d009      	beq.n	8001eba <HAL_RCC_ClockConfig+0x4f6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ea6:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <HAL_RCC_ClockConfig+0x508>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	4905      	ldr	r1, [pc, #20]	; (8001ecc <HAL_RCC_ClockConfig+0x508>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	604b      	str	r3, [r1, #4]
  }
 
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f7fe fbd0 	bl	8000660 <HAL_InitTick>
  
  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	37a0      	adds	r7, #160	; 0xa0
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40022000 	.word	0x40022000

08001ed4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed4:	b490      	push	{r4, r7}
 8001ed6:	b08e      	sub	sp, #56	; 0x38
 8001ed8:	af00      	add	r7, sp, #0
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001eda:	4b35      	ldr	r3, [pc, #212]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001edc:	1d3c      	adds	r4, r7, #4
 8001ede:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ee0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8001ee4:	4b33      	ldr	r3, [pc, #204]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eee:	2300      	movs	r3, #0
 8001ef0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8001efe:	4b2e      	ldr	r3, [pc, #184]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0xe4>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f06:	f003 030c 	and.w	r3, r3, #12
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d002      	beq.n	8001f14 <HAL_RCC_GetSysClockFreq+0x40>
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d003      	beq.n	8001f1a <HAL_RCC_GetSysClockFreq+0x46>
 8001f12:	e043      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0xc8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f14:	4b29      	ldr	r3, [pc, #164]	; (8001fbc <HAL_RCC_GetSysClockFreq+0xe8>)
 8001f16:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f18:	e043      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0xce>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8001f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f20:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001f24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f26:	6a3b      	ldr	r3, [r7, #32]
 8001f28:	fa93 f3a3 	rbit	r3, r3
 8001f2c:	61fb      	str	r3, [r7, #28]
  return(result);
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	fab3 f383 	clz	r3, r3
 8001f34:	fa22 f303 	lsr.w	r3, r2, r3
 8001f38:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f3c:	4413      	add	r3, r2
 8001f3e:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d01e      	beq.n	8001f8c <HAL_RCC_GetSysClockFreq+0xb8>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8001f4e:	4b1a      	ldr	r3, [pc, #104]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0xe4>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8001f56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	617b      	str	r3, [r7, #20]
  return(result);
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	fab3 f383 	clz	r3, r3
 8001f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f72:	4413      	add	r3, r2
 8001f74:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8001f78:	62bb      	str	r3, [r7, #40]	; 0x28
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8001f7a:	4a10      	ldr	r2, [pc, #64]	; (8001fbc <HAL_RCC_GetSysClockFreq+0xe8>)
 8001f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	fb02 f303 	mul.w	r3, r2, r3
 8001f88:	637b      	str	r3, [r7, #52]	; 0x34
 8001f8a:	e004      	b.n	8001f96 <HAL_RCC_GetSysClockFreq+0xc2>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	4a0c      	ldr	r2, [pc, #48]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xec>)
 8001f90:	fb02 f303 	mul.w	r3, r2, r3
 8001f94:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8001f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f98:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f9a:	e002      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0xce>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f9c:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <HAL_RCC_GetSysClockFreq+0xe8>)
 8001f9e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001fa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3738      	adds	r7, #56	; 0x38
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc90      	pop	{r4, r7}
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	08002ee8 	.word	0x08002ee8
 8001fb4:	08002ef8 	.word	0x08002ef8
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	007a1200 	.word	0x007a1200
 8001fc0:	003d0900 	.word	0x003d0900

08001fc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001fca:	f7ff ff83 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 8001fce:	4601      	mov	r1, r0
 8001fd0:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <HAL_RCC_GetHCLKFreq+0x44>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fd8:	23f0      	movs	r3, #240	; 0xf0
 8001fda:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	603b      	str	r3, [r7, #0]
  return(result);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	fab3 f383 	clz	r3, r3
 8001fea:	fa22 f303 	lsr.w	r3, r2, r3
 8001fee:	4a07      	ldr	r2, [pc, #28]	; (800200c <HAL_RCC_GetHCLKFreq+0x48>)
 8001ff0:	5cd3      	ldrb	r3, [r2, r3]
 8001ff2:	fa21 f303 	lsr.w	r3, r1, r3
 8001ff6:	4a06      	ldr	r2, [pc, #24]	; (8002010 <HAL_RCC_GetHCLKFreq+0x4c>)
 8001ff8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8001ffa:	4b05      	ldr	r3, [pc, #20]	; (8002010 <HAL_RCC_GetHCLKFreq+0x4c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000
 800200c:	08002efc 	.word	0x08002efc
 8002010:	20000000 	.word	0x20000000

08002014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800201a:	f7ff ffd3 	bl	8001fc4 <HAL_RCC_GetHCLKFreq>
 800201e:	4601      	mov	r1, r0
 8002020:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002028:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800202c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	fa93 f3a3 	rbit	r3, r3
 8002034:	603b      	str	r3, [r7, #0]
  return(result);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	fab3 f383 	clz	r3, r3
 800203c:	fa22 f303 	lsr.w	r3, r2, r3
 8002040:	4a04      	ldr	r2, [pc, #16]	; (8002054 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002042:	5cd3      	ldrb	r3, [r2, r3]
 8002044:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002048:	4618      	mov	r0, r3
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000
 8002054:	08002efc 	.word	0x08002efc

08002058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800205e:	f7ff ffb1 	bl	8001fc4 <HAL_RCC_GetHCLKFreq>
 8002062:	4601      	mov	r1, r0
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800206c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002070:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	fa93 f3a3 	rbit	r3, r3
 8002078:	603b      	str	r3, [r7, #0]
  return(result);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	fab3 f383 	clz	r3, r3
 8002080:	fa22 f303 	lsr.w	r3, r2, r3
 8002084:	4a04      	ldr	r2, [pc, #16]	; (8002098 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002086:	5cd3      	ldrb	r3, [r2, r3]
 8002088:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40021000 	.word	0x40021000
 8002098:	08002efc 	.word	0x08002efc

0800209c <HAL_UART_Init>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e03b      	b.n	8002126 <HAL_UART_Init+0x8a>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->State == HAL_UART_STATE_RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d106      	bne.n	80020c8 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7fe fa56 	bl	8000574 <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2202      	movs	r2, #2
 80020cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020de:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f967 	bl	80023b4 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	691a      	ldr	r2, [r3, #16]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	695a      	ldr	r2, [r3, #20]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002104:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002114:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b086      	sub	sp, #24
 8002132:	af00      	add	r7, sp, #0
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	603b      	str	r3, [r7, #0]
 800213a:	4613      	mov	r3, r2
 800213c:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tmp_state = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
  
  tmp_state = huart->State;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002148:	b2db      	uxtb	r3, r3
 800214a:	617b      	str	r3, [r7, #20]
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d003      	beq.n	800215a <HAL_UART_Transmit+0x2c>
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2b22      	cmp	r3, #34	; 0x22
 8002156:	f040 808e 	bne.w	8002276 <HAL_UART_Transmit+0x148>
  {
    if((pData == NULL) || (Size == 0))
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d002      	beq.n	8002166 <HAL_UART_Transmit+0x38>
 8002160:	88fb      	ldrh	r3, [r7, #6]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_UART_Transmit+0x3c>
    {
      return  HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e086      	b.n	8002278 <HAL_UART_Transmit+0x14a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <HAL_UART_Transmit+0x4a>
 8002174:	2302      	movs	r3, #2
 8002176:	e07f      	b.n	8002278 <HAL_UART_Transmit+0x14a>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b22      	cmp	r3, #34	; 0x22
 8002190:	d104      	bne.n	800219c <HAL_UART_Transmit+0x6e>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2232      	movs	r2, #50	; 0x32
 8002196:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800219a:	e003      	b.n	80021a4 <HAL_UART_Transmit+0x76>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2212      	movs	r2, #18
 80021a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    huart->TxXferSize = Size;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	88fa      	ldrh	r2, [r7, #6]
 80021a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	88fa      	ldrh	r2, [r7, #6]
 80021ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0)
 80021b0:	e03d      	b.n	800222e <HAL_UART_Transmit+0x100>
    {
      huart->TxXferCount--;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021b6:	3b01      	subs	r3, #1
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021c6:	d120      	bne.n	800220a <HAL_UART_Transmit+0xdc>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	2200      	movs	r2, #0
 80021cc:	2180      	movs	r1, #128	; 0x80
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 f856 	bl	8002280 <UART_WaitOnFlagUntilTimeout>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_UART_Transmit+0xb0>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e04c      	b.n	8002278 <HAL_UART_Transmit+0x14a>
        }
        tmp = (uint16_t*) pData;
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021f0:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d103      	bne.n	8002202 <HAL_UART_Transmit+0xd4>
        {
          pData +=2;
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	3302      	adds	r3, #2
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	e015      	b.n	800222e <HAL_UART_Transmit+0x100>
        }
        else
        { 
          pData +=1;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	3301      	adds	r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	e011      	b.n	800222e <HAL_UART_Transmit+0x100>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	2200      	movs	r2, #0
 800220e:	2180      	movs	r1, #128	; 0x80
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 f835 	bl	8002280 <UART_WaitOnFlagUntilTimeout>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <HAL_UART_Transmit+0xf2>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e02b      	b.n	8002278 <HAL_UART_Transmit+0x14a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	1c5a      	adds	r2, r3, #1
 8002224:	60ba      	str	r2, [r7, #8]
 8002226:	781a      	ldrb	r2, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1bd      	bne.n	80021b2 <HAL_UART_Transmit+0x84>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2200      	movs	r2, #0
 800223a:	2140      	movs	r1, #64	; 0x40
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 f81f 	bl	8002280 <UART_WaitOnFlagUntilTimeout>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_UART_Transmit+0x11e>
    { 
      return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e015      	b.n	8002278 <HAL_UART_Transmit+0x14a>
    }

    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b32      	cmp	r3, #50	; 0x32
 8002256:	d104      	bne.n	8002262 <HAL_UART_Transmit+0x134>
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2222      	movs	r2, #34	; 0x22
 800225c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002260:	e003      	b.n	800226a <HAL_UART_Transmit+0x13c>
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	e000      	b.n	8002278 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002276:	2302      	movs	r3, #2
  }
}
 8002278:	4618      	mov	r0, r3
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	603b      	str	r3, [r7, #0]
 800228c:	4613      	mov	r3, r2
 800228e:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002294:	f7fe fa0e 	bl	80006b4 <HAL_GetTick>
 8002298:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d17b      	bne.n	8002398 <UART_WaitOnFlagUntilTimeout+0x118>
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80022a0:	e038      	b.n	8002314 <UART_WaitOnFlagUntilTimeout+0x94>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a8:	d034      	beq.n	8002314 <UART_WaitOnFlagUntilTimeout+0x94>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d007      	beq.n	80022c0 <UART_WaitOnFlagUntilTimeout+0x40>
 80022b0:	f7fe fa00 	bl	80006b4 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d229      	bcs.n	8002314 <UART_WaitOnFlagUntilTimeout+0x94>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022ce:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0220 	bic.w	r2, r2, #32
 80022de:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022ee:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	695a      	ldr	r2, [r3, #20]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0201 	bic.w	r2, r2, #1
 80022fe:	615a      	str	r2, [r3, #20]

          huart->State= HAL_UART_STATE_READY;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e04a      	b.n	80023aa <UART_WaitOnFlagUntilTimeout+0x12a>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	4013      	ands	r3, r2
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	429a      	cmp	r2, r3
 8002322:	d1be      	bne.n	80022a2 <UART_WaitOnFlagUntilTimeout+0x22>
 8002324:	e040      	b.n	80023a8 <UART_WaitOnFlagUntilTimeout+0x128>
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232c:	d034      	beq.n	8002398 <UART_WaitOnFlagUntilTimeout+0x118>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d007      	beq.n	8002344 <UART_WaitOnFlagUntilTimeout+0xc4>
 8002334:	f7fe f9be 	bl	80006b4 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d229      	bcs.n	8002398 <UART_WaitOnFlagUntilTimeout+0x118>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002352:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0220 	bic.w	r2, r2, #32
 8002362:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002372:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	695a      	ldr	r2, [r3, #20]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 0201 	bic.w	r2, r2, #1
 8002382:	615a      	str	r2, [r3, #20]

          huart->State= HAL_UART_STATE_READY;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e008      	b.n	80023aa <UART_WaitOnFlagUntilTimeout+0x12a>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	4013      	ands	r3, r2
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d0be      	beq.n	8002326 <UART_WaitOnFlagUntilTimeout+0xa6>
        }
      }
    }
  }
  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023b4:	b5b0      	push	{r4, r5, r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00;
 80023bc:	2300      	movs	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	611a      	str	r2, [r3, #16]
  /*------- UART-associated USART registers setting : CR1 Configuration ------*/
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	431a      	orrs	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80023f2:	f023 030c 	bic.w	r3, r3, #12
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6812      	ldr	r2, [r2, #0]
 80023fa:	68f9      	ldr	r1, [r7, #12]
 80023fc:	430b      	orrs	r3, r1
 80023fe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699a      	ldr	r2, [r3, #24]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	615a      	str	r2, [r3, #20]
  
  /*------- UART-associated USART registers setting : BRR Configuration ------*/
  if((huart->Instance == USART1))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a44      	ldr	r2, [pc, #272]	; (800252c <UART_SetConfig+0x178>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d140      	bne.n	80024a2 <UART_SetConfig+0xee>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002420:	f7ff fe1a 	bl	8002058 <HAL_RCC_GetPCLK2Freq>
 8002424:	4602      	mov	r2, r0
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	009a      	lsls	r2, r3, #2
 800242e:	441a      	add	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	fbb2 f3f3 	udiv	r3, r2, r3
 800243a:	4a3d      	ldr	r2, [pc, #244]	; (8002530 <UART_SetConfig+0x17c>)
 800243c:	fba2 2303 	umull	r2, r3, r2, r3
 8002440:	095b      	lsrs	r3, r3, #5
 8002442:	011c      	lsls	r4, r3, #4
 8002444:	f7ff fe08 	bl	8002058 <HAL_RCC_GetPCLK2Freq>
 8002448:	4602      	mov	r2, r0
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	009a      	lsls	r2, r3, #2
 8002452:	441a      	add	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	fbb2 f5f3 	udiv	r5, r2, r3
 800245e:	f7ff fdfb 	bl	8002058 <HAL_RCC_GetPCLK2Freq>
 8002462:	4602      	mov	r2, r0
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	009a      	lsls	r2, r3, #2
 800246c:	441a      	add	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	fbb2 f3f3 	udiv	r3, r2, r3
 8002478:	4a2d      	ldr	r2, [pc, #180]	; (8002530 <UART_SetConfig+0x17c>)
 800247a:	fba2 2303 	umull	r2, r3, r2, r3
 800247e:	095b      	lsrs	r3, r3, #5
 8002480:	2264      	movs	r2, #100	; 0x64
 8002482:	fb02 f303 	mul.w	r3, r2, r3
 8002486:	1aeb      	subs	r3, r5, r3
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	3332      	adds	r3, #50	; 0x32
 800248c:	4a28      	ldr	r2, [pc, #160]	; (8002530 <UART_SetConfig+0x17c>)
 800248e:	fba2 2303 	umull	r2, r3, r2, r3
 8002492:	095b      	lsrs	r3, r3, #5
 8002494:	f003 020f 	and.w	r2, r3, #15
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4322      	orrs	r2, r4
 800249e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
}
 80024a0:	e03f      	b.n	8002522 <UART_SetConfig+0x16e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80024a2:	f7ff fdb7 	bl	8002014 <HAL_RCC_GetPCLK1Freq>
 80024a6:	4602      	mov	r2, r0
 80024a8:	4613      	mov	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	009a      	lsls	r2, r3, #2
 80024b0:	441a      	add	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024bc:	4a1c      	ldr	r2, [pc, #112]	; (8002530 <UART_SetConfig+0x17c>)
 80024be:	fba2 2303 	umull	r2, r3, r2, r3
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	011c      	lsls	r4, r3, #4
 80024c6:	f7ff fda5 	bl	8002014 <HAL_RCC_GetPCLK1Freq>
 80024ca:	4602      	mov	r2, r0
 80024cc:	4613      	mov	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	009a      	lsls	r2, r3, #2
 80024d4:	441a      	add	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	fbb2 f5f3 	udiv	r5, r2, r3
 80024e0:	f7ff fd98 	bl	8002014 <HAL_RCC_GetPCLK1Freq>
 80024e4:	4602      	mov	r2, r0
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	009a      	lsls	r2, r3, #2
 80024ee:	441a      	add	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fa:	4a0d      	ldr	r2, [pc, #52]	; (8002530 <UART_SetConfig+0x17c>)
 80024fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002500:	095b      	lsrs	r3, r3, #5
 8002502:	2264      	movs	r2, #100	; 0x64
 8002504:	fb02 f303 	mul.w	r3, r2, r3
 8002508:	1aeb      	subs	r3, r5, r3
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	3332      	adds	r3, #50	; 0x32
 800250e:	4a08      	ldr	r2, [pc, #32]	; (8002530 <UART_SetConfig+0x17c>)
 8002510:	fba2 2303 	umull	r2, r3, r2, r3
 8002514:	095b      	lsrs	r3, r3, #5
 8002516:	f003 020f 	and.w	r2, r3, #15
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4322      	orrs	r2, r4
 8002520:	609a      	str	r2, [r3, #8]
}
 8002522:	bf00      	nop
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bdb0      	pop	{r4, r5, r7, pc}
 800252a:	bf00      	nop
 800252c:	40013800 	.word	0x40013800
 8002530:	51eb851f 	.word	0x51eb851f

08002534 <__errno>:
 8002534:	4b01      	ldr	r3, [pc, #4]	; (800253c <__errno+0x8>)
 8002536:	6818      	ldr	r0, [r3, #0]
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	20000004 	.word	0x20000004

08002540 <__libc_init_array>:
 8002540:	b570      	push	{r4, r5, r6, lr}
 8002542:	2500      	movs	r5, #0
 8002544:	4e0c      	ldr	r6, [pc, #48]	; (8002578 <__libc_init_array+0x38>)
 8002546:	4c0d      	ldr	r4, [pc, #52]	; (800257c <__libc_init_array+0x3c>)
 8002548:	1ba4      	subs	r4, r4, r6
 800254a:	10a4      	asrs	r4, r4, #2
 800254c:	42a5      	cmp	r5, r4
 800254e:	d109      	bne.n	8002564 <__libc_init_array+0x24>
 8002550:	f000 fc88 	bl	8002e64 <_init>
 8002554:	2500      	movs	r5, #0
 8002556:	4e0a      	ldr	r6, [pc, #40]	; (8002580 <__libc_init_array+0x40>)
 8002558:	4c0a      	ldr	r4, [pc, #40]	; (8002584 <__libc_init_array+0x44>)
 800255a:	1ba4      	subs	r4, r4, r6
 800255c:	10a4      	asrs	r4, r4, #2
 800255e:	42a5      	cmp	r5, r4
 8002560:	d105      	bne.n	800256e <__libc_init_array+0x2e>
 8002562:	bd70      	pop	{r4, r5, r6, pc}
 8002564:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002568:	4798      	blx	r3
 800256a:	3501      	adds	r5, #1
 800256c:	e7ee      	b.n	800254c <__libc_init_array+0xc>
 800256e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002572:	4798      	blx	r3
 8002574:	3501      	adds	r5, #1
 8002576:	e7f2      	b.n	800255e <__libc_init_array+0x1e>
 8002578:	08002f70 	.word	0x08002f70
 800257c:	08002f70 	.word	0x08002f70
 8002580:	08002f70 	.word	0x08002f70
 8002584:	08002f74 	.word	0x08002f74

08002588 <memset>:
 8002588:	4603      	mov	r3, r0
 800258a:	4402      	add	r2, r0
 800258c:	4293      	cmp	r3, r2
 800258e:	d100      	bne.n	8002592 <memset+0xa>
 8002590:	4770      	bx	lr
 8002592:	f803 1b01 	strb.w	r1, [r3], #1
 8002596:	e7f9      	b.n	800258c <memset+0x4>

08002598 <_puts_r>:
 8002598:	b570      	push	{r4, r5, r6, lr}
 800259a:	460e      	mov	r6, r1
 800259c:	4605      	mov	r5, r0
 800259e:	b118      	cbz	r0, 80025a8 <_puts_r+0x10>
 80025a0:	6983      	ldr	r3, [r0, #24]
 80025a2:	b90b      	cbnz	r3, 80025a8 <_puts_r+0x10>
 80025a4:	f000 fa0c 	bl	80029c0 <__sinit>
 80025a8:	69ab      	ldr	r3, [r5, #24]
 80025aa:	68ac      	ldr	r4, [r5, #8]
 80025ac:	b913      	cbnz	r3, 80025b4 <_puts_r+0x1c>
 80025ae:	4628      	mov	r0, r5
 80025b0:	f000 fa06 	bl	80029c0 <__sinit>
 80025b4:	4b23      	ldr	r3, [pc, #140]	; (8002644 <_puts_r+0xac>)
 80025b6:	429c      	cmp	r4, r3
 80025b8:	d117      	bne.n	80025ea <_puts_r+0x52>
 80025ba:	686c      	ldr	r4, [r5, #4]
 80025bc:	89a3      	ldrh	r3, [r4, #12]
 80025be:	071b      	lsls	r3, r3, #28
 80025c0:	d51d      	bpl.n	80025fe <_puts_r+0x66>
 80025c2:	6923      	ldr	r3, [r4, #16]
 80025c4:	b1db      	cbz	r3, 80025fe <_puts_r+0x66>
 80025c6:	3e01      	subs	r6, #1
 80025c8:	68a3      	ldr	r3, [r4, #8]
 80025ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80025ce:	3b01      	subs	r3, #1
 80025d0:	60a3      	str	r3, [r4, #8]
 80025d2:	b9e9      	cbnz	r1, 8002610 <_puts_r+0x78>
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	da2e      	bge.n	8002636 <_puts_r+0x9e>
 80025d8:	4622      	mov	r2, r4
 80025da:	210a      	movs	r1, #10
 80025dc:	4628      	mov	r0, r5
 80025de:	f000 f83f 	bl	8002660 <__swbuf_r>
 80025e2:	3001      	adds	r0, #1
 80025e4:	d011      	beq.n	800260a <_puts_r+0x72>
 80025e6:	200a      	movs	r0, #10
 80025e8:	e011      	b.n	800260e <_puts_r+0x76>
 80025ea:	4b17      	ldr	r3, [pc, #92]	; (8002648 <_puts_r+0xb0>)
 80025ec:	429c      	cmp	r4, r3
 80025ee:	d101      	bne.n	80025f4 <_puts_r+0x5c>
 80025f0:	68ac      	ldr	r4, [r5, #8]
 80025f2:	e7e3      	b.n	80025bc <_puts_r+0x24>
 80025f4:	4b15      	ldr	r3, [pc, #84]	; (800264c <_puts_r+0xb4>)
 80025f6:	429c      	cmp	r4, r3
 80025f8:	bf08      	it	eq
 80025fa:	68ec      	ldreq	r4, [r5, #12]
 80025fc:	e7de      	b.n	80025bc <_puts_r+0x24>
 80025fe:	4621      	mov	r1, r4
 8002600:	4628      	mov	r0, r5
 8002602:	f000 f87f 	bl	8002704 <__swsetup_r>
 8002606:	2800      	cmp	r0, #0
 8002608:	d0dd      	beq.n	80025c6 <_puts_r+0x2e>
 800260a:	f04f 30ff 	mov.w	r0, #4294967295
 800260e:	bd70      	pop	{r4, r5, r6, pc}
 8002610:	2b00      	cmp	r3, #0
 8002612:	da04      	bge.n	800261e <_puts_r+0x86>
 8002614:	69a2      	ldr	r2, [r4, #24]
 8002616:	429a      	cmp	r2, r3
 8002618:	dc06      	bgt.n	8002628 <_puts_r+0x90>
 800261a:	290a      	cmp	r1, #10
 800261c:	d004      	beq.n	8002628 <_puts_r+0x90>
 800261e:	6823      	ldr	r3, [r4, #0]
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	6022      	str	r2, [r4, #0]
 8002624:	7019      	strb	r1, [r3, #0]
 8002626:	e7cf      	b.n	80025c8 <_puts_r+0x30>
 8002628:	4622      	mov	r2, r4
 800262a:	4628      	mov	r0, r5
 800262c:	f000 f818 	bl	8002660 <__swbuf_r>
 8002630:	3001      	adds	r0, #1
 8002632:	d1c9      	bne.n	80025c8 <_puts_r+0x30>
 8002634:	e7e9      	b.n	800260a <_puts_r+0x72>
 8002636:	200a      	movs	r0, #10
 8002638:	6823      	ldr	r3, [r4, #0]
 800263a:	1c5a      	adds	r2, r3, #1
 800263c:	6022      	str	r2, [r4, #0]
 800263e:	7018      	strb	r0, [r3, #0]
 8002640:	e7e5      	b.n	800260e <_puts_r+0x76>
 8002642:	bf00      	nop
 8002644:	08002f30 	.word	0x08002f30
 8002648:	08002f50 	.word	0x08002f50
 800264c:	08002f10 	.word	0x08002f10

08002650 <puts>:
 8002650:	4b02      	ldr	r3, [pc, #8]	; (800265c <puts+0xc>)
 8002652:	4601      	mov	r1, r0
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	f7ff bf9f 	b.w	8002598 <_puts_r>
 800265a:	bf00      	nop
 800265c:	20000004 	.word	0x20000004

08002660 <__swbuf_r>:
 8002660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002662:	460e      	mov	r6, r1
 8002664:	4614      	mov	r4, r2
 8002666:	4605      	mov	r5, r0
 8002668:	b118      	cbz	r0, 8002672 <__swbuf_r+0x12>
 800266a:	6983      	ldr	r3, [r0, #24]
 800266c:	b90b      	cbnz	r3, 8002672 <__swbuf_r+0x12>
 800266e:	f000 f9a7 	bl	80029c0 <__sinit>
 8002672:	4b21      	ldr	r3, [pc, #132]	; (80026f8 <__swbuf_r+0x98>)
 8002674:	429c      	cmp	r4, r3
 8002676:	d12a      	bne.n	80026ce <__swbuf_r+0x6e>
 8002678:	686c      	ldr	r4, [r5, #4]
 800267a:	69a3      	ldr	r3, [r4, #24]
 800267c:	60a3      	str	r3, [r4, #8]
 800267e:	89a3      	ldrh	r3, [r4, #12]
 8002680:	071a      	lsls	r2, r3, #28
 8002682:	d52e      	bpl.n	80026e2 <__swbuf_r+0x82>
 8002684:	6923      	ldr	r3, [r4, #16]
 8002686:	b363      	cbz	r3, 80026e2 <__swbuf_r+0x82>
 8002688:	6923      	ldr	r3, [r4, #16]
 800268a:	6820      	ldr	r0, [r4, #0]
 800268c:	b2f6      	uxtb	r6, r6
 800268e:	1ac0      	subs	r0, r0, r3
 8002690:	6963      	ldr	r3, [r4, #20]
 8002692:	4637      	mov	r7, r6
 8002694:	4283      	cmp	r3, r0
 8002696:	dc04      	bgt.n	80026a2 <__swbuf_r+0x42>
 8002698:	4621      	mov	r1, r4
 800269a:	4628      	mov	r0, r5
 800269c:	f000 f926 	bl	80028ec <_fflush_r>
 80026a0:	bb28      	cbnz	r0, 80026ee <__swbuf_r+0x8e>
 80026a2:	68a3      	ldr	r3, [r4, #8]
 80026a4:	3001      	adds	r0, #1
 80026a6:	3b01      	subs	r3, #1
 80026a8:	60a3      	str	r3, [r4, #8]
 80026aa:	6823      	ldr	r3, [r4, #0]
 80026ac:	1c5a      	adds	r2, r3, #1
 80026ae:	6022      	str	r2, [r4, #0]
 80026b0:	701e      	strb	r6, [r3, #0]
 80026b2:	6963      	ldr	r3, [r4, #20]
 80026b4:	4283      	cmp	r3, r0
 80026b6:	d004      	beq.n	80026c2 <__swbuf_r+0x62>
 80026b8:	89a3      	ldrh	r3, [r4, #12]
 80026ba:	07db      	lsls	r3, r3, #31
 80026bc:	d519      	bpl.n	80026f2 <__swbuf_r+0x92>
 80026be:	2e0a      	cmp	r6, #10
 80026c0:	d117      	bne.n	80026f2 <__swbuf_r+0x92>
 80026c2:	4621      	mov	r1, r4
 80026c4:	4628      	mov	r0, r5
 80026c6:	f000 f911 	bl	80028ec <_fflush_r>
 80026ca:	b190      	cbz	r0, 80026f2 <__swbuf_r+0x92>
 80026cc:	e00f      	b.n	80026ee <__swbuf_r+0x8e>
 80026ce:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <__swbuf_r+0x9c>)
 80026d0:	429c      	cmp	r4, r3
 80026d2:	d101      	bne.n	80026d8 <__swbuf_r+0x78>
 80026d4:	68ac      	ldr	r4, [r5, #8]
 80026d6:	e7d0      	b.n	800267a <__swbuf_r+0x1a>
 80026d8:	4b09      	ldr	r3, [pc, #36]	; (8002700 <__swbuf_r+0xa0>)
 80026da:	429c      	cmp	r4, r3
 80026dc:	bf08      	it	eq
 80026de:	68ec      	ldreq	r4, [r5, #12]
 80026e0:	e7cb      	b.n	800267a <__swbuf_r+0x1a>
 80026e2:	4621      	mov	r1, r4
 80026e4:	4628      	mov	r0, r5
 80026e6:	f000 f80d 	bl	8002704 <__swsetup_r>
 80026ea:	2800      	cmp	r0, #0
 80026ec:	d0cc      	beq.n	8002688 <__swbuf_r+0x28>
 80026ee:	f04f 37ff 	mov.w	r7, #4294967295
 80026f2:	4638      	mov	r0, r7
 80026f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026f6:	bf00      	nop
 80026f8:	08002f30 	.word	0x08002f30
 80026fc:	08002f50 	.word	0x08002f50
 8002700:	08002f10 	.word	0x08002f10

08002704 <__swsetup_r>:
 8002704:	4b32      	ldr	r3, [pc, #200]	; (80027d0 <__swsetup_r+0xcc>)
 8002706:	b570      	push	{r4, r5, r6, lr}
 8002708:	681d      	ldr	r5, [r3, #0]
 800270a:	4606      	mov	r6, r0
 800270c:	460c      	mov	r4, r1
 800270e:	b125      	cbz	r5, 800271a <__swsetup_r+0x16>
 8002710:	69ab      	ldr	r3, [r5, #24]
 8002712:	b913      	cbnz	r3, 800271a <__swsetup_r+0x16>
 8002714:	4628      	mov	r0, r5
 8002716:	f000 f953 	bl	80029c0 <__sinit>
 800271a:	4b2e      	ldr	r3, [pc, #184]	; (80027d4 <__swsetup_r+0xd0>)
 800271c:	429c      	cmp	r4, r3
 800271e:	d10f      	bne.n	8002740 <__swsetup_r+0x3c>
 8002720:	686c      	ldr	r4, [r5, #4]
 8002722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002726:	b29a      	uxth	r2, r3
 8002728:	0715      	lsls	r5, r2, #28
 800272a:	d42c      	bmi.n	8002786 <__swsetup_r+0x82>
 800272c:	06d0      	lsls	r0, r2, #27
 800272e:	d411      	bmi.n	8002754 <__swsetup_r+0x50>
 8002730:	2209      	movs	r2, #9
 8002732:	6032      	str	r2, [r6, #0]
 8002734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002738:	81a3      	strh	r3, [r4, #12]
 800273a:	f04f 30ff 	mov.w	r0, #4294967295
 800273e:	e03e      	b.n	80027be <__swsetup_r+0xba>
 8002740:	4b25      	ldr	r3, [pc, #148]	; (80027d8 <__swsetup_r+0xd4>)
 8002742:	429c      	cmp	r4, r3
 8002744:	d101      	bne.n	800274a <__swsetup_r+0x46>
 8002746:	68ac      	ldr	r4, [r5, #8]
 8002748:	e7eb      	b.n	8002722 <__swsetup_r+0x1e>
 800274a:	4b24      	ldr	r3, [pc, #144]	; (80027dc <__swsetup_r+0xd8>)
 800274c:	429c      	cmp	r4, r3
 800274e:	bf08      	it	eq
 8002750:	68ec      	ldreq	r4, [r5, #12]
 8002752:	e7e6      	b.n	8002722 <__swsetup_r+0x1e>
 8002754:	0751      	lsls	r1, r2, #29
 8002756:	d512      	bpl.n	800277e <__swsetup_r+0x7a>
 8002758:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800275a:	b141      	cbz	r1, 800276e <__swsetup_r+0x6a>
 800275c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002760:	4299      	cmp	r1, r3
 8002762:	d002      	beq.n	800276a <__swsetup_r+0x66>
 8002764:	4630      	mov	r0, r6
 8002766:	f000 fa19 	bl	8002b9c <_free_r>
 800276a:	2300      	movs	r3, #0
 800276c:	6363      	str	r3, [r4, #52]	; 0x34
 800276e:	89a3      	ldrh	r3, [r4, #12]
 8002770:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002774:	81a3      	strh	r3, [r4, #12]
 8002776:	2300      	movs	r3, #0
 8002778:	6063      	str	r3, [r4, #4]
 800277a:	6923      	ldr	r3, [r4, #16]
 800277c:	6023      	str	r3, [r4, #0]
 800277e:	89a3      	ldrh	r3, [r4, #12]
 8002780:	f043 0308 	orr.w	r3, r3, #8
 8002784:	81a3      	strh	r3, [r4, #12]
 8002786:	6923      	ldr	r3, [r4, #16]
 8002788:	b94b      	cbnz	r3, 800279e <__swsetup_r+0x9a>
 800278a:	89a3      	ldrh	r3, [r4, #12]
 800278c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002794:	d003      	beq.n	800279e <__swsetup_r+0x9a>
 8002796:	4621      	mov	r1, r4
 8002798:	4630      	mov	r0, r6
 800279a:	f000 f9bf 	bl	8002b1c <__smakebuf_r>
 800279e:	89a2      	ldrh	r2, [r4, #12]
 80027a0:	f012 0301 	ands.w	r3, r2, #1
 80027a4:	d00c      	beq.n	80027c0 <__swsetup_r+0xbc>
 80027a6:	2300      	movs	r3, #0
 80027a8:	60a3      	str	r3, [r4, #8]
 80027aa:	6963      	ldr	r3, [r4, #20]
 80027ac:	425b      	negs	r3, r3
 80027ae:	61a3      	str	r3, [r4, #24]
 80027b0:	6923      	ldr	r3, [r4, #16]
 80027b2:	b953      	cbnz	r3, 80027ca <__swsetup_r+0xc6>
 80027b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027b8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80027bc:	d1ba      	bne.n	8002734 <__swsetup_r+0x30>
 80027be:	bd70      	pop	{r4, r5, r6, pc}
 80027c0:	0792      	lsls	r2, r2, #30
 80027c2:	bf58      	it	pl
 80027c4:	6963      	ldrpl	r3, [r4, #20]
 80027c6:	60a3      	str	r3, [r4, #8]
 80027c8:	e7f2      	b.n	80027b0 <__swsetup_r+0xac>
 80027ca:	2000      	movs	r0, #0
 80027cc:	e7f7      	b.n	80027be <__swsetup_r+0xba>
 80027ce:	bf00      	nop
 80027d0:	20000004 	.word	0x20000004
 80027d4:	08002f30 	.word	0x08002f30
 80027d8:	08002f50 	.word	0x08002f50
 80027dc:	08002f10 	.word	0x08002f10

080027e0 <__sflush_r>:
 80027e0:	898a      	ldrh	r2, [r1, #12]
 80027e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027e6:	4605      	mov	r5, r0
 80027e8:	0710      	lsls	r0, r2, #28
 80027ea:	460c      	mov	r4, r1
 80027ec:	d458      	bmi.n	80028a0 <__sflush_r+0xc0>
 80027ee:	684b      	ldr	r3, [r1, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	dc05      	bgt.n	8002800 <__sflush_r+0x20>
 80027f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	dc02      	bgt.n	8002800 <__sflush_r+0x20>
 80027fa:	2000      	movs	r0, #0
 80027fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002800:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002802:	2e00      	cmp	r6, #0
 8002804:	d0f9      	beq.n	80027fa <__sflush_r+0x1a>
 8002806:	2300      	movs	r3, #0
 8002808:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800280c:	682f      	ldr	r7, [r5, #0]
 800280e:	6a21      	ldr	r1, [r4, #32]
 8002810:	602b      	str	r3, [r5, #0]
 8002812:	d032      	beq.n	800287a <__sflush_r+0x9a>
 8002814:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002816:	89a3      	ldrh	r3, [r4, #12]
 8002818:	075a      	lsls	r2, r3, #29
 800281a:	d505      	bpl.n	8002828 <__sflush_r+0x48>
 800281c:	6863      	ldr	r3, [r4, #4]
 800281e:	1ac0      	subs	r0, r0, r3
 8002820:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002822:	b10b      	cbz	r3, 8002828 <__sflush_r+0x48>
 8002824:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002826:	1ac0      	subs	r0, r0, r3
 8002828:	2300      	movs	r3, #0
 800282a:	4602      	mov	r2, r0
 800282c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800282e:	6a21      	ldr	r1, [r4, #32]
 8002830:	4628      	mov	r0, r5
 8002832:	47b0      	blx	r6
 8002834:	1c43      	adds	r3, r0, #1
 8002836:	89a3      	ldrh	r3, [r4, #12]
 8002838:	d106      	bne.n	8002848 <__sflush_r+0x68>
 800283a:	6829      	ldr	r1, [r5, #0]
 800283c:	291d      	cmp	r1, #29
 800283e:	d848      	bhi.n	80028d2 <__sflush_r+0xf2>
 8002840:	4a29      	ldr	r2, [pc, #164]	; (80028e8 <__sflush_r+0x108>)
 8002842:	40ca      	lsrs	r2, r1
 8002844:	07d6      	lsls	r6, r2, #31
 8002846:	d544      	bpl.n	80028d2 <__sflush_r+0xf2>
 8002848:	2200      	movs	r2, #0
 800284a:	6062      	str	r2, [r4, #4]
 800284c:	6922      	ldr	r2, [r4, #16]
 800284e:	04d9      	lsls	r1, r3, #19
 8002850:	6022      	str	r2, [r4, #0]
 8002852:	d504      	bpl.n	800285e <__sflush_r+0x7e>
 8002854:	1c42      	adds	r2, r0, #1
 8002856:	d101      	bne.n	800285c <__sflush_r+0x7c>
 8002858:	682b      	ldr	r3, [r5, #0]
 800285a:	b903      	cbnz	r3, 800285e <__sflush_r+0x7e>
 800285c:	6560      	str	r0, [r4, #84]	; 0x54
 800285e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002860:	602f      	str	r7, [r5, #0]
 8002862:	2900      	cmp	r1, #0
 8002864:	d0c9      	beq.n	80027fa <__sflush_r+0x1a>
 8002866:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800286a:	4299      	cmp	r1, r3
 800286c:	d002      	beq.n	8002874 <__sflush_r+0x94>
 800286e:	4628      	mov	r0, r5
 8002870:	f000 f994 	bl	8002b9c <_free_r>
 8002874:	2000      	movs	r0, #0
 8002876:	6360      	str	r0, [r4, #52]	; 0x34
 8002878:	e7c0      	b.n	80027fc <__sflush_r+0x1c>
 800287a:	2301      	movs	r3, #1
 800287c:	4628      	mov	r0, r5
 800287e:	47b0      	blx	r6
 8002880:	1c41      	adds	r1, r0, #1
 8002882:	d1c8      	bne.n	8002816 <__sflush_r+0x36>
 8002884:	682b      	ldr	r3, [r5, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0c5      	beq.n	8002816 <__sflush_r+0x36>
 800288a:	2b1d      	cmp	r3, #29
 800288c:	d001      	beq.n	8002892 <__sflush_r+0xb2>
 800288e:	2b16      	cmp	r3, #22
 8002890:	d101      	bne.n	8002896 <__sflush_r+0xb6>
 8002892:	602f      	str	r7, [r5, #0]
 8002894:	e7b1      	b.n	80027fa <__sflush_r+0x1a>
 8002896:	89a3      	ldrh	r3, [r4, #12]
 8002898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800289c:	81a3      	strh	r3, [r4, #12]
 800289e:	e7ad      	b.n	80027fc <__sflush_r+0x1c>
 80028a0:	690f      	ldr	r7, [r1, #16]
 80028a2:	2f00      	cmp	r7, #0
 80028a4:	d0a9      	beq.n	80027fa <__sflush_r+0x1a>
 80028a6:	0793      	lsls	r3, r2, #30
 80028a8:	bf18      	it	ne
 80028aa:	2300      	movne	r3, #0
 80028ac:	680e      	ldr	r6, [r1, #0]
 80028ae:	bf08      	it	eq
 80028b0:	694b      	ldreq	r3, [r1, #20]
 80028b2:	eba6 0807 	sub.w	r8, r6, r7
 80028b6:	600f      	str	r7, [r1, #0]
 80028b8:	608b      	str	r3, [r1, #8]
 80028ba:	f1b8 0f00 	cmp.w	r8, #0
 80028be:	dd9c      	ble.n	80027fa <__sflush_r+0x1a>
 80028c0:	4643      	mov	r3, r8
 80028c2:	463a      	mov	r2, r7
 80028c4:	6a21      	ldr	r1, [r4, #32]
 80028c6:	4628      	mov	r0, r5
 80028c8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80028ca:	47b0      	blx	r6
 80028cc:	2800      	cmp	r0, #0
 80028ce:	dc06      	bgt.n	80028de <__sflush_r+0xfe>
 80028d0:	89a3      	ldrh	r3, [r4, #12]
 80028d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028d6:	81a3      	strh	r3, [r4, #12]
 80028d8:	f04f 30ff 	mov.w	r0, #4294967295
 80028dc:	e78e      	b.n	80027fc <__sflush_r+0x1c>
 80028de:	4407      	add	r7, r0
 80028e0:	eba8 0800 	sub.w	r8, r8, r0
 80028e4:	e7e9      	b.n	80028ba <__sflush_r+0xda>
 80028e6:	bf00      	nop
 80028e8:	20400001 	.word	0x20400001

080028ec <_fflush_r>:
 80028ec:	b538      	push	{r3, r4, r5, lr}
 80028ee:	690b      	ldr	r3, [r1, #16]
 80028f0:	4605      	mov	r5, r0
 80028f2:	460c      	mov	r4, r1
 80028f4:	b1db      	cbz	r3, 800292e <_fflush_r+0x42>
 80028f6:	b118      	cbz	r0, 8002900 <_fflush_r+0x14>
 80028f8:	6983      	ldr	r3, [r0, #24]
 80028fa:	b90b      	cbnz	r3, 8002900 <_fflush_r+0x14>
 80028fc:	f000 f860 	bl	80029c0 <__sinit>
 8002900:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <_fflush_r+0x48>)
 8002902:	429c      	cmp	r4, r3
 8002904:	d109      	bne.n	800291a <_fflush_r+0x2e>
 8002906:	686c      	ldr	r4, [r5, #4]
 8002908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800290c:	b17b      	cbz	r3, 800292e <_fflush_r+0x42>
 800290e:	4621      	mov	r1, r4
 8002910:	4628      	mov	r0, r5
 8002912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002916:	f7ff bf63 	b.w	80027e0 <__sflush_r>
 800291a:	4b07      	ldr	r3, [pc, #28]	; (8002938 <_fflush_r+0x4c>)
 800291c:	429c      	cmp	r4, r3
 800291e:	d101      	bne.n	8002924 <_fflush_r+0x38>
 8002920:	68ac      	ldr	r4, [r5, #8]
 8002922:	e7f1      	b.n	8002908 <_fflush_r+0x1c>
 8002924:	4b05      	ldr	r3, [pc, #20]	; (800293c <_fflush_r+0x50>)
 8002926:	429c      	cmp	r4, r3
 8002928:	bf08      	it	eq
 800292a:	68ec      	ldreq	r4, [r5, #12]
 800292c:	e7ec      	b.n	8002908 <_fflush_r+0x1c>
 800292e:	2000      	movs	r0, #0
 8002930:	bd38      	pop	{r3, r4, r5, pc}
 8002932:	bf00      	nop
 8002934:	08002f30 	.word	0x08002f30
 8002938:	08002f50 	.word	0x08002f50
 800293c:	08002f10 	.word	0x08002f10

08002940 <std>:
 8002940:	2300      	movs	r3, #0
 8002942:	b510      	push	{r4, lr}
 8002944:	4604      	mov	r4, r0
 8002946:	e9c0 3300 	strd	r3, r3, [r0]
 800294a:	6083      	str	r3, [r0, #8]
 800294c:	8181      	strh	r1, [r0, #12]
 800294e:	6643      	str	r3, [r0, #100]	; 0x64
 8002950:	81c2      	strh	r2, [r0, #14]
 8002952:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002956:	6183      	str	r3, [r0, #24]
 8002958:	4619      	mov	r1, r3
 800295a:	2208      	movs	r2, #8
 800295c:	305c      	adds	r0, #92	; 0x5c
 800295e:	f7ff fe13 	bl	8002588 <memset>
 8002962:	4b05      	ldr	r3, [pc, #20]	; (8002978 <std+0x38>)
 8002964:	6224      	str	r4, [r4, #32]
 8002966:	6263      	str	r3, [r4, #36]	; 0x24
 8002968:	4b04      	ldr	r3, [pc, #16]	; (800297c <std+0x3c>)
 800296a:	62a3      	str	r3, [r4, #40]	; 0x28
 800296c:	4b04      	ldr	r3, [pc, #16]	; (8002980 <std+0x40>)
 800296e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002970:	4b04      	ldr	r3, [pc, #16]	; (8002984 <std+0x44>)
 8002972:	6323      	str	r3, [r4, #48]	; 0x30
 8002974:	bd10      	pop	{r4, pc}
 8002976:	bf00      	nop
 8002978:	08002d09 	.word	0x08002d09
 800297c:	08002d2b 	.word	0x08002d2b
 8002980:	08002d63 	.word	0x08002d63
 8002984:	08002d87 	.word	0x08002d87

08002988 <_cleanup_r>:
 8002988:	4901      	ldr	r1, [pc, #4]	; (8002990 <_cleanup_r+0x8>)
 800298a:	f000 b885 	b.w	8002a98 <_fwalk_reent>
 800298e:	bf00      	nop
 8002990:	080028ed 	.word	0x080028ed

08002994 <__sfmoreglue>:
 8002994:	b570      	push	{r4, r5, r6, lr}
 8002996:	2568      	movs	r5, #104	; 0x68
 8002998:	1e4a      	subs	r2, r1, #1
 800299a:	4355      	muls	r5, r2
 800299c:	460e      	mov	r6, r1
 800299e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80029a2:	f000 f947 	bl	8002c34 <_malloc_r>
 80029a6:	4604      	mov	r4, r0
 80029a8:	b140      	cbz	r0, 80029bc <__sfmoreglue+0x28>
 80029aa:	2100      	movs	r1, #0
 80029ac:	e9c0 1600 	strd	r1, r6, [r0]
 80029b0:	300c      	adds	r0, #12
 80029b2:	60a0      	str	r0, [r4, #8]
 80029b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80029b8:	f7ff fde6 	bl	8002588 <memset>
 80029bc:	4620      	mov	r0, r4
 80029be:	bd70      	pop	{r4, r5, r6, pc}

080029c0 <__sinit>:
 80029c0:	6983      	ldr	r3, [r0, #24]
 80029c2:	b510      	push	{r4, lr}
 80029c4:	4604      	mov	r4, r0
 80029c6:	bb33      	cbnz	r3, 8002a16 <__sinit+0x56>
 80029c8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80029cc:	6503      	str	r3, [r0, #80]	; 0x50
 80029ce:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <__sinit+0x58>)
 80029d0:	4a12      	ldr	r2, [pc, #72]	; (8002a1c <__sinit+0x5c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6282      	str	r2, [r0, #40]	; 0x28
 80029d6:	4298      	cmp	r0, r3
 80029d8:	bf04      	itt	eq
 80029da:	2301      	moveq	r3, #1
 80029dc:	6183      	streq	r3, [r0, #24]
 80029de:	f000 f81f 	bl	8002a20 <__sfp>
 80029e2:	6060      	str	r0, [r4, #4]
 80029e4:	4620      	mov	r0, r4
 80029e6:	f000 f81b 	bl	8002a20 <__sfp>
 80029ea:	60a0      	str	r0, [r4, #8]
 80029ec:	4620      	mov	r0, r4
 80029ee:	f000 f817 	bl	8002a20 <__sfp>
 80029f2:	2200      	movs	r2, #0
 80029f4:	60e0      	str	r0, [r4, #12]
 80029f6:	2104      	movs	r1, #4
 80029f8:	6860      	ldr	r0, [r4, #4]
 80029fa:	f7ff ffa1 	bl	8002940 <std>
 80029fe:	2201      	movs	r2, #1
 8002a00:	2109      	movs	r1, #9
 8002a02:	68a0      	ldr	r0, [r4, #8]
 8002a04:	f7ff ff9c 	bl	8002940 <std>
 8002a08:	2202      	movs	r2, #2
 8002a0a:	2112      	movs	r1, #18
 8002a0c:	68e0      	ldr	r0, [r4, #12]
 8002a0e:	f7ff ff97 	bl	8002940 <std>
 8002a12:	2301      	movs	r3, #1
 8002a14:	61a3      	str	r3, [r4, #24]
 8002a16:	bd10      	pop	{r4, pc}
 8002a18:	08002f0c 	.word	0x08002f0c
 8002a1c:	08002989 	.word	0x08002989

08002a20 <__sfp>:
 8002a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a22:	4b1b      	ldr	r3, [pc, #108]	; (8002a90 <__sfp+0x70>)
 8002a24:	4607      	mov	r7, r0
 8002a26:	681e      	ldr	r6, [r3, #0]
 8002a28:	69b3      	ldr	r3, [r6, #24]
 8002a2a:	b913      	cbnz	r3, 8002a32 <__sfp+0x12>
 8002a2c:	4630      	mov	r0, r6
 8002a2e:	f7ff ffc7 	bl	80029c0 <__sinit>
 8002a32:	3648      	adds	r6, #72	; 0x48
 8002a34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	d503      	bpl.n	8002a44 <__sfp+0x24>
 8002a3c:	6833      	ldr	r3, [r6, #0]
 8002a3e:	b133      	cbz	r3, 8002a4e <__sfp+0x2e>
 8002a40:	6836      	ldr	r6, [r6, #0]
 8002a42:	e7f7      	b.n	8002a34 <__sfp+0x14>
 8002a44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002a48:	b16d      	cbz	r5, 8002a66 <__sfp+0x46>
 8002a4a:	3468      	adds	r4, #104	; 0x68
 8002a4c:	e7f4      	b.n	8002a38 <__sfp+0x18>
 8002a4e:	2104      	movs	r1, #4
 8002a50:	4638      	mov	r0, r7
 8002a52:	f7ff ff9f 	bl	8002994 <__sfmoreglue>
 8002a56:	6030      	str	r0, [r6, #0]
 8002a58:	2800      	cmp	r0, #0
 8002a5a:	d1f1      	bne.n	8002a40 <__sfp+0x20>
 8002a5c:	230c      	movs	r3, #12
 8002a5e:	4604      	mov	r4, r0
 8002a60:	603b      	str	r3, [r7, #0]
 8002a62:	4620      	mov	r0, r4
 8002a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a66:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <__sfp+0x74>)
 8002a68:	6665      	str	r5, [r4, #100]	; 0x64
 8002a6a:	e9c4 5500 	strd	r5, r5, [r4]
 8002a6e:	60a5      	str	r5, [r4, #8]
 8002a70:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002a74:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002a78:	2208      	movs	r2, #8
 8002a7a:	4629      	mov	r1, r5
 8002a7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002a80:	f7ff fd82 	bl	8002588 <memset>
 8002a84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002a88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002a8c:	e7e9      	b.n	8002a62 <__sfp+0x42>
 8002a8e:	bf00      	nop
 8002a90:	08002f0c 	.word	0x08002f0c
 8002a94:	ffff0001 	.word	0xffff0001

08002a98 <_fwalk_reent>:
 8002a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a9c:	4680      	mov	r8, r0
 8002a9e:	4689      	mov	r9, r1
 8002aa0:	2600      	movs	r6, #0
 8002aa2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002aa6:	b914      	cbnz	r4, 8002aae <_fwalk_reent+0x16>
 8002aa8:	4630      	mov	r0, r6
 8002aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002aae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002ab2:	3f01      	subs	r7, #1
 8002ab4:	d501      	bpl.n	8002aba <_fwalk_reent+0x22>
 8002ab6:	6824      	ldr	r4, [r4, #0]
 8002ab8:	e7f5      	b.n	8002aa6 <_fwalk_reent+0xe>
 8002aba:	89ab      	ldrh	r3, [r5, #12]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d907      	bls.n	8002ad0 <_fwalk_reent+0x38>
 8002ac0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	d003      	beq.n	8002ad0 <_fwalk_reent+0x38>
 8002ac8:	4629      	mov	r1, r5
 8002aca:	4640      	mov	r0, r8
 8002acc:	47c8      	blx	r9
 8002ace:	4306      	orrs	r6, r0
 8002ad0:	3568      	adds	r5, #104	; 0x68
 8002ad2:	e7ee      	b.n	8002ab2 <_fwalk_reent+0x1a>

08002ad4 <__swhatbuf_r>:
 8002ad4:	b570      	push	{r4, r5, r6, lr}
 8002ad6:	460e      	mov	r6, r1
 8002ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002adc:	b096      	sub	sp, #88	; 0x58
 8002ade:	2900      	cmp	r1, #0
 8002ae0:	4614      	mov	r4, r2
 8002ae2:	461d      	mov	r5, r3
 8002ae4:	da07      	bge.n	8002af6 <__swhatbuf_r+0x22>
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	602b      	str	r3, [r5, #0]
 8002aea:	89b3      	ldrh	r3, [r6, #12]
 8002aec:	061a      	lsls	r2, r3, #24
 8002aee:	d410      	bmi.n	8002b12 <__swhatbuf_r+0x3e>
 8002af0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002af4:	e00e      	b.n	8002b14 <__swhatbuf_r+0x40>
 8002af6:	466a      	mov	r2, sp
 8002af8:	f000 f96c 	bl	8002dd4 <_fstat_r>
 8002afc:	2800      	cmp	r0, #0
 8002afe:	dbf2      	blt.n	8002ae6 <__swhatbuf_r+0x12>
 8002b00:	9a01      	ldr	r2, [sp, #4]
 8002b02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002b06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002b0a:	425a      	negs	r2, r3
 8002b0c:	415a      	adcs	r2, r3
 8002b0e:	602a      	str	r2, [r5, #0]
 8002b10:	e7ee      	b.n	8002af0 <__swhatbuf_r+0x1c>
 8002b12:	2340      	movs	r3, #64	; 0x40
 8002b14:	2000      	movs	r0, #0
 8002b16:	6023      	str	r3, [r4, #0]
 8002b18:	b016      	add	sp, #88	; 0x58
 8002b1a:	bd70      	pop	{r4, r5, r6, pc}

08002b1c <__smakebuf_r>:
 8002b1c:	898b      	ldrh	r3, [r1, #12]
 8002b1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002b20:	079d      	lsls	r5, r3, #30
 8002b22:	4606      	mov	r6, r0
 8002b24:	460c      	mov	r4, r1
 8002b26:	d507      	bpl.n	8002b38 <__smakebuf_r+0x1c>
 8002b28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002b2c:	6023      	str	r3, [r4, #0]
 8002b2e:	6123      	str	r3, [r4, #16]
 8002b30:	2301      	movs	r3, #1
 8002b32:	6163      	str	r3, [r4, #20]
 8002b34:	b002      	add	sp, #8
 8002b36:	bd70      	pop	{r4, r5, r6, pc}
 8002b38:	ab01      	add	r3, sp, #4
 8002b3a:	466a      	mov	r2, sp
 8002b3c:	f7ff ffca 	bl	8002ad4 <__swhatbuf_r>
 8002b40:	9900      	ldr	r1, [sp, #0]
 8002b42:	4605      	mov	r5, r0
 8002b44:	4630      	mov	r0, r6
 8002b46:	f000 f875 	bl	8002c34 <_malloc_r>
 8002b4a:	b948      	cbnz	r0, 8002b60 <__smakebuf_r+0x44>
 8002b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b50:	059a      	lsls	r2, r3, #22
 8002b52:	d4ef      	bmi.n	8002b34 <__smakebuf_r+0x18>
 8002b54:	f023 0303 	bic.w	r3, r3, #3
 8002b58:	f043 0302 	orr.w	r3, r3, #2
 8002b5c:	81a3      	strh	r3, [r4, #12]
 8002b5e:	e7e3      	b.n	8002b28 <__smakebuf_r+0xc>
 8002b60:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <__smakebuf_r+0x7c>)
 8002b62:	62b3      	str	r3, [r6, #40]	; 0x28
 8002b64:	89a3      	ldrh	r3, [r4, #12]
 8002b66:	6020      	str	r0, [r4, #0]
 8002b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b6c:	81a3      	strh	r3, [r4, #12]
 8002b6e:	9b00      	ldr	r3, [sp, #0]
 8002b70:	6120      	str	r0, [r4, #16]
 8002b72:	6163      	str	r3, [r4, #20]
 8002b74:	9b01      	ldr	r3, [sp, #4]
 8002b76:	b15b      	cbz	r3, 8002b90 <__smakebuf_r+0x74>
 8002b78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b7c:	4630      	mov	r0, r6
 8002b7e:	f000 f93b 	bl	8002df8 <_isatty_r>
 8002b82:	b128      	cbz	r0, 8002b90 <__smakebuf_r+0x74>
 8002b84:	89a3      	ldrh	r3, [r4, #12]
 8002b86:	f023 0303 	bic.w	r3, r3, #3
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	81a3      	strh	r3, [r4, #12]
 8002b90:	89a3      	ldrh	r3, [r4, #12]
 8002b92:	431d      	orrs	r5, r3
 8002b94:	81a5      	strh	r5, [r4, #12]
 8002b96:	e7cd      	b.n	8002b34 <__smakebuf_r+0x18>
 8002b98:	08002989 	.word	0x08002989

08002b9c <_free_r>:
 8002b9c:	b538      	push	{r3, r4, r5, lr}
 8002b9e:	4605      	mov	r5, r0
 8002ba0:	2900      	cmp	r1, #0
 8002ba2:	d043      	beq.n	8002c2c <_free_r+0x90>
 8002ba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ba8:	1f0c      	subs	r4, r1, #4
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	bfb8      	it	lt
 8002bae:	18e4      	addlt	r4, r4, r3
 8002bb0:	f000 f944 	bl	8002e3c <__malloc_lock>
 8002bb4:	4a1e      	ldr	r2, [pc, #120]	; (8002c30 <_free_r+0x94>)
 8002bb6:	6813      	ldr	r3, [r2, #0]
 8002bb8:	4610      	mov	r0, r2
 8002bba:	b933      	cbnz	r3, 8002bca <_free_r+0x2e>
 8002bbc:	6063      	str	r3, [r4, #4]
 8002bbe:	6014      	str	r4, [r2, #0]
 8002bc0:	4628      	mov	r0, r5
 8002bc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002bc6:	f000 b93a 	b.w	8002e3e <__malloc_unlock>
 8002bca:	42a3      	cmp	r3, r4
 8002bcc:	d90b      	bls.n	8002be6 <_free_r+0x4a>
 8002bce:	6821      	ldr	r1, [r4, #0]
 8002bd0:	1862      	adds	r2, r4, r1
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	bf01      	itttt	eq
 8002bd6:	681a      	ldreq	r2, [r3, #0]
 8002bd8:	685b      	ldreq	r3, [r3, #4]
 8002bda:	1852      	addeq	r2, r2, r1
 8002bdc:	6022      	streq	r2, [r4, #0]
 8002bde:	6063      	str	r3, [r4, #4]
 8002be0:	6004      	str	r4, [r0, #0]
 8002be2:	e7ed      	b.n	8002bc0 <_free_r+0x24>
 8002be4:	4613      	mov	r3, r2
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	b10a      	cbz	r2, 8002bee <_free_r+0x52>
 8002bea:	42a2      	cmp	r2, r4
 8002bec:	d9fa      	bls.n	8002be4 <_free_r+0x48>
 8002bee:	6819      	ldr	r1, [r3, #0]
 8002bf0:	1858      	adds	r0, r3, r1
 8002bf2:	42a0      	cmp	r0, r4
 8002bf4:	d10b      	bne.n	8002c0e <_free_r+0x72>
 8002bf6:	6820      	ldr	r0, [r4, #0]
 8002bf8:	4401      	add	r1, r0
 8002bfa:	1858      	adds	r0, r3, r1
 8002bfc:	4282      	cmp	r2, r0
 8002bfe:	6019      	str	r1, [r3, #0]
 8002c00:	d1de      	bne.n	8002bc0 <_free_r+0x24>
 8002c02:	6810      	ldr	r0, [r2, #0]
 8002c04:	6852      	ldr	r2, [r2, #4]
 8002c06:	4401      	add	r1, r0
 8002c08:	6019      	str	r1, [r3, #0]
 8002c0a:	605a      	str	r2, [r3, #4]
 8002c0c:	e7d8      	b.n	8002bc0 <_free_r+0x24>
 8002c0e:	d902      	bls.n	8002c16 <_free_r+0x7a>
 8002c10:	230c      	movs	r3, #12
 8002c12:	602b      	str	r3, [r5, #0]
 8002c14:	e7d4      	b.n	8002bc0 <_free_r+0x24>
 8002c16:	6820      	ldr	r0, [r4, #0]
 8002c18:	1821      	adds	r1, r4, r0
 8002c1a:	428a      	cmp	r2, r1
 8002c1c:	bf01      	itttt	eq
 8002c1e:	6811      	ldreq	r1, [r2, #0]
 8002c20:	6852      	ldreq	r2, [r2, #4]
 8002c22:	1809      	addeq	r1, r1, r0
 8002c24:	6021      	streq	r1, [r4, #0]
 8002c26:	6062      	str	r2, [r4, #4]
 8002c28:	605c      	str	r4, [r3, #4]
 8002c2a:	e7c9      	b.n	8002bc0 <_free_r+0x24>
 8002c2c:	bd38      	pop	{r3, r4, r5, pc}
 8002c2e:	bf00      	nop
 8002c30:	2000008c 	.word	0x2000008c

08002c34 <_malloc_r>:
 8002c34:	b570      	push	{r4, r5, r6, lr}
 8002c36:	1ccd      	adds	r5, r1, #3
 8002c38:	f025 0503 	bic.w	r5, r5, #3
 8002c3c:	3508      	adds	r5, #8
 8002c3e:	2d0c      	cmp	r5, #12
 8002c40:	bf38      	it	cc
 8002c42:	250c      	movcc	r5, #12
 8002c44:	2d00      	cmp	r5, #0
 8002c46:	4606      	mov	r6, r0
 8002c48:	db01      	blt.n	8002c4e <_malloc_r+0x1a>
 8002c4a:	42a9      	cmp	r1, r5
 8002c4c:	d903      	bls.n	8002c56 <_malloc_r+0x22>
 8002c4e:	230c      	movs	r3, #12
 8002c50:	6033      	str	r3, [r6, #0]
 8002c52:	2000      	movs	r0, #0
 8002c54:	bd70      	pop	{r4, r5, r6, pc}
 8002c56:	f000 f8f1 	bl	8002e3c <__malloc_lock>
 8002c5a:	4a21      	ldr	r2, [pc, #132]	; (8002ce0 <_malloc_r+0xac>)
 8002c5c:	6814      	ldr	r4, [r2, #0]
 8002c5e:	4621      	mov	r1, r4
 8002c60:	b991      	cbnz	r1, 8002c88 <_malloc_r+0x54>
 8002c62:	4c20      	ldr	r4, [pc, #128]	; (8002ce4 <_malloc_r+0xb0>)
 8002c64:	6823      	ldr	r3, [r4, #0]
 8002c66:	b91b      	cbnz	r3, 8002c70 <_malloc_r+0x3c>
 8002c68:	4630      	mov	r0, r6
 8002c6a:	f000 f83d 	bl	8002ce8 <_sbrk_r>
 8002c6e:	6020      	str	r0, [r4, #0]
 8002c70:	4629      	mov	r1, r5
 8002c72:	4630      	mov	r0, r6
 8002c74:	f000 f838 	bl	8002ce8 <_sbrk_r>
 8002c78:	1c43      	adds	r3, r0, #1
 8002c7a:	d124      	bne.n	8002cc6 <_malloc_r+0x92>
 8002c7c:	230c      	movs	r3, #12
 8002c7e:	4630      	mov	r0, r6
 8002c80:	6033      	str	r3, [r6, #0]
 8002c82:	f000 f8dc 	bl	8002e3e <__malloc_unlock>
 8002c86:	e7e4      	b.n	8002c52 <_malloc_r+0x1e>
 8002c88:	680b      	ldr	r3, [r1, #0]
 8002c8a:	1b5b      	subs	r3, r3, r5
 8002c8c:	d418      	bmi.n	8002cc0 <_malloc_r+0x8c>
 8002c8e:	2b0b      	cmp	r3, #11
 8002c90:	d90f      	bls.n	8002cb2 <_malloc_r+0x7e>
 8002c92:	600b      	str	r3, [r1, #0]
 8002c94:	18cc      	adds	r4, r1, r3
 8002c96:	50cd      	str	r5, [r1, r3]
 8002c98:	4630      	mov	r0, r6
 8002c9a:	f000 f8d0 	bl	8002e3e <__malloc_unlock>
 8002c9e:	f104 000b 	add.w	r0, r4, #11
 8002ca2:	1d23      	adds	r3, r4, #4
 8002ca4:	f020 0007 	bic.w	r0, r0, #7
 8002ca8:	1ac3      	subs	r3, r0, r3
 8002caa:	d0d3      	beq.n	8002c54 <_malloc_r+0x20>
 8002cac:	425a      	negs	r2, r3
 8002cae:	50e2      	str	r2, [r4, r3]
 8002cb0:	e7d0      	b.n	8002c54 <_malloc_r+0x20>
 8002cb2:	684b      	ldr	r3, [r1, #4]
 8002cb4:	428c      	cmp	r4, r1
 8002cb6:	bf16      	itet	ne
 8002cb8:	6063      	strne	r3, [r4, #4]
 8002cba:	6013      	streq	r3, [r2, #0]
 8002cbc:	460c      	movne	r4, r1
 8002cbe:	e7eb      	b.n	8002c98 <_malloc_r+0x64>
 8002cc0:	460c      	mov	r4, r1
 8002cc2:	6849      	ldr	r1, [r1, #4]
 8002cc4:	e7cc      	b.n	8002c60 <_malloc_r+0x2c>
 8002cc6:	1cc4      	adds	r4, r0, #3
 8002cc8:	f024 0403 	bic.w	r4, r4, #3
 8002ccc:	42a0      	cmp	r0, r4
 8002cce:	d005      	beq.n	8002cdc <_malloc_r+0xa8>
 8002cd0:	1a21      	subs	r1, r4, r0
 8002cd2:	4630      	mov	r0, r6
 8002cd4:	f000 f808 	bl	8002ce8 <_sbrk_r>
 8002cd8:	3001      	adds	r0, #1
 8002cda:	d0cf      	beq.n	8002c7c <_malloc_r+0x48>
 8002cdc:	6025      	str	r5, [r4, #0]
 8002cde:	e7db      	b.n	8002c98 <_malloc_r+0x64>
 8002ce0:	2000008c 	.word	0x2000008c
 8002ce4:	20000090 	.word	0x20000090

08002ce8 <_sbrk_r>:
 8002ce8:	b538      	push	{r3, r4, r5, lr}
 8002cea:	2300      	movs	r3, #0
 8002cec:	4c05      	ldr	r4, [pc, #20]	; (8002d04 <_sbrk_r+0x1c>)
 8002cee:	4605      	mov	r5, r0
 8002cf0:	4608      	mov	r0, r1
 8002cf2:	6023      	str	r3, [r4, #0]
 8002cf4:	f7fd fbba 	bl	800046c <_sbrk>
 8002cf8:	1c43      	adds	r3, r0, #1
 8002cfa:	d102      	bne.n	8002d02 <_sbrk_r+0x1a>
 8002cfc:	6823      	ldr	r3, [r4, #0]
 8002cfe:	b103      	cbz	r3, 8002d02 <_sbrk_r+0x1a>
 8002d00:	602b      	str	r3, [r5, #0]
 8002d02:	bd38      	pop	{r3, r4, r5, pc}
 8002d04:	200000d4 	.word	0x200000d4

08002d08 <__sread>:
 8002d08:	b510      	push	{r4, lr}
 8002d0a:	460c      	mov	r4, r1
 8002d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d10:	f000 f896 	bl	8002e40 <_read_r>
 8002d14:	2800      	cmp	r0, #0
 8002d16:	bfab      	itete	ge
 8002d18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002d1a:	89a3      	ldrhlt	r3, [r4, #12]
 8002d1c:	181b      	addge	r3, r3, r0
 8002d1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002d22:	bfac      	ite	ge
 8002d24:	6563      	strge	r3, [r4, #84]	; 0x54
 8002d26:	81a3      	strhlt	r3, [r4, #12]
 8002d28:	bd10      	pop	{r4, pc}

08002d2a <__swrite>:
 8002d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d2e:	461f      	mov	r7, r3
 8002d30:	898b      	ldrh	r3, [r1, #12]
 8002d32:	4605      	mov	r5, r0
 8002d34:	05db      	lsls	r3, r3, #23
 8002d36:	460c      	mov	r4, r1
 8002d38:	4616      	mov	r6, r2
 8002d3a:	d505      	bpl.n	8002d48 <__swrite+0x1e>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d44:	f000 f868 	bl	8002e18 <_lseek_r>
 8002d48:	89a3      	ldrh	r3, [r4, #12]
 8002d4a:	4632      	mov	r2, r6
 8002d4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d50:	81a3      	strh	r3, [r4, #12]
 8002d52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d56:	463b      	mov	r3, r7
 8002d58:	4628      	mov	r0, r5
 8002d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d5e:	f000 b817 	b.w	8002d90 <_write_r>

08002d62 <__sseek>:
 8002d62:	b510      	push	{r4, lr}
 8002d64:	460c      	mov	r4, r1
 8002d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d6a:	f000 f855 	bl	8002e18 <_lseek_r>
 8002d6e:	1c43      	adds	r3, r0, #1
 8002d70:	89a3      	ldrh	r3, [r4, #12]
 8002d72:	bf15      	itete	ne
 8002d74:	6560      	strne	r0, [r4, #84]	; 0x54
 8002d76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002d7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002d7e:	81a3      	strheq	r3, [r4, #12]
 8002d80:	bf18      	it	ne
 8002d82:	81a3      	strhne	r3, [r4, #12]
 8002d84:	bd10      	pop	{r4, pc}

08002d86 <__sclose>:
 8002d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d8a:	f000 b813 	b.w	8002db4 <_close_r>
	...

08002d90 <_write_r>:
 8002d90:	b538      	push	{r3, r4, r5, lr}
 8002d92:	4605      	mov	r5, r0
 8002d94:	4608      	mov	r0, r1
 8002d96:	4611      	mov	r1, r2
 8002d98:	2200      	movs	r2, #0
 8002d9a:	4c05      	ldr	r4, [pc, #20]	; (8002db0 <_write_r+0x20>)
 8002d9c:	6022      	str	r2, [r4, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	f7fd fb17 	bl	80003d2 <_write>
 8002da4:	1c43      	adds	r3, r0, #1
 8002da6:	d102      	bne.n	8002dae <_write_r+0x1e>
 8002da8:	6823      	ldr	r3, [r4, #0]
 8002daa:	b103      	cbz	r3, 8002dae <_write_r+0x1e>
 8002dac:	602b      	str	r3, [r5, #0]
 8002dae:	bd38      	pop	{r3, r4, r5, pc}
 8002db0:	200000d4 	.word	0x200000d4

08002db4 <_close_r>:
 8002db4:	b538      	push	{r3, r4, r5, lr}
 8002db6:	2300      	movs	r3, #0
 8002db8:	4c05      	ldr	r4, [pc, #20]	; (8002dd0 <_close_r+0x1c>)
 8002dba:	4605      	mov	r5, r0
 8002dbc:	4608      	mov	r0, r1
 8002dbe:	6023      	str	r3, [r4, #0]
 8002dc0:	f7fd fb23 	bl	800040a <_close>
 8002dc4:	1c43      	adds	r3, r0, #1
 8002dc6:	d102      	bne.n	8002dce <_close_r+0x1a>
 8002dc8:	6823      	ldr	r3, [r4, #0]
 8002dca:	b103      	cbz	r3, 8002dce <_close_r+0x1a>
 8002dcc:	602b      	str	r3, [r5, #0]
 8002dce:	bd38      	pop	{r3, r4, r5, pc}
 8002dd0:	200000d4 	.word	0x200000d4

08002dd4 <_fstat_r>:
 8002dd4:	b538      	push	{r3, r4, r5, lr}
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	4c06      	ldr	r4, [pc, #24]	; (8002df4 <_fstat_r+0x20>)
 8002dda:	4605      	mov	r5, r0
 8002ddc:	4608      	mov	r0, r1
 8002dde:	4611      	mov	r1, r2
 8002de0:	6023      	str	r3, [r4, #0]
 8002de2:	f7fd fb1d 	bl	8000420 <_fstat>
 8002de6:	1c43      	adds	r3, r0, #1
 8002de8:	d102      	bne.n	8002df0 <_fstat_r+0x1c>
 8002dea:	6823      	ldr	r3, [r4, #0]
 8002dec:	b103      	cbz	r3, 8002df0 <_fstat_r+0x1c>
 8002dee:	602b      	str	r3, [r5, #0]
 8002df0:	bd38      	pop	{r3, r4, r5, pc}
 8002df2:	bf00      	nop
 8002df4:	200000d4 	.word	0x200000d4

08002df8 <_isatty_r>:
 8002df8:	b538      	push	{r3, r4, r5, lr}
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	4c05      	ldr	r4, [pc, #20]	; (8002e14 <_isatty_r+0x1c>)
 8002dfe:	4605      	mov	r5, r0
 8002e00:	4608      	mov	r0, r1
 8002e02:	6023      	str	r3, [r4, #0]
 8002e04:	f7fd fb1b 	bl	800043e <_isatty>
 8002e08:	1c43      	adds	r3, r0, #1
 8002e0a:	d102      	bne.n	8002e12 <_isatty_r+0x1a>
 8002e0c:	6823      	ldr	r3, [r4, #0]
 8002e0e:	b103      	cbz	r3, 8002e12 <_isatty_r+0x1a>
 8002e10:	602b      	str	r3, [r5, #0]
 8002e12:	bd38      	pop	{r3, r4, r5, pc}
 8002e14:	200000d4 	.word	0x200000d4

08002e18 <_lseek_r>:
 8002e18:	b538      	push	{r3, r4, r5, lr}
 8002e1a:	4605      	mov	r5, r0
 8002e1c:	4608      	mov	r0, r1
 8002e1e:	4611      	mov	r1, r2
 8002e20:	2200      	movs	r2, #0
 8002e22:	4c05      	ldr	r4, [pc, #20]	; (8002e38 <_lseek_r+0x20>)
 8002e24:	6022      	str	r2, [r4, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	f7fd fb13 	bl	8000452 <_lseek>
 8002e2c:	1c43      	adds	r3, r0, #1
 8002e2e:	d102      	bne.n	8002e36 <_lseek_r+0x1e>
 8002e30:	6823      	ldr	r3, [r4, #0]
 8002e32:	b103      	cbz	r3, 8002e36 <_lseek_r+0x1e>
 8002e34:	602b      	str	r3, [r5, #0]
 8002e36:	bd38      	pop	{r3, r4, r5, pc}
 8002e38:	200000d4 	.word	0x200000d4

08002e3c <__malloc_lock>:
 8002e3c:	4770      	bx	lr

08002e3e <__malloc_unlock>:
 8002e3e:	4770      	bx	lr

08002e40 <_read_r>:
 8002e40:	b538      	push	{r3, r4, r5, lr}
 8002e42:	4605      	mov	r5, r0
 8002e44:	4608      	mov	r0, r1
 8002e46:	4611      	mov	r1, r2
 8002e48:	2200      	movs	r2, #0
 8002e4a:	4c05      	ldr	r4, [pc, #20]	; (8002e60 <_read_r+0x20>)
 8002e4c:	6022      	str	r2, [r4, #0]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	f7fd faa2 	bl	8000398 <_read>
 8002e54:	1c43      	adds	r3, r0, #1
 8002e56:	d102      	bne.n	8002e5e <_read_r+0x1e>
 8002e58:	6823      	ldr	r3, [r4, #0]
 8002e5a:	b103      	cbz	r3, 8002e5e <_read_r+0x1e>
 8002e5c:	602b      	str	r3, [r5, #0]
 8002e5e:	bd38      	pop	{r3, r4, r5, pc}
 8002e60:	200000d4 	.word	0x200000d4

08002e64 <_init>:
 8002e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e66:	bf00      	nop
 8002e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e6a:	bc08      	pop	{r3}
 8002e6c:	469e      	mov	lr, r3
 8002e6e:	4770      	bx	lr

08002e70 <_fini>:
 8002e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e72:	bf00      	nop
 8002e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e76:	bc08      	pop	{r3}
 8002e78:	469e      	mov	lr, r3
 8002e7a:	4770      	bx	lr
