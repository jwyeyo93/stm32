
SPI-AT45DBXX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004240  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08004424  08004424  00014424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800455c  0800455c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800455c  0800455c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800455c  0800455c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800455c  0800455c  0001455c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004560  08004560  00014560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000068  080045cc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080045cc  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010971  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025e9  00000000  00000000  00030a02  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007a0  00000000  00000000  00032ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000688  00000000  00000000  00033790  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001274c  00000000  00000000  00033e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a672  00000000  00000000  00046564  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00063bee  00000000  00000000  00050bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b47c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023a4  00000000  00000000  000b4840  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000068 	.word	0x20000068
 8000200:	00000000 	.word	0x00000000
 8000204:	0800440c 	.word	0x0800440c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000006c 	.word	0x2000006c
 8000220:	0800440c 	.word	0x0800440c

08000224 <AT45DBXX_BUSY>:
*********************************************************************************************************/

#include "AT45DBXX.h"

static void AT45DBXX_BUSY(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
	uint8_t status;
	AT45DBXX_Disable;	
 800022a:	2201      	movs	r2, #1
 800022c:	2110      	movs	r1, #16
 800022e:	4812      	ldr	r0, [pc, #72]	; (8000278 <AT45DBXX_BUSY+0x54>)
 8000230:	f000 fe68 	bl	8000f04 <HAL_GPIO_WritePin>
	uint8_t cmd[1];
	cmd[0] = READ_STATE_REGISTER;
 8000234:	23d7      	movs	r3, #215	; 0xd7
 8000236:	713b      	strb	r3, [r7, #4]
	do
	{
		AT45DBXX_Enable;
 8000238:	2200      	movs	r2, #0
 800023a:	2110      	movs	r1, #16
 800023c:	480e      	ldr	r0, [pc, #56]	; (8000278 <AT45DBXX_BUSY+0x54>)
 800023e:	f000 fe61 	bl	8000f04 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, cmd, 1, 1000);	
 8000242:	1d39      	adds	r1, r7, #4
 8000244:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000248:	2201      	movs	r2, #1
 800024a:	480c      	ldr	r0, [pc, #48]	; (800027c <AT45DBXX_BUSY+0x58>)
 800024c:	f002 f8cc 	bl	80023e8 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1,&status, 1, 1000);
 8000250:	1df9      	adds	r1, r7, #7
 8000252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000256:	2201      	movs	r2, #1
 8000258:	4808      	ldr	r0, [pc, #32]	; (800027c <AT45DBXX_BUSY+0x58>)
 800025a:	f002 fa04 	bl	8002666 <HAL_SPI_Receive>
		AT45DBXX_Disable;
 800025e:	2201      	movs	r2, #1
 8000260:	2110      	movs	r1, #16
 8000262:	4805      	ldr	r0, [pc, #20]	; (8000278 <AT45DBXX_BUSY+0x54>)
 8000264:	f000 fe4e 	bl	8000f04 <HAL_GPIO_WritePin>
	}while(!(status & 0x80));
 8000268:	79fb      	ldrb	r3, [r7, #7]
 800026a:	b25b      	sxtb	r3, r3
 800026c:	2b00      	cmp	r3, #0
 800026e:	dae3      	bge.n	8000238 <AT45DBXX_BUSY+0x14>

}
 8000270:	bf00      	nop
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	40010800 	.word	0x40010800
 800027c:	20000098 	.word	0x20000098

08000280 <AT45DBXX_Read_ID>:

void AT45DBXX_Read_ID(uint8_t *ID)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	uint8_t cmd[1];
	cmd[0] = Read_ID;
 8000288:	239f      	movs	r3, #159	; 0x9f
 800028a:	733b      	strb	r3, [r7, #12]
	AT45DBXX_BUSY();
 800028c:	f7ff ffca 	bl	8000224 <AT45DBXX_BUSY>
	AT45DBXX_Enable;
 8000290:	2200      	movs	r2, #0
 8000292:	2110      	movs	r1, #16
 8000294:	480d      	ldr	r0, [pc, #52]	; (80002cc <AT45DBXX_Read_ID+0x4c>)
 8000296:	f000 fe35 	bl	8000f04 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, cmd, 1, 1000);	
 800029a:	f107 010c 	add.w	r1, r7, #12
 800029e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002a2:	2201      	movs	r2, #1
 80002a4:	480a      	ldr	r0, [pc, #40]	; (80002d0 <AT45DBXX_Read_ID+0x50>)
 80002a6:	f002 f89f 	bl	80023e8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1,ID, 4, 1000);
 80002aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002ae:	2204      	movs	r2, #4
 80002b0:	6879      	ldr	r1, [r7, #4]
 80002b2:	4807      	ldr	r0, [pc, #28]	; (80002d0 <AT45DBXX_Read_ID+0x50>)
 80002b4:	f002 f9d7 	bl	8002666 <HAL_SPI_Receive>
	AT45DBXX_Disable;
 80002b8:	2201      	movs	r2, #1
 80002ba:	2110      	movs	r1, #16
 80002bc:	4803      	ldr	r0, [pc, #12]	; (80002cc <AT45DBXX_Read_ID+0x4c>)
 80002be:	f000 fe21 	bl	8000f04 <HAL_GPIO_WritePin>
}
 80002c2:	bf00      	nop
 80002c4:	3710      	adds	r7, #16
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	40010800 	.word	0x40010800
 80002d0:	20000098 	.word	0x20000098

080002d4 <AT45DBXX_Write>:

void AT45DBXX_Write(uint16_t BufferOffset,uint8_t Data)
{		
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	460a      	mov	r2, r1
 80002de:	80fb      	strh	r3, [r7, #6]
 80002e0:	4613      	mov	r3, r2
 80002e2:	717b      	strb	r3, [r7, #5]
	AT45DBXX_Enable;	
 80002e4:	2200      	movs	r2, #0
 80002e6:	2110      	movs	r1, #16
 80002e8:	4813      	ldr	r0, [pc, #76]	; (8000338 <AT45DBXX_Write+0x64>)
 80002ea:	f000 fe0b 	bl	8000f04 <HAL_GPIO_WritePin>
	uint8_t cmd[4];
	cmd[0] = 0x84;
 80002ee:	2384      	movs	r3, #132	; 0x84
 80002f0:	733b      	strb	r3, [r7, #12]
	cmd[1] = 0xFF;
 80002f2:	23ff      	movs	r3, #255	; 0xff
 80002f4:	737b      	strb	r3, [r7, #13]
	cmd[2] = (uint8_t)(BufferOffset>>8);
 80002f6:	88fb      	ldrh	r3, [r7, #6]
 80002f8:	0a1b      	lsrs	r3, r3, #8
 80002fa:	b29b      	uxth	r3, r3
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	73bb      	strb	r3, [r7, #14]
	cmd[3] = (uint8_t)BufferOffset;
 8000300:	88fb      	ldrh	r3, [r7, #6]
 8000302:	b2db      	uxtb	r3, r3
 8000304:	73fb      	strb	r3, [r7, #15]
	cmd[3] = Data;
 8000306:	797b      	ldrb	r3, [r7, #5]
 8000308:	73fb      	strb	r3, [r7, #15]
	AT45DBXX_Enable;
 800030a:	2200      	movs	r2, #0
 800030c:	2110      	movs	r1, #16
 800030e:	480a      	ldr	r0, [pc, #40]	; (8000338 <AT45DBXX_Write+0x64>)
 8000310:	f000 fdf8 	bl	8000f04 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, cmd, 5, 1000);	
 8000314:	f107 010c 	add.w	r1, r7, #12
 8000318:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800031c:	2205      	movs	r2, #5
 800031e:	4807      	ldr	r0, [pc, #28]	; (800033c <AT45DBXX_Write+0x68>)
 8000320:	f002 f862 	bl	80023e8 <HAL_SPI_Transmit>
	AT45DBXX_Disable;
 8000324:	2201      	movs	r2, #1
 8000326:	2110      	movs	r1, #16
 8000328:	4803      	ldr	r0, [pc, #12]	; (8000338 <AT45DBXX_Write+0x64>)
 800032a:	f000 fdeb 	bl	8000f04 <HAL_GPIO_WritePin>
}
 800032e:	bf00      	nop
 8000330:	3710      	adds	r7, #16
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	40010800 	.word	0x40010800
 800033c:	20000098 	.word	0x20000098

08000340 <AT45DBXX_Read>:

uint8_t AT45DBXX_Read(uint16_t BufferOffset)
{		
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0
 8000346:	4603      	mov	r3, r0
 8000348:	80fb      	strh	r3, [r7, #6]
	uint8_t cmd[5];
	cmd[0] = 0xD4;
 800034a:	23d4      	movs	r3, #212	; 0xd4
 800034c:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0xFF;
 800034e:	23ff      	movs	r3, #255	; 0xff
 8000350:	727b      	strb	r3, [r7, #9]
	cmd[2] = (uint8_t)BufferOffset>>8;
 8000352:	88fb      	ldrh	r3, [r7, #6]
 8000354:	b2db      	uxtb	r3, r3
 8000356:	121b      	asrs	r3, r3, #8
 8000358:	b2db      	uxtb	r3, r3
 800035a:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)BufferOffset;
 800035c:	88fb      	ldrh	r3, [r7, #6]
 800035e:	b2db      	uxtb	r3, r3
 8000360:	72fb      	strb	r3, [r7, #11]
	cmd[4] = 0xFF;
 8000362:	23ff      	movs	r3, #255	; 0xff
 8000364:	733b      	strb	r3, [r7, #12]
	AT45DBXX_Enable;
 8000366:	2200      	movs	r2, #0
 8000368:	2110      	movs	r1, #16
 800036a:	480e      	ldr	r0, [pc, #56]	; (80003a4 <AT45DBXX_Read+0x64>)
 800036c:	f000 fdca 	bl	8000f04 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, cmd, 5, 1000);
 8000370:	f107 0108 	add.w	r1, r7, #8
 8000374:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000378:	2205      	movs	r2, #5
 800037a:	480b      	ldr	r0, [pc, #44]	; (80003a8 <AT45DBXX_Read+0x68>)
 800037c:	f002 f834 	bl	80023e8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, cmd, 1, 1000);
 8000380:	f107 0108 	add.w	r1, r7, #8
 8000384:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000388:	2201      	movs	r2, #1
 800038a:	4807      	ldr	r0, [pc, #28]	; (80003a8 <AT45DBXX_Read+0x68>)
 800038c:	f002 f96b 	bl	8002666 <HAL_SPI_Receive>
	AT45DBXX_Disable;
 8000390:	2201      	movs	r2, #1
 8000392:	2110      	movs	r1, #16
 8000394:	4803      	ldr	r0, [pc, #12]	; (80003a4 <AT45DBXX_Read+0x64>)
 8000396:	f000 fdb5 	bl	8000f04 <HAL_GPIO_WritePin>
	return cmd[0];
 800039a:	7a3b      	ldrb	r3, [r7, #8]
}
 800039c:	4618      	mov	r0, r3
 800039e:	3710      	adds	r7, #16
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40010800 	.word	0x40010800
 80003a8:	20000098 	.word	0x20000098

080003ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b086      	sub	sp, #24
 80003b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b2:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <MX_GPIO_Init+0x48>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	4a0f      	ldr	r2, [pc, #60]	; (80003f4 <MX_GPIO_Init+0x48>)
 80003b8:	f043 0304 	orr.w	r3, r3, #4
 80003bc:	6193      	str	r3, [r2, #24]
 80003be:	4b0d      	ldr	r3, [pc, #52]	; (80003f4 <MX_GPIO_Init+0x48>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	f003 0304 	and.w	r3, r3, #4
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80003ca:	2200      	movs	r2, #0
 80003cc:	2110      	movs	r1, #16
 80003ce:	480a      	ldr	r0, [pc, #40]	; (80003f8 <MX_GPIO_Init+0x4c>)
 80003d0:	f000 fd98 	bl	8000f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80003d4:	2310      	movs	r3, #16
 80003d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d8:	2301      	movs	r3, #1
 80003da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003dc:	2302      	movs	r3, #2
 80003de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e0:	f107 0308 	add.w	r3, r7, #8
 80003e4:	4619      	mov	r1, r3
 80003e6:	4804      	ldr	r0, [pc, #16]	; (80003f8 <MX_GPIO_Init+0x4c>)
 80003e8:	f000 fc1e 	bl	8000c28 <HAL_GPIO_Init>

}
 80003ec:	bf00      	nop
 80003ee:	3718      	adds	r7, #24
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	40021000 	.word	0x40021000
 80003f8:	40010800 	.word	0x40010800

080003fc <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000402:	f000 faa5 	bl	8000950 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000406:	f000 f863 	bl	80004d0 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800040a:	f7ff ffcf 	bl	80003ac <MX_GPIO_Init>
  SystemClock_Config();
 800040e:	f000 f85f 	bl	80004d0 <SystemClock_Config>
  MX_SPI1_Init();
 8000412:	f000 f895 	bl	8000540 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000416:	f000 fa05 	bl	8000824 <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  printf("\r\n SPI Example \r\n\r\n");
 800041a:	4826      	ldr	r0, [pc, #152]	; (80004b4 <main+0xb8>)
 800041c:	f003 f918 	bl	8003650 <puts>

  /*##-1- Read the device ID  ########################*/
  AT45DBXX_Read_ID(ID);
 8000420:	463b      	mov	r3, r7
 8000422:	4618      	mov	r0, r3
 8000424:	f7ff ff2c 	bl	8000280 <AT45DBXX_Read_ID>

  printf("AT45DBXX ID is");
 8000428:	4823      	ldr	r0, [pc, #140]	; (80004b8 <main+0xbc>)
 800042a:	f003 f89d 	bl	8003568 <iprintf>
  for(i=0;i<4;i++)
 800042e:	2300      	movs	r3, #0
 8000430:	607b      	str	r3, [r7, #4]
 8000432:	e00a      	b.n	800044a <main+0x4e>
  {
  	printf(" 0x%02X ",ID[i]);
 8000434:	463a      	mov	r2, r7
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4413      	add	r3, r2
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	4619      	mov	r1, r3
 800043e:	481f      	ldr	r0, [pc, #124]	; (80004bc <main+0xc0>)
 8000440:	f003 f892 	bl	8003568 <iprintf>
  for(i=0;i<4;i++)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	3301      	adds	r3, #1
 8000448:	607b      	str	r3, [r7, #4]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	2b03      	cmp	r3, #3
 800044e:	ddf1      	ble.n	8000434 <main+0x38>
  }
  printf("\r\n");
 8000450:	481b      	ldr	r0, [pc, #108]	; (80004c0 <main+0xc4>)
 8000452:	f003 f8fd 	bl	8003650 <puts>

  /*##-2- Written to the flash ########################*/
  printf("\r\nFALSH AT45DBXX Write Test: \r\n");
 8000456:	481b      	ldr	r0, [pc, #108]	; (80004c4 <main+0xc8>)
 8000458:	f003 f8fa 	bl	8003650 <puts>
  for(i=0;i<256;i++)
 800045c:	2300      	movs	r3, #0
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	e00e      	b.n	8000480 <main+0x84>
  {
  	AT45DBXX_Write((uint16_t)i,i);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	b29b      	uxth	r3, r3
 8000466:	687a      	ldr	r2, [r7, #4]
 8000468:	b2d2      	uxtb	r2, r2
 800046a:	4611      	mov	r1, r2
 800046c:	4618      	mov	r0, r3
 800046e:	f7ff ff31 	bl	80002d4 <AT45DBXX_Write>
  	printf("%3d ",i);
 8000472:	6879      	ldr	r1, [r7, #4]
 8000474:	4814      	ldr	r0, [pc, #80]	; (80004c8 <main+0xcc>)
 8000476:	f003 f877 	bl	8003568 <iprintf>
  for(i=0;i<256;i++)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	3301      	adds	r3, #1
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	2bff      	cmp	r3, #255	; 0xff
 8000484:	dded      	ble.n	8000462 <main+0x66>
  }

  /*##-3- Read the flash     ########################*/
  printf("\r\nFALSH AT45DBXX Read Test: \r\n");
 8000486:	4811      	ldr	r0, [pc, #68]	; (80004cc <main+0xd0>)
 8000488:	f003 f8e2 	bl	8003650 <puts>

  for(i=0;i<256;i++)
 800048c:	2300      	movs	r3, #0
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	e00c      	b.n	80004ac <main+0xb0>
  {
  	printf("%3d ",AT45DBXX_Read((uint16_t)i));
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	b29b      	uxth	r3, r3
 8000496:	4618      	mov	r0, r3
 8000498:	f7ff ff52 	bl	8000340 <AT45DBXX_Read>
 800049c:	4603      	mov	r3, r0
 800049e:	4619      	mov	r1, r3
 80004a0:	4809      	ldr	r0, [pc, #36]	; (80004c8 <main+0xcc>)
 80004a2:	f003 f861 	bl	8003568 <iprintf>
  for(i=0;i<256;i++)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	3301      	adds	r3, #1
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2bff      	cmp	r3, #255	; 0xff
 80004b0:	ddef      	ble.n	8000492 <main+0x96>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <main+0xb6>
 80004b4:	08004424 	.word	0x08004424
 80004b8:	08004438 	.word	0x08004438
 80004bc:	08004448 	.word	0x08004448
 80004c0:	08004454 	.word	0x08004454
 80004c4:	08004458 	.word	0x08004458
 80004c8:	08004478 	.word	0x08004478
 80004cc:	08004480 	.word	0x08004480

080004d0 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b090      	sub	sp, #64	; 0x40
 80004d4:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004d6:	2302      	movs	r3, #2
 80004d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004da:	2301      	movs	r3, #1
 80004dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80004de:	2310      	movs	r3, #16
 80004e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004e2:	2300      	movs	r3, #0
 80004e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80004e6:	f107 0318 	add.w	r3, r7, #24
 80004ea:	4618      	mov	r0, r3
 80004ec:	f000 fd22 	bl	8000f34 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f0:	230f      	movs	r3, #15
 80004f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f8:	2300      	movs	r3, #0
 80004fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004fc:	2300      	movs	r3, #0
 80004fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	2100      	movs	r1, #0
 8000508:	4618      	mov	r0, r3
 800050a:	f001 fc01 	bl	8001d10 <HAL_RCC_ClockConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800050e:	f001 feff 	bl	8002310 <HAL_RCC_GetHCLKFreq>
 8000512:	4602      	mov	r2, r0
 8000514:	4b09      	ldr	r3, [pc, #36]	; (800053c <SystemClock_Config+0x6c>)
 8000516:	fba3 2302 	umull	r2, r3, r3, r2
 800051a:	099b      	lsrs	r3, r3, #6
 800051c:	4618      	mov	r0, r3
 800051e:	f000 fb4e 	bl	8000bbe <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000522:	2004      	movs	r0, #4
 8000524:	f000 fb58 	bl	8000bd8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000528:	2200      	movs	r2, #0
 800052a:	2100      	movs	r1, #0
 800052c:	f04f 30ff 	mov.w	r0, #4294967295
 8000530:	f000 fb29 	bl	8000b86 <HAL_NVIC_SetPriority>
}
 8000534:	bf00      	nop
 8000536:	3740      	adds	r7, #64	; 0x40
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	10624dd3 	.word	0x10624dd3

08000540 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000544:	4b15      	ldr	r3, [pc, #84]	; (800059c <MX_SPI1_Init+0x5c>)
 8000546:	4a16      	ldr	r2, [pc, #88]	; (80005a0 <MX_SPI1_Init+0x60>)
 8000548:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800054a:	4b14      	ldr	r3, [pc, #80]	; (800059c <MX_SPI1_Init+0x5c>)
 800054c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000550:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000552:	4b12      	ldr	r3, [pc, #72]	; (800059c <MX_SPI1_Init+0x5c>)
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000558:	4b10      	ldr	r3, [pc, #64]	; (800059c <MX_SPI1_Init+0x5c>)
 800055a:	2200      	movs	r2, #0
 800055c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_SPI1_Init+0x5c>)
 8000560:	2202      	movs	r2, #2
 8000562:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000564:	4b0d      	ldr	r3, [pc, #52]	; (800059c <MX_SPI1_Init+0x5c>)
 8000566:	2201      	movs	r2, #1
 8000568:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <MX_SPI1_Init+0x5c>)
 800056c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000570:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000572:	4b0a      	ldr	r3, [pc, #40]	; (800059c <MX_SPI1_Init+0x5c>)
 8000574:	2230      	movs	r2, #48	; 0x30
 8000576:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000578:	4b08      	ldr	r3, [pc, #32]	; (800059c <MX_SPI1_Init+0x5c>)
 800057a:	2200      	movs	r2, #0
 800057c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800057e:	4b07      	ldr	r3, [pc, #28]	; (800059c <MX_SPI1_Init+0x5c>)
 8000580:	2200      	movs	r2, #0
 8000582:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <MX_SPI1_Init+0x5c>)
 8000586:	2200      	movs	r2, #0
 8000588:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800058a:	4b04      	ldr	r3, [pc, #16]	; (800059c <MX_SPI1_Init+0x5c>)
 800058c:	220a      	movs	r2, #10
 800058e:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_SPI_Init(&hspi1);
 8000590:	4802      	ldr	r0, [pc, #8]	; (800059c <MX_SPI1_Init+0x5c>)
 8000592:	f002 fce5 	bl	8002f60 <HAL_SPI_Init>

}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000098 	.word	0x20000098
 80005a0:	40013000 	.word	0x40013000

080005a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a15      	ldr	r2, [pc, #84]	; (8000608 <HAL_SPI_MspInit+0x64>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d123      	bne.n	80005fe <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <HAL_SPI_MspInit+0x68>)
 80005b8:	699b      	ldr	r3, [r3, #24]
 80005ba:	4a14      	ldr	r2, [pc, #80]	; (800060c <HAL_SPI_MspInit+0x68>)
 80005bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005c0:	6193      	str	r3, [r2, #24]
 80005c2:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_SPI_MspInit+0x68>)
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80005ce:	23a0      	movs	r3, #160	; 0xa0
 80005d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d2:	2302      	movs	r3, #2
 80005d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d6:	2303      	movs	r3, #3
 80005d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005da:	f107 0310 	add.w	r3, r7, #16
 80005de:	4619      	mov	r1, r3
 80005e0:	480b      	ldr	r0, [pc, #44]	; (8000610 <HAL_SPI_MspInit+0x6c>)
 80005e2:	f000 fb21 	bl	8000c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005e6:	2340      	movs	r3, #64	; 0x40
 80005e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f2:	f107 0310 	add.w	r3, r7, #16
 80005f6:	4619      	mov	r1, r3
 80005f8:	4805      	ldr	r0, [pc, #20]	; (8000610 <HAL_SPI_MspInit+0x6c>)
 80005fa:	f000 fb15 	bl	8000c28 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80005fe:	bf00      	nop
 8000600:	3720      	adds	r7, #32
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40013000 	.word	0x40013000
 800060c:	40021000 	.word	0x40021000
 8000610:	40010800 	.word	0x40010800

08000614 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800061a:	4b18      	ldr	r3, [pc, #96]	; (800067c <HAL_MspInit+0x68>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	4a17      	ldr	r2, [pc, #92]	; (800067c <HAL_MspInit+0x68>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	6193      	str	r3, [r2, #24]
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <HAL_MspInit+0x68>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000632:	2003      	movs	r0, #3
 8000634:	f000 fa9c 	bl	8000b70 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000638:	2200      	movs	r2, #0
 800063a:	2100      	movs	r1, #0
 800063c:	f06f 000b 	mvn.w	r0, #11
 8000640:	f000 faa1 	bl	8000b86 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000644:	2200      	movs	r2, #0
 8000646:	2100      	movs	r1, #0
 8000648:	f06f 000a 	mvn.w	r0, #10
 800064c:	f000 fa9b 	bl	8000b86 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000650:	2200      	movs	r2, #0
 8000652:	2100      	movs	r1, #0
 8000654:	f06f 0009 	mvn.w	r0, #9
 8000658:	f000 fa95 	bl	8000b86 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800065c:	2200      	movs	r2, #0
 800065e:	2100      	movs	r1, #0
 8000660:	f06f 0003 	mvn.w	r0, #3
 8000664:	f000 fa8f 	bl	8000b86 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	2100      	movs	r1, #0
 800066c:	f04f 30ff 	mov.w	r0, #4294967295
 8000670:	f000 fa89 	bl	8000b86 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40021000 	.word	0x40021000

08000680 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000684:	f000 f996 	bl	80009b4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000688:	f000 fac2 	bl	8000c10 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}

08000690 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
 80006a0:	e00a      	b.n	80006b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80006a2:	f3af 8000 	nop.w
 80006a6:	4601      	mov	r1, r0
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	1c5a      	adds	r2, r3, #1
 80006ac:	60ba      	str	r2, [r7, #8]
 80006ae:	b2ca      	uxtb	r2, r1
 80006b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	3301      	adds	r3, #1
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	697a      	ldr	r2, [r7, #20]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	429a      	cmp	r2, r3
 80006be:	dbf0      	blt.n	80006a2 <_read+0x12>
	}

return len;
 80006c0:	687b      	ldr	r3, [r7, #4]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3718      	adds	r7, #24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b086      	sub	sp, #24
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	60f8      	str	r0, [r7, #12]
 80006d2:	60b9      	str	r1, [r7, #8]
 80006d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	e009      	b.n	80006f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	1c5a      	adds	r2, r3, #1
 80006e0:	60ba      	str	r2, [r7, #8]
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 f8fb 	bl	80008e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	3301      	adds	r3, #1
 80006ee:	617b      	str	r3, [r7, #20]
 80006f0:	697a      	ldr	r2, [r7, #20]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	dbf1      	blt.n	80006dc <_write+0x12>
	}
	return len;
 80006f8:	687b      	ldr	r3, [r7, #4]
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3718      	adds	r7, #24
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <_close>:

int _close(int file)
{
 8000702:	b480      	push	{r7}
 8000704:	b083      	sub	sp, #12
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
	return -1;
 800070a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800070e:	4618      	mov	r0, r3
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr

08000718 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000728:	605a      	str	r2, [r3, #4]
	return 0;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr

08000736 <_isatty>:

int _isatty(int file)
{
 8000736:	b480      	push	{r7}
 8000738:	b083      	sub	sp, #12
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
	return 1;
 800073e:	2301      	movs	r3, #1
}
 8000740:	4618      	mov	r0, r3
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr

0800074a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800074a:	b480      	push	{r7}
 800074c:	b085      	sub	sp, #20
 800074e:	af00      	add	r7, sp, #0
 8000750:	60f8      	str	r0, [r7, #12]
 8000752:	60b9      	str	r1, [r7, #8]
 8000754:	607a      	str	r2, [r7, #4]
	return 0;
 8000756:	2300      	movs	r3, #0
}
 8000758:	4618      	mov	r0, r3
 800075a:	3714      	adds	r7, #20
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr
	...

08000764 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <_sbrk+0x50>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d102      	bne.n	800077a <_sbrk+0x16>
		heap_end = &end;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <_sbrk+0x50>)
 8000776:	4a10      	ldr	r2, [pc, #64]	; (80007b8 <_sbrk+0x54>)
 8000778:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <_sbrk+0x50>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <_sbrk+0x50>)
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4413      	add	r3, r2
 8000788:	466a      	mov	r2, sp
 800078a:	4293      	cmp	r3, r2
 800078c:	d907      	bls.n	800079e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800078e:	f002 feb9 	bl	8003504 <__errno>
 8000792:	4602      	mov	r2, r0
 8000794:	230c      	movs	r3, #12
 8000796:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000798:	f04f 33ff 	mov.w	r3, #4294967295
 800079c:	e006      	b.n	80007ac <_sbrk+0x48>
	}

	heap_end += incr;
 800079e:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <_sbrk+0x50>)
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4413      	add	r3, r2
 80007a6:	4a03      	ldr	r2, [pc, #12]	; (80007b4 <_sbrk+0x50>)
 80007a8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80007aa:	68fb      	ldr	r3, [r7, #12]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000084 	.word	0x20000084
 80007b8:	20000138 	.word	0x20000138

080007bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <SystemInit+0x5c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a14      	ldr	r2, [pc, #80]	; (8000818 <SystemInit+0x5c>)
 80007c6:	f043 0301 	orr.w	r3, r3, #1
 80007ca:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <SystemInit+0x5c>)
 80007ce:	685a      	ldr	r2, [r3, #4]
 80007d0:	4911      	ldr	r1, [pc, #68]	; (8000818 <SystemInit+0x5c>)
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <SystemInit+0x60>)
 80007d4:	4013      	ands	r3, r2
 80007d6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <SystemInit+0x5c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a0e      	ldr	r2, [pc, #56]	; (8000818 <SystemInit+0x5c>)
 80007de:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80007e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007e6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80007e8:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <SystemInit+0x5c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a0a      	ldr	r2, [pc, #40]	; (8000818 <SystemInit+0x5c>)
 80007ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007f2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <SystemInit+0x5c>)
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	4a07      	ldr	r2, [pc, #28]	; (8000818 <SystemInit+0x5c>)
 80007fa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80007fe:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <SystemInit+0x5c>)
 8000802:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000806:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <SystemInit+0x64>)
 800080a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800080e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	40021000 	.word	0x40021000
 800081c:	f8ff0000 	.word	0xf8ff0000
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000828:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_USART1_UART_Init+0x40>)
 800082a:	4a0f      	ldr	r2, [pc, #60]	; (8000868 <MX_USART1_UART_Init+0x44>)
 800082c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800082e:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <MX_USART1_UART_Init+0x40>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_USART1_UART_Init+0x40>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_USART1_UART_Init+0x40>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_USART1_UART_Init+0x40>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_USART1_UART_Init+0x40>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b05      	ldr	r3, [pc, #20]	; (8000864 <MX_USART1_UART_Init+0x40>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b03      	ldr	r3, [pc, #12]	; (8000864 <MX_USART1_UART_Init+0x40>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart1);
 800085a:	4802      	ldr	r0, [pc, #8]	; (8000864 <MX_USART1_UART_Init+0x40>)
 800085c:	f002 fc06 	bl	800306c <HAL_UART_Init>

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	200000f0 	.word	0x200000f0
 8000868:	40013800 	.word	0x40013800

0800086c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a16      	ldr	r2, [pc, #88]	; (80008d4 <HAL_UART_MspInit+0x68>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d125      	bne.n	80008ca <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <HAL_UART_MspInit+0x6c>)
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	4a15      	ldr	r2, [pc, #84]	; (80008d8 <HAL_UART_MspInit+0x6c>)
 8000884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000888:	6193      	str	r3, [r2, #24]
 800088a:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <HAL_UART_MspInit+0x6c>)
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000896:	f44f 7300 	mov.w	r3, #512	; 0x200
 800089a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	2302      	movs	r3, #2
 800089e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a0:	2303      	movs	r3, #3
 80008a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a4:	f107 0310 	add.w	r3, r7, #16
 80008a8:	4619      	mov	r1, r3
 80008aa:	480c      	ldr	r0, [pc, #48]	; (80008dc <HAL_UART_MspInit+0x70>)
 80008ac:	f000 f9bc 	bl	8000c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	f107 0310 	add.w	r3, r7, #16
 80008c2:	4619      	mov	r1, r3
 80008c4:	4805      	ldr	r0, [pc, #20]	; (80008dc <HAL_UART_MspInit+0x70>)
 80008c6:	f000 f9af 	bl	8000c28 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80008ca:	bf00      	nop
 80008cc:	3720      	adds	r7, #32
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40013800 	.word	0x40013800
 80008d8:	40021000 	.word	0x40021000
 80008dc:	40010800 	.word	0x40010800

080008e0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80008e8:	1d39      	adds	r1, r7, #4
 80008ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008ee:	2201      	movs	r2, #1
 80008f0:	4803      	ldr	r0, [pc, #12]	; (8000900 <__io_putchar+0x20>)
 80008f2:	f002 fc04 	bl	80030fe <HAL_UART_Transmit>

  return ch;
 80008f6:	687b      	ldr	r3, [r7, #4]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200000f0 	.word	0x200000f0

08000904 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000904:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000906:	e003      	b.n	8000910 <LoopCopyDataInit>

08000908 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800090a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800090c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800090e:	3104      	adds	r1, #4

08000910 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000910:	480a      	ldr	r0, [pc, #40]	; (800093c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000914:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000916:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000918:	d3f6      	bcc.n	8000908 <CopyDataInit>
  ldr r2, =_sbss
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800091c:	e002      	b.n	8000924 <LoopFillZerobss>

0800091e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000920:	f842 3b04 	str.w	r3, [r2], #4

08000924 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000926:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000928:	d3f9      	bcc.n	800091e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800092a:	f7ff ff47 	bl	80007bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800092e:	f002 fdef 	bl	8003510 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000932:	f7ff fd63 	bl	80003fc <main>
  bx lr
 8000936:	4770      	bx	lr
  ldr r3, =_sidata
 8000938:	08004564 	.word	0x08004564
  ldr r0, =_sdata
 800093c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000940:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 8000944:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 8000948:	20000134 	.word	0x20000134

0800094c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800094c:	e7fe      	b.n	800094c <ADC1_2_IRQHandler>
	...

08000950 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <HAL_Init+0x28>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a07      	ldr	r2, [pc, #28]	; (8000978 <HAL_Init+0x28>)
 800095a:	f043 0310 	orr.w	r3, r3, #16
 800095e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000960:	2003      	movs	r0, #3
 8000962:	f000 f905 	bl	8000b70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000966:	2000      	movs	r0, #0
 8000968:	f000 f808 	bl	800097c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800096c:	f7ff fe52 	bl	8000614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40022000 	.word	0x40022000

0800097c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000984:	f001 fcc4 	bl	8002310 <HAL_RCC_GetHCLKFreq>
 8000988:	4602      	mov	r2, r0
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_InitTick+0x34>)
 800098c:	fba3 2302 	umull	r2, r3, r3, r2
 8000990:	099b      	lsrs	r3, r3, #6
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f913 	bl	8000bbe <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000998:	2200      	movs	r2, #0
 800099a:	6879      	ldr	r1, [r7, #4]
 800099c:	f04f 30ff 	mov.w	r0, #4294967295
 80009a0:	f000 f8f1 	bl	8000b86 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	10624dd3 	.word	0x10624dd3

080009b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  uwTick++;
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <HAL_IncTick+0x18>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	3301      	adds	r3, #1
 80009be:	4a03      	ldr	r2, [pc, #12]	; (80009cc <HAL_IncTick+0x18>)
 80009c0:	6013      	str	r3, [r2, #0]
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	20000088 	.word	0x20000088

080009d0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return uwTick;
 80009d4:	4b02      	ldr	r3, [pc, #8]	; (80009e0 <HAL_GetTick+0x10>)
 80009d6:	681b      	ldr	r3, [r3, #0]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	20000088 	.word	0x20000088

080009e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 80009f0:	f7ff ffee 	bl	80009d0 <HAL_GetTick>
 80009f4:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80009f6:	bf00      	nop
 80009f8:	f7ff ffea 	bl	80009d0 <HAL_GetTick>
 80009fc:	4602      	mov	r2, r0
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	1ad2      	subs	r2, r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d3f7      	bcc.n	80009f8 <HAL_Delay+0x14>
  {
  }
}
 8000a08:	bf00      	nop
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <NVIC_SetPriorityGrouping+0x44>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a42:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <NVIC_SetPriorityGrouping+0x44>)
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	60d3      	str	r3, [r2, #12]
}
 8000a48:	bf00      	nop
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a5c:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <NVIC_GetPriorityGrouping+0x18>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	0a1b      	lsrs	r3, r3, #8
 8000a62:	f003 0307 	and.w	r3, r3, #7
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	6039      	str	r1, [r7, #0]
 8000a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	da0b      	bge.n	8000aa0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	490c      	ldr	r1, [pc, #48]	; (8000ac0 <NVIC_SetPriority+0x4c>)
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	f003 030f 	and.w	r3, r3, #15
 8000a94:	3b04      	subs	r3, #4
 8000a96:	0112      	lsls	r2, r2, #4
 8000a98:	b2d2      	uxtb	r2, r2
 8000a9a:	440b      	add	r3, r1
 8000a9c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a9e:	e009      	b.n	8000ab4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	4907      	ldr	r1, [pc, #28]	; (8000ac4 <NVIC_SetPriority+0x50>)
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	0112      	lsls	r2, r2, #4
 8000aac:	b2d2      	uxtb	r2, r2
 8000aae:	440b      	add	r3, r1
 8000ab0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000ed00 	.word	0xe000ed00
 8000ac4:	e000e100 	.word	0xe000e100

08000ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b089      	sub	sp, #36	; 0x24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f003 0307 	and.w	r3, r3, #7
 8000ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	f1c3 0307 	rsb	r3, r3, #7
 8000ae2:	2b04      	cmp	r3, #4
 8000ae4:	bf28      	it	cs
 8000ae6:	2304      	movcs	r3, #4
 8000ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	3304      	adds	r3, #4
 8000aee:	2b06      	cmp	r3, #6
 8000af0:	d902      	bls.n	8000af8 <NVIC_EncodePriority+0x30>
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3b03      	subs	r3, #3
 8000af6:	e000      	b.n	8000afa <NVIC_EncodePriority+0x32>
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	f04f 32ff 	mov.w	r2, #4294967295
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	43da      	mvns	r2, r3
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	401a      	ands	r2, r3
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b10:	f04f 31ff 	mov.w	r1, #4294967295
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1a:	43d9      	mvns	r1, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b20:	4313      	orrs	r3, r2
         );
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3724      	adds	r7, #36	; 0x24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr

08000b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b3c:	d301      	bcc.n	8000b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e00f      	b.n	8000b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <SysTick_Config+0x40>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b4a:	210f      	movs	r1, #15
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	f7ff ff90 	bl	8000a74 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <SysTick_Config+0x40>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b5a:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <SysTick_Config+0x40>)
 8000b5c:	2207      	movs	r2, #7
 8000b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	e000e010 	.word	0xe000e010

08000b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff ff49 	bl	8000a10 <NVIC_SetPriorityGrouping>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b086      	sub	sp, #24
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
 8000b92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b98:	f7ff ff5e 	bl	8000a58 <NVIC_GetPriorityGrouping>
 8000b9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	68b9      	ldr	r1, [r7, #8]
 8000ba2:	6978      	ldr	r0, [r7, #20]
 8000ba4:	f7ff ff90 	bl	8000ac8 <NVIC_EncodePriority>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff5f 	bl	8000a74 <NVIC_SetPriority>
}
 8000bb6:	bf00      	nop
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f7ff ffb0 	bl	8000b2c <SysTick_Config>
 8000bcc:	4603      	mov	r3, r0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	d106      	bne.n	8000bf4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a08      	ldr	r2, [pc, #32]	; (8000c0c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000bec:	f043 0304 	orr.w	r3, r3, #4
 8000bf0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000bf2:	e005      	b.n	8000c00 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000bfa:	f023 0304 	bic.w	r3, r3, #4
 8000bfe:	6013      	str	r3, [r2, #0]
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000e010 	.word	0xe000e010

08000c10 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000c14:	f000 f802 	bl	8000c1c <HAL_SYSTICK_Callback>
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b08b      	sub	sp, #44	; 0x2c
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
 8000c4a:	e133      	b.n	8000eb4 <HAL_GPIO_Init+0x28c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	61fb      	str	r3, [r7, #28]
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	69fa      	ldr	r2, [r7, #28]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	f040 8122 	bne.w	8000eae <HAL_GPIO_Init+0x286>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	2b12      	cmp	r3, #18
 8000c70:	d034      	beq.n	8000cdc <HAL_GPIO_Init+0xb4>
 8000c72:	2b12      	cmp	r3, #18
 8000c74:	d80d      	bhi.n	8000c92 <HAL_GPIO_Init+0x6a>
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d02b      	beq.n	8000cd2 <HAL_GPIO_Init+0xaa>
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	d804      	bhi.n	8000c88 <HAL_GPIO_Init+0x60>
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d031      	beq.n	8000ce6 <HAL_GPIO_Init+0xbe>
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d01c      	beq.n	8000cc0 <HAL_GPIO_Init+0x98>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 8000c86:	e048      	b.n	8000d1a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000c88:	2b03      	cmp	r3, #3
 8000c8a:	d043      	beq.n	8000d14 <HAL_GPIO_Init+0xec>
 8000c8c:	2b11      	cmp	r3, #17
 8000c8e:	d01b      	beq.n	8000cc8 <HAL_GPIO_Init+0xa0>
          break;
 8000c90:	e043      	b.n	8000d1a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000c92:	4a8d      	ldr	r2, [pc, #564]	; (8000ec8 <HAL_GPIO_Init+0x2a0>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d026      	beq.n	8000ce6 <HAL_GPIO_Init+0xbe>
 8000c98:	4a8b      	ldr	r2, [pc, #556]	; (8000ec8 <HAL_GPIO_Init+0x2a0>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d806      	bhi.n	8000cac <HAL_GPIO_Init+0x84>
 8000c9e:	4a8b      	ldr	r2, [pc, #556]	; (8000ecc <HAL_GPIO_Init+0x2a4>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d020      	beq.n	8000ce6 <HAL_GPIO_Init+0xbe>
 8000ca4:	4a8a      	ldr	r2, [pc, #552]	; (8000ed0 <HAL_GPIO_Init+0x2a8>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d01d      	beq.n	8000ce6 <HAL_GPIO_Init+0xbe>
          break;
 8000caa:	e036      	b.n	8000d1a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000cac:	4a89      	ldr	r2, [pc, #548]	; (8000ed4 <HAL_GPIO_Init+0x2ac>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d019      	beq.n	8000ce6 <HAL_GPIO_Init+0xbe>
 8000cb2:	4a89      	ldr	r2, [pc, #548]	; (8000ed8 <HAL_GPIO_Init+0x2b0>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d016      	beq.n	8000ce6 <HAL_GPIO_Init+0xbe>
 8000cb8:	4a88      	ldr	r2, [pc, #544]	; (8000edc <HAL_GPIO_Init+0x2b4>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d013      	beq.n	8000ce6 <HAL_GPIO_Init+0xbe>
          break;
 8000cbe:	e02c      	b.n	8000d1a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	623b      	str	r3, [r7, #32]
          break;
 8000cc6:	e028      	b.n	8000d1a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	623b      	str	r3, [r7, #32]
          break;
 8000cd0:	e023      	b.n	8000d1a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	3308      	adds	r3, #8
 8000cd8:	623b      	str	r3, [r7, #32]
          break;
 8000cda:	e01e      	b.n	8000d1a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	330c      	adds	r3, #12
 8000ce2:	623b      	str	r3, [r7, #32]
          break;
 8000ce4:	e019      	b.n	8000d1a <HAL_GPIO_Init+0xf2>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d102      	bne.n	8000cf4 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cee:	2304      	movs	r3, #4
 8000cf0:	623b      	str	r3, [r7, #32]
          break; 
 8000cf2:	e012      	b.n	8000d1a <HAL_GPIO_Init+0xf2>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d105      	bne.n	8000d08 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cfc:	2308      	movs	r3, #8
 8000cfe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	69fa      	ldr	r2, [r7, #28]
 8000d04:	611a      	str	r2, [r3, #16]
          break; 
 8000d06:	e008      	b.n	8000d1a <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d08:	2308      	movs	r3, #8
 8000d0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	69fa      	ldr	r2, [r7, #28]
 8000d10:	615a      	str	r2, [r3, #20]
          break; 
 8000d12:	e002      	b.n	8000d1a <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d14:	2300      	movs	r3, #0
 8000d16:	623b      	str	r3, [r7, #32]
          break;
 8000d18:	bf00      	nop
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	2bff      	cmp	r3, #255	; 0xff
 8000d1e:	d801      	bhi.n	8000d24 <HAL_GPIO_Init+0xfc>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	e001      	b.n	8000d28 <HAL_GPIO_Init+0x100>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3304      	adds	r3, #4
 8000d28:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	2bff      	cmp	r3, #255	; 0xff
 8000d2e:	d802      	bhi.n	8000d36 <HAL_GPIO_Init+0x10e>
 8000d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	e002      	b.n	8000d3c <HAL_GPIO_Init+0x114>
 8000d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d38:	3b08      	subs	r3, #8
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	613b      	str	r3, [r7, #16]
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	210f      	movs	r1, #15
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	401a      	ands	r2, r3
 8000d4e:	6a39      	ldr	r1, [r7, #32]
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	431a      	orrs	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	601a      	str	r2, [r3, #0]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	f000 80a2 	beq.w	8000eae <HAL_GPIO_Init+0x286>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d6a:	4b5d      	ldr	r3, [pc, #372]	; (8000ee0 <HAL_GPIO_Init+0x2b8>)
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	4a5c      	ldr	r2, [pc, #368]	; (8000ee0 <HAL_GPIO_Init+0x2b8>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6193      	str	r3, [r2, #24]
 8000d76:	4b5a      	ldr	r3, [pc, #360]	; (8000ee0 <HAL_GPIO_Init+0x2b8>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2];
 8000d82:	4a58      	ldr	r2, [pc, #352]	; (8000ee4 <HAL_GPIO_Init+0x2bc>)
 8000d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d86:	089b      	lsrs	r3, r3, #2
 8000d88:	3302      	adds	r3, #2
 8000d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d8e:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d92:	f003 0303 	and.w	r3, r3, #3
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	220f      	movs	r2, #15
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	4013      	ands	r3, r2
 8000da4:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a4f      	ldr	r2, [pc, #316]	; (8000ee8 <HAL_GPIO_Init+0x2c0>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d01f      	beq.n	8000dee <HAL_GPIO_Init+0x1c6>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a4e      	ldr	r2, [pc, #312]	; (8000eec <HAL_GPIO_Init+0x2c4>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d019      	beq.n	8000dea <HAL_GPIO_Init+0x1c2>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a4d      	ldr	r2, [pc, #308]	; (8000ef0 <HAL_GPIO_Init+0x2c8>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d013      	beq.n	8000de6 <HAL_GPIO_Init+0x1be>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a4c      	ldr	r2, [pc, #304]	; (8000ef4 <HAL_GPIO_Init+0x2cc>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d00d      	beq.n	8000de2 <HAL_GPIO_Init+0x1ba>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a4b      	ldr	r2, [pc, #300]	; (8000ef8 <HAL_GPIO_Init+0x2d0>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d007      	beq.n	8000dde <HAL_GPIO_Init+0x1b6>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a4a      	ldr	r2, [pc, #296]	; (8000efc <HAL_GPIO_Init+0x2d4>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d101      	bne.n	8000dda <HAL_GPIO_Init+0x1b2>
 8000dd6:	2305      	movs	r3, #5
 8000dd8:	e00a      	b.n	8000df0 <HAL_GPIO_Init+0x1c8>
 8000dda:	2306      	movs	r3, #6
 8000ddc:	e008      	b.n	8000df0 <HAL_GPIO_Init+0x1c8>
 8000dde:	2304      	movs	r3, #4
 8000de0:	e006      	b.n	8000df0 <HAL_GPIO_Init+0x1c8>
 8000de2:	2303      	movs	r3, #3
 8000de4:	e004      	b.n	8000df0 <HAL_GPIO_Init+0x1c8>
 8000de6:	2302      	movs	r3, #2
 8000de8:	e002      	b.n	8000df0 <HAL_GPIO_Init+0x1c8>
 8000dea:	2301      	movs	r3, #1
 8000dec:	e000      	b.n	8000df0 <HAL_GPIO_Init+0x1c8>
 8000dee:	2300      	movs	r3, #0
 8000df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000df2:	f002 0203 	and.w	r2, r2, #3
 8000df6:	0092      	lsls	r2, r2, #2
 8000df8:	4093      	lsls	r3, r2
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2] = temp;
 8000e00:	4938      	ldr	r1, [pc, #224]	; (8000ee4 <HAL_GPIO_Init+0x2bc>)
 8000e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e04:	089b      	lsrs	r3, r3, #2
 8000e06:	3302      	adds	r3, #2
 8000e08:	697a      	ldr	r2, [r7, #20]
 8000e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d006      	beq.n	8000e28 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000e1a:	4b39      	ldr	r3, [pc, #228]	; (8000f00 <HAL_GPIO_Init+0x2d8>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	4938      	ldr	r1, [pc, #224]	; (8000f00 <HAL_GPIO_Init+0x2d8>)
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	600b      	str	r3, [r1, #0]
 8000e26:	e006      	b.n	8000e36 <HAL_GPIO_Init+0x20e>
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8000e28:	4b35      	ldr	r3, [pc, #212]	; (8000f00 <HAL_GPIO_Init+0x2d8>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	4933      	ldr	r1, [pc, #204]	; (8000f00 <HAL_GPIO_Init+0x2d8>)
 8000e32:	4013      	ands	r3, r2
 8000e34:	600b      	str	r3, [r1, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d006      	beq.n	8000e50 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000e42:	4b2f      	ldr	r3, [pc, #188]	; (8000f00 <HAL_GPIO_Init+0x2d8>)
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	492e      	ldr	r1, [pc, #184]	; (8000f00 <HAL_GPIO_Init+0x2d8>)
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	604b      	str	r3, [r1, #4]
 8000e4e:	e006      	b.n	8000e5e <HAL_GPIO_Init+0x236>
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8000e50:	4b2b      	ldr	r3, [pc, #172]	; (8000f00 <HAL_GPIO_Init+0x2d8>)
 8000e52:	685a      	ldr	r2, [r3, #4]
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	43db      	mvns	r3, r3
 8000e58:	4929      	ldr	r1, [pc, #164]	; (8000f00 <HAL_GPIO_Init+0x2d8>)
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	604b      	str	r3, [r1, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d006      	beq.n	8000e78 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000e6a:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <HAL_GPIO_Init+0x2d8>)
 8000e6c:	689a      	ldr	r2, [r3, #8]
 8000e6e:	4924      	ldr	r1, [pc, #144]	; (8000f00 <HAL_GPIO_Init+0x2d8>)
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	608b      	str	r3, [r1, #8]
 8000e76:	e006      	b.n	8000e86 <HAL_GPIO_Init+0x25e>
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8000e78:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <HAL_GPIO_Init+0x2d8>)
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	491f      	ldr	r1, [pc, #124]	; (8000f00 <HAL_GPIO_Init+0x2d8>)
 8000e82:	4013      	ands	r3, r2
 8000e84:	608b      	str	r3, [r1, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d006      	beq.n	8000ea0 <HAL_GPIO_Init+0x278>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000e92:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <HAL_GPIO_Init+0x2d8>)
 8000e94:	68da      	ldr	r2, [r3, #12]
 8000e96:	491a      	ldr	r1, [pc, #104]	; (8000f00 <HAL_GPIO_Init+0x2d8>)
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	60cb      	str	r3, [r1, #12]
 8000e9e:	e006      	b.n	8000eae <HAL_GPIO_Init+0x286>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8000ea0:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <HAL_GPIO_Init+0x2d8>)
 8000ea2:	68da      	ldr	r2, [r3, #12]
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	4915      	ldr	r1, [pc, #84]	; (8000f00 <HAL_GPIO_Init+0x2d8>)
 8000eaa:	4013      	ands	r3, r2
 8000eac:	60cb      	str	r3, [r1, #12]
  for (position = 0; position < GPIO_NUMBER; position++)
 8000eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8000eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb6:	2b0f      	cmp	r3, #15
 8000eb8:	f67f aec8 	bls.w	8000c4c <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	372c      	adds	r7, #44	; 0x2c
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	10210000 	.word	0x10210000
 8000ecc:	10110000 	.word	0x10110000
 8000ed0:	10120000 	.word	0x10120000
 8000ed4:	10310000 	.word	0x10310000
 8000ed8:	10320000 	.word	0x10320000
 8000edc:	10220000 	.word	0x10220000
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40010000 	.word	0x40010000
 8000ee8:	40010800 	.word	0x40010800
 8000eec:	40010c00 	.word	0x40010c00
 8000ef0:	40011000 	.word	0x40011000
 8000ef4:	40011400 	.word	0x40011400
 8000ef8:	40011800 	.word	0x40011800
 8000efc:	40011c00 	.word	0x40011c00
 8000f00:	40010400 	.word	0x40010400

08000f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_BIT_RESET: to clear the port pin
  *            @arg GPIO_BIT_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	807b      	strh	r3, [r7, #2]
 8000f10:	4613      	mov	r3, r2
 8000f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f14:	787b      	ldrb	r3, [r7, #1]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f1a:	887a      	ldrh	r2, [r7, #2]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000f20:	e003      	b.n	8000f2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000f22:	887b      	ldrh	r3, [r7, #2]
 8000f24:	041a      	lsls	r2, r3, #16
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	611a      	str	r2, [r3, #16]
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr

08000f34 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL is not disabled when USB OTG FS clock is enabled (specific to devices with USB FS)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b0f0      	sub	sp, #448	; 0x1c0
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 819e 	beq.w	8001290 <HAL_RCC_OscConfig+0x35c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f54:	4bb9      	ldr	r3, [pc, #740]	; (800123c <HAL_RCC_OscConfig+0x308>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 030c 	and.w	r3, r3, #12
 8000f5c:	2b04      	cmp	r3, #4
 8000f5e:	d00c      	beq.n	8000f7a <HAL_RCC_OscConfig+0x46>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f60:	4bb6      	ldr	r3, [pc, #728]	; (800123c <HAL_RCC_OscConfig+0x308>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 030c 	and.w	r3, r3, #12
 8000f68:	2b08      	cmp	r3, #8
 8000f6a:	d14f      	bne.n	800100c <HAL_RCC_OscConfig+0xd8>
 8000f6c:	4bb3      	ldr	r3, [pc, #716]	; (800123c <HAL_RCC_OscConfig+0x308>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f78:	d148      	bne.n	800100c <HAL_RCC_OscConfig+0xd8>
 8000f7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f7e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f82:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8000f86:	fa93 f3a3 	rbit	r3, r3
 8000f8a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000f8e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f92:	fab3 f383 	clz	r3, r3
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	095b      	lsrs	r3, r3, #5
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d102      	bne.n	8000fac <HAL_RCC_OscConfig+0x78>
 8000fa6:	4ba5      	ldr	r3, [pc, #660]	; (800123c <HAL_RCC_OscConfig+0x308>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	e00b      	b.n	8000fc4 <HAL_RCC_OscConfig+0x90>
 8000fac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fb0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000fb8:	fa93 f3a3 	rbit	r3, r3
 8000fbc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8000fc0:	4b9e      	ldr	r3, [pc, #632]	; (800123c <HAL_RCC_OscConfig+0x308>)
 8000fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fc8:	f8c7 21a8 	str.w	r2, [r7, #424]	; 0x1a8
 8000fcc:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8000fd0:	fa92 f2a2 	rbit	r2, r2
 8000fd4:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
  return(result);
 8000fd8:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8000fdc:	fab2 f282 	clz	r2, r2
 8000fe0:	b252      	sxtb	r2, r2
 8000fe2:	f042 0220 	orr.w	r2, r2, #32
 8000fe6:	b252      	sxtb	r2, r2
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	f002 021f 	and.w	r2, r2, #31
 8000fee:	40d3      	lsrs	r3, r2
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	f000 814a 	beq.w	800128e <HAL_RCC_OscConfig+0x35a>
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	f040 8144 	bne.w	800128e <HAL_RCC_OscConfig+0x35a>
      {
        return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	f000 be7b 	b.w	8001d02 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 800100c:	4b8b      	ldr	r3, [pc, #556]	; (800123c <HAL_RCC_OscConfig+0x308>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a8a      	ldr	r2, [pc, #552]	; (800123c <HAL_RCC_OscConfig+0x308>)
 8001012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4b88      	ldr	r3, [pc, #544]	; (800123c <HAL_RCC_OscConfig+0x308>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a87      	ldr	r2, [pc, #540]	; (800123c <HAL_RCC_OscConfig+0x308>)
 800101e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001022:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001024:	f7ff fcd4 	bl	80009d0 <HAL_GetTick>
 8001028:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800102c:	e00a      	b.n	8001044 <HAL_RCC_OscConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800102e:	f7ff fccf 	bl	80009d0 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b64      	cmp	r3, #100	; 0x64
 800103c:	d902      	bls.n	8001044 <HAL_RCC_OscConfig+0x110>
        {
          return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	f000 be5f 	b.w	8001d02 <HAL_RCC_OscConfig+0xdce>
 8001044:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001048:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001050:	fa93 f3a3 	rbit	r3, r3
 8001054:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  return(result);
 8001058:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800105c:	fab3 f383 	clz	r3, r3
 8001060:	b2db      	uxtb	r3, r3
 8001062:	095b      	lsrs	r3, r3, #5
 8001064:	b2db      	uxtb	r3, r3
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b01      	cmp	r3, #1
 800106e:	d102      	bne.n	8001076 <HAL_RCC_OscConfig+0x142>
 8001070:	4b72      	ldr	r3, [pc, #456]	; (800123c <HAL_RCC_OscConfig+0x308>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	e00b      	b.n	800108e <HAL_RCC_OscConfig+0x15a>
 8001076:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800107a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001082:	fa93 f3a3 	rbit	r3, r3
 8001086:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800108a:	4b6c      	ldr	r3, [pc, #432]	; (800123c <HAL_RCC_OscConfig+0x308>)
 800108c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001092:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
 8001096:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 800109a:	fa92 f2a2 	rbit	r2, r2
 800109e:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
  return(result);
 80010a2:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80010a6:	fab2 f282 	clz	r2, r2
 80010aa:	b252      	sxtb	r2, r2
 80010ac:	f042 0220 	orr.w	r2, r2, #32
 80010b0:	b252      	sxtb	r2, r2
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	f002 021f 	and.w	r2, r2, #31
 80010b8:	40d3      	lsrs	r3, r2
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1b5      	bne.n	800102e <HAL_RCC_OscConfig+0xfa>
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010cc:	d106      	bne.n	80010dc <HAL_RCC_OscConfig+0x1a8>
 80010ce:	4b5b      	ldr	r3, [pc, #364]	; (800123c <HAL_RCC_OscConfig+0x308>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a5a      	ldr	r2, [pc, #360]	; (800123c <HAL_RCC_OscConfig+0x308>)
 80010d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	e030      	b.n	800113e <HAL_RCC_OscConfig+0x20a>
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d10c      	bne.n	8001100 <HAL_RCC_OscConfig+0x1cc>
 80010e6:	4b55      	ldr	r3, [pc, #340]	; (800123c <HAL_RCC_OscConfig+0x308>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a54      	ldr	r2, [pc, #336]	; (800123c <HAL_RCC_OscConfig+0x308>)
 80010ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	4b52      	ldr	r3, [pc, #328]	; (800123c <HAL_RCC_OscConfig+0x308>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a51      	ldr	r2, [pc, #324]	; (800123c <HAL_RCC_OscConfig+0x308>)
 80010f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	e01e      	b.n	800113e <HAL_RCC_OscConfig+0x20a>
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800110a:	d10c      	bne.n	8001126 <HAL_RCC_OscConfig+0x1f2>
 800110c:	4b4b      	ldr	r3, [pc, #300]	; (800123c <HAL_RCC_OscConfig+0x308>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a4a      	ldr	r2, [pc, #296]	; (800123c <HAL_RCC_OscConfig+0x308>)
 8001112:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001116:	6013      	str	r3, [r2, #0]
 8001118:	4b48      	ldr	r3, [pc, #288]	; (800123c <HAL_RCC_OscConfig+0x308>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a47      	ldr	r2, [pc, #284]	; (800123c <HAL_RCC_OscConfig+0x308>)
 800111e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	e00b      	b.n	800113e <HAL_RCC_OscConfig+0x20a>
 8001126:	4b45      	ldr	r3, [pc, #276]	; (800123c <HAL_RCC_OscConfig+0x308>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a44      	ldr	r2, [pc, #272]	; (800123c <HAL_RCC_OscConfig+0x308>)
 800112c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	4b42      	ldr	r3, [pc, #264]	; (800123c <HAL_RCC_OscConfig+0x308>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a41      	ldr	r2, [pc, #260]	; (800123c <HAL_RCC_OscConfig+0x308>)
 8001138:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800113c:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d04f      	beq.n	80011e8 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001148:	f7ff fc42 	bl	80009d0 <HAL_GetTick>
 800114c:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001150:	e00a      	b.n	8001168 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001152:	f7ff fc3d 	bl	80009d0 <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b64      	cmp	r3, #100	; 0x64
 8001160:	d902      	bls.n	8001168 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	f000 bdcd 	b.w	8001d02 <HAL_RCC_OscConfig+0xdce>
 8001168:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800116c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001170:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001174:	fa93 f3a3 	rbit	r3, r3
 8001178:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
  return(result);
 800117c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001180:	fab3 f383 	clz	r3, r3
 8001184:	b2db      	uxtb	r3, r3
 8001186:	095b      	lsrs	r3, r3, #5
 8001188:	b2db      	uxtb	r3, r3
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b01      	cmp	r3, #1
 8001192:	d102      	bne.n	800119a <HAL_RCC_OscConfig+0x266>
 8001194:	4b29      	ldr	r3, [pc, #164]	; (800123c <HAL_RCC_OscConfig+0x308>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	e00b      	b.n	80011b2 <HAL_RCC_OscConfig+0x27e>
 800119a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800119e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80011a6:	fa93 f3a3 	rbit	r3, r3
 80011aa:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80011ae:	4b23      	ldr	r3, [pc, #140]	; (800123c <HAL_RCC_OscConfig+0x308>)
 80011b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011b6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80011ba:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80011be:	fa92 f2a2 	rbit	r2, r2
 80011c2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return(result);
 80011c6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80011ca:	fab2 f282 	clz	r2, r2
 80011ce:	b252      	sxtb	r2, r2
 80011d0:	f042 0220 	orr.w	r2, r2, #32
 80011d4:	b252      	sxtb	r2, r2
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	f002 021f 	and.w	r2, r2, #31
 80011dc:	40d3      	lsrs	r3, r2
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0b5      	beq.n	8001152 <HAL_RCC_OscConfig+0x21e>
 80011e6:	e053      	b.n	8001290 <HAL_RCC_OscConfig+0x35c>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e8:	f7ff fbf2 	bl	80009d0 <HAL_GetTick>
 80011ec:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f0:	e00a      	b.n	8001208 <HAL_RCC_OscConfig+0x2d4>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f2:	f7ff fbed 	bl	80009d0 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b64      	cmp	r3, #100	; 0x64
 8001200:	d902      	bls.n	8001208 <HAL_RCC_OscConfig+0x2d4>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	f000 bd7d 	b.w	8001d02 <HAL_RCC_OscConfig+0xdce>
 8001208:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800120c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001210:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001214:	fa93 f3a3 	rbit	r3, r3
 8001218:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  return(result);
 800121c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001220:	fab3 f383 	clz	r3, r3
 8001224:	b2db      	uxtb	r3, r3
 8001226:	095b      	lsrs	r3, r3, #5
 8001228:	b2db      	uxtb	r3, r3
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b01      	cmp	r3, #1
 8001232:	d105      	bne.n	8001240 <HAL_RCC_OscConfig+0x30c>
 8001234:	4b01      	ldr	r3, [pc, #4]	; (800123c <HAL_RCC_OscConfig+0x308>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	e00e      	b.n	8001258 <HAL_RCC_OscConfig+0x324>
 800123a:	bf00      	nop
 800123c:	40021000 	.word	0x40021000
 8001240:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001244:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001248:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800124c:	fa93 f3a3 	rbit	r3, r3
 8001250:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001254:	4bce      	ldr	r3, [pc, #824]	; (8001590 <HAL_RCC_OscConfig+0x65c>)
 8001256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001258:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800125c:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 8001260:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8001264:	fa92 f2a2 	rbit	r2, r2
 8001268:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
  return(result);
 800126c:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8001270:	fab2 f282 	clz	r2, r2
 8001274:	b252      	sxtb	r2, r2
 8001276:	f042 0220 	orr.w	r2, r2, #32
 800127a:	b252      	sxtb	r2, r2
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	f002 021f 	and.w	r2, r2, #31
 8001282:	40d3      	lsrs	r3, r2
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1b2      	bne.n	80011f2 <HAL_RCC_OscConfig+0x2be>
 800128c:	e000      	b.n	8001290 <HAL_RCC_OscConfig+0x35c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800128e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 8151 	beq.w	8001542 <HAL_RCC_OscConfig+0x60e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012a0:	4bbb      	ldr	r3, [pc, #748]	; (8001590 <HAL_RCC_OscConfig+0x65c>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 030c 	and.w	r3, r3, #12
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d00b      	beq.n	80012c4 <HAL_RCC_OscConfig+0x390>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012ac:	4bb8      	ldr	r3, [pc, #736]	; (8001590 <HAL_RCC_OscConfig+0x65c>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 030c 	and.w	r3, r3, #12
 80012b4:	2b08      	cmp	r3, #8
 80012b6:	d163      	bne.n	8001380 <HAL_RCC_OscConfig+0x44c>
 80012b8:	4bb5      	ldr	r3, [pc, #724]	; (8001590 <HAL_RCC_OscConfig+0x65c>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d15d      	bne.n	8001380 <HAL_RCC_OscConfig+0x44c>
 80012c4:	2302      	movs	r3, #2
 80012c6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ca:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80012ce:	fa93 f3a3 	rbit	r3, r3
 80012d2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  return(result);
 80012d6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012da:	fab3 f383 	clz	r3, r3
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	095b      	lsrs	r3, r3, #5
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d102      	bne.n	80012f4 <HAL_RCC_OscConfig+0x3c0>
 80012ee:	4ba8      	ldr	r3, [pc, #672]	; (8001590 <HAL_RCC_OscConfig+0x65c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	e00a      	b.n	800130a <HAL_RCC_OscConfig+0x3d6>
 80012f4:	2302      	movs	r3, #2
 80012f6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fa:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80012fe:	fa93 f3a3 	rbit	r3, r3
 8001302:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001306:	4ba2      	ldr	r3, [pc, #648]	; (8001590 <HAL_RCC_OscConfig+0x65c>)
 8001308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130a:	2202      	movs	r2, #2
 800130c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001310:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001314:	fa92 f2a2 	rbit	r2, r2
 8001318:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return(result);
 800131c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001320:	fab2 f282 	clz	r2, r2
 8001324:	b252      	sxtb	r2, r2
 8001326:	f042 0220 	orr.w	r2, r2, #32
 800132a:	b252      	sxtb	r2, r2
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	f002 021f 	and.w	r2, r2, #31
 8001332:	40d3      	lsrs	r3, r2
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	2b00      	cmp	r3, #0
 800133a:	d007      	beq.n	800134c <HAL_RCC_OscConfig+0x418>
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d002      	beq.n	800134c <HAL_RCC_OscConfig+0x418>
      {
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	f000 bcdb 	b.w	8001d02 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800134c:	4b90      	ldr	r3, [pc, #576]	; (8001590 <HAL_RCC_OscConfig+0x65c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6959      	ldr	r1, [r3, #20]
 800135a:	23f8      	movs	r3, #248	; 0xf8
 800135c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001360:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001364:	fa93 f3a3 	rbit	r3, r3
 8001368:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  return(result);
 800136c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001370:	fab3 f383 	clz	r3, r3
 8001374:	fa01 f303 	lsl.w	r3, r1, r3
 8001378:	4985      	ldr	r1, [pc, #532]	; (8001590 <HAL_RCC_OscConfig+0x65c>)
 800137a:	4313      	orrs	r3, r2
 800137c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137e:	e0e0      	b.n	8001542 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d07a      	beq.n	8001480 <HAL_RCC_OscConfig+0x54c>
 800138a:	2301      	movs	r3, #1
 800138c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001390:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001394:	fa93 f3a3 	rbit	r3, r3
 8001398:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return(result);
 800139c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a0:	fab3 f383 	clz	r3, r3
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80013aa:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80013ae:	461a      	mov	r2, r3
 80013b0:	2301      	movs	r3, #1
 80013b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b4:	f7ff fb0c 	bl	80009d0 <HAL_GetTick>
 80013b8:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013bc:	e00a      	b.n	80013d4 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013be:	f7ff fb07 	bl	80009d0 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d902      	bls.n	80013d4 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	f000 bc97 	b.w	8001d02 <HAL_RCC_OscConfig+0xdce>
 80013d4:	2302      	movs	r3, #2
 80013d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80013de:	fa93 f3a3 	rbit	r3, r3
 80013e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return(result);
 80013e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ea:	fab3 f383 	clz	r3, r3
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	095b      	lsrs	r3, r3, #5
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d102      	bne.n	8001404 <HAL_RCC_OscConfig+0x4d0>
 80013fe:	4b64      	ldr	r3, [pc, #400]	; (8001590 <HAL_RCC_OscConfig+0x65c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	e00a      	b.n	800141a <HAL_RCC_OscConfig+0x4e6>
 8001404:	2302      	movs	r3, #2
 8001406:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800140e:	fa93 f3a3 	rbit	r3, r3
 8001412:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001416:	4b5e      	ldr	r3, [pc, #376]	; (8001590 <HAL_RCC_OscConfig+0x65c>)
 8001418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141a:	2202      	movs	r2, #2
 800141c:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8001420:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001424:	fa92 f2a2 	rbit	r2, r2
 8001428:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
  return(result);
 800142c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001430:	fab2 f282 	clz	r2, r2
 8001434:	b252      	sxtb	r2, r2
 8001436:	f042 0220 	orr.w	r2, r2, #32
 800143a:	b252      	sxtb	r2, r2
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	f002 021f 	and.w	r2, r2, #31
 8001442:	40d3      	lsrs	r3, r2
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0b8      	beq.n	80013be <HAL_RCC_OscConfig+0x48a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144c:	4b50      	ldr	r3, [pc, #320]	; (8001590 <HAL_RCC_OscConfig+0x65c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6959      	ldr	r1, [r3, #20]
 800145a:	23f8      	movs	r3, #248	; 0xf8
 800145c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001460:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001464:	fa93 f3a3 	rbit	r3, r3
 8001468:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  return(result);
 800146c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001470:	fab3 f383 	clz	r3, r3
 8001474:	fa01 f303 	lsl.w	r3, r1, r3
 8001478:	4945      	ldr	r1, [pc, #276]	; (8001590 <HAL_RCC_OscConfig+0x65c>)
 800147a:	4313      	orrs	r3, r2
 800147c:	600b      	str	r3, [r1, #0]
 800147e:	e060      	b.n	8001542 <HAL_RCC_OscConfig+0x60e>
 8001480:	2301      	movs	r3, #1
 8001482:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001486:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800148a:	fa93 f3a3 	rbit	r3, r3
 800148e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return(result);
 8001492:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001496:	fab3 f383 	clz	r3, r3
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80014a0:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80014a4:	461a      	mov	r2, r3
 80014a6:	2300      	movs	r3, #0
 80014a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014aa:	f7ff fa91 	bl	80009d0 <HAL_GetTick>
 80014ae:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b2:	e00a      	b.n	80014ca <HAL_RCC_OscConfig+0x596>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014b4:	f7ff fa8c 	bl	80009d0 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d902      	bls.n	80014ca <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	f000 bc1c 	b.w	8001d02 <HAL_RCC_OscConfig+0xdce>
 80014ca:	2302      	movs	r3, #2
 80014cc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80014d4:	fa93 f3a3 	rbit	r3, r3
 80014d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  return(result);
 80014dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e0:	fab3 f383 	clz	r3, r3
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	095b      	lsrs	r3, r3, #5
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d102      	bne.n	80014fa <HAL_RCC_OscConfig+0x5c6>
 80014f4:	4b26      	ldr	r3, [pc, #152]	; (8001590 <HAL_RCC_OscConfig+0x65c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	e00a      	b.n	8001510 <HAL_RCC_OscConfig+0x5dc>
 80014fa:	2302      	movs	r3, #2
 80014fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001500:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001504:	fa93 f3a3 	rbit	r3, r3
 8001508:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800150c:	4b20      	ldr	r3, [pc, #128]	; (8001590 <HAL_RCC_OscConfig+0x65c>)
 800150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001510:	2202      	movs	r2, #2
 8001512:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8001516:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800151a:	fa92 f2a2 	rbit	r2, r2
 800151e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
  return(result);
 8001522:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001526:	fab2 f282 	clz	r2, r2
 800152a:	b252      	sxtb	r2, r2
 800152c:	f042 0220 	orr.w	r2, r2, #32
 8001530:	b252      	sxtb	r2, r2
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	f002 021f 	and.w	r2, r2, #31
 8001538:	40d3      	lsrs	r3, r2
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1b8      	bne.n	80014b4 <HAL_RCC_OscConfig+0x580>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0308 	and.w	r3, r3, #8
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 80b7 	beq.w	80016c0 <HAL_RCC_OscConfig+0x78c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d059      	beq.n	8001610 <HAL_RCC_OscConfig+0x6dc>
 800155c:	2301      	movs	r3, #1
 800155e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001562:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001566:	fa93 f3a3 	rbit	r3, r3
 800156a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  return(result);
 800156e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001572:	fab3 f383 	clz	r3, r3
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	461a      	mov	r2, r3
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_RCC_OscConfig+0x660>)
 800157c:	4413      	add	r3, r2
 800157e:	461a      	mov	r2, r3
 8001580:	2301      	movs	r3, #1
 8001582:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001584:	f7ff fa24 	bl	80009d0 <HAL_GetTick>
 8001588:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800158c:	e00e      	b.n	80015ac <HAL_RCC_OscConfig+0x678>
 800158e:	bf00      	nop
 8001590:	40021000 	.word	0x40021000
 8001594:	42420480 	.word	0x42420480
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001598:	f7ff fa1a 	bl	80009d0 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x678>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e3aa      	b.n	8001d02 <HAL_RCC_OscConfig+0xdce>
 80015ac:	2302      	movs	r3, #2
 80015ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80015b6:	fa93 f3a3 	rbit	r3, r3
 80015ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80015be:	2302      	movs	r3, #2
 80015c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80015c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80015c8:	fa93 f3a3 	rbit	r3, r3
 80015cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d0:	4bb0      	ldr	r3, [pc, #704]	; (8001894 <HAL_RCC_OscConfig+0x960>)
 80015d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015d4:	2302      	movs	r3, #2
 80015d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80015da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80015de:	fa93 f3a3 	rbit	r3, r3
 80015e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  return(result);
 80015e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80015ea:	fab3 f383 	clz	r3, r3
 80015ee:	b25b      	sxtb	r3, r3
 80015f0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015f4:	b25b      	sxtb	r3, r3
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	f003 031f 	and.w	r3, r3, #31
 80015fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0c7      	beq.n	8001598 <HAL_RCC_OscConfig+0x664>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software temporization of 1ms 
          should be added.*/
      HAL_Delay(1);
 8001608:	2001      	movs	r0, #1
 800160a:	f7ff f9eb 	bl	80009e4 <HAL_Delay>
 800160e:	e057      	b.n	80016c0 <HAL_RCC_OscConfig+0x78c>
 8001610:	2301      	movs	r3, #1
 8001612:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001616:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800161a:	fa93 f3a3 	rbit	r3, r3
 800161e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  return(result);
 8001622:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001626:	fab3 f383 	clz	r3, r3
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	461a      	mov	r2, r3
 800162e:	4b9a      	ldr	r3, [pc, #616]	; (8001898 <HAL_RCC_OscConfig+0x964>)
 8001630:	4413      	add	r3, r2
 8001632:	461a      	mov	r2, r3
 8001634:	2300      	movs	r3, #0
 8001636:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001638:	f7ff f9ca 	bl	80009d0 <HAL_GetTick>
 800163c:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001640:	e009      	b.n	8001656 <HAL_RCC_OscConfig+0x722>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001642:	f7ff f9c5 	bl	80009d0 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x722>
        {
          return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e355      	b.n	8001d02 <HAL_RCC_OscConfig+0xdce>
 8001656:	2302      	movs	r3, #2
 8001658:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001660:	fa93 f3a3 	rbit	r3, r3
 8001664:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001668:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800166c:	2202      	movs	r2, #2
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	fa93 f2a3 	rbit	r2, r3
 800167a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800167e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001680:	4b84      	ldr	r3, [pc, #528]	; (8001894 <HAL_RCC_OscConfig+0x960>)
 8001682:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001684:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001688:	2102      	movs	r1, #2
 800168a:	6019      	str	r1, [r3, #0]
 800168c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	fa93 f1a3 	rbit	r1, r3
 8001696:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800169a:	6019      	str	r1, [r3, #0]
  return(result);
 800169c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	fab3 f383 	clz	r3, r3
 80016a6:	b25b      	sxtb	r3, r3
 80016a8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	f003 031f 	and.w	r3, r3, #31
 80016b4:	fa22 f303 	lsr.w	r3, r2, r3
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1c0      	bne.n	8001642 <HAL_RCC_OscConfig+0x70e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 8188 	beq.w	80019e0 <HAL_RCC_OscConfig+0xaac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80016d0:	4b70      	ldr	r3, [pc, #448]	; (8001894 <HAL_RCC_OscConfig+0x960>)
 80016d2:	69db      	ldr	r3, [r3, #28]
 80016d4:	4a6f      	ldr	r2, [pc, #444]	; (8001894 <HAL_RCC_OscConfig+0x960>)
 80016d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016da:	61d3      	str	r3, [r2, #28]
 80016dc:	4b6d      	ldr	r3, [pc, #436]	; (8001894 <HAL_RCC_OscConfig+0x960>)
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80016e4:	f107 0308 	add.w	r3, r7, #8
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	f107 0308 	add.w	r3, r7, #8
 80016ee:	681b      	ldr	r3, [r3, #0]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80016f0:	4b6a      	ldr	r3, [pc, #424]	; (800189c <HAL_RCC_OscConfig+0x968>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a69      	ldr	r2, [pc, #420]	; (800189c <HAL_RCC_OscConfig+0x968>)
 80016f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80016fc:	f7ff f968 	bl	80009d0 <HAL_GetTick>
 8001700:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001704:	e009      	b.n	800171a <HAL_RCC_OscConfig+0x7e6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001706:	f7ff f963 	bl	80009d0 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b64      	cmp	r3, #100	; 0x64
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x7e6>
      {
        return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e2f3      	b.n	8001d02 <HAL_RCC_OscConfig+0xdce>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800171a:	4b60      	ldr	r3, [pc, #384]	; (800189c <HAL_RCC_OscConfig+0x968>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0ef      	beq.n	8001706 <HAL_RCC_OscConfig+0x7d2>
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8001726:	4b5b      	ldr	r3, [pc, #364]	; (8001894 <HAL_RCC_OscConfig+0x960>)
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	4a5a      	ldr	r2, [pc, #360]	; (8001894 <HAL_RCC_OscConfig+0x960>)
 800172c:	f023 0301 	bic.w	r3, r3, #1
 8001730:	6213      	str	r3, [r2, #32]
 8001732:	4b58      	ldr	r3, [pc, #352]	; (8001894 <HAL_RCC_OscConfig+0x960>)
 8001734:	6a1b      	ldr	r3, [r3, #32]
 8001736:	4a57      	ldr	r2, [pc, #348]	; (8001894 <HAL_RCC_OscConfig+0x960>)
 8001738:	f023 0304 	bic.w	r3, r3, #4
 800173c:	6213      	str	r3, [r2, #32]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800173e:	f7ff f947 	bl	80009d0 <HAL_GetTick>
 8001742:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
    
    /* Wait till LSE is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001746:	e00b      	b.n	8001760 <HAL_RCC_OscConfig+0x82c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001748:	f7ff f942 	bl	80009d0 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	f241 3288 	movw	r2, #5000	; 0x1388
 8001758:	4293      	cmp	r3, r2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x82c>
      {
        return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e2d0      	b.n	8001d02 <HAL_RCC_OscConfig+0xdce>
 8001760:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001764:	2202      	movs	r2, #2
 8001766:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001768:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	fa93 f2a3 	rbit	r2, r3
 8001772:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800177c:	2202      	movs	r2, #2
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	fa93 f2a3 	rbit	r2, r3
 800178a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800178e:	601a      	str	r2, [r3, #0]
  return(result);
 8001790:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001794:	681b      	ldr	r3, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001796:	fab3 f383 	clz	r3, r3
 800179a:	b2db      	uxtb	r3, r3
 800179c:	095b      	lsrs	r3, r3, #5
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f043 0302 	orr.w	r3, r3, #2
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d102      	bne.n	80017b0 <HAL_RCC_OscConfig+0x87c>
 80017aa:	4b3a      	ldr	r3, [pc, #232]	; (8001894 <HAL_RCC_OscConfig+0x960>)
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	e001      	b.n	80017b4 <HAL_RCC_OscConfig+0x880>
 80017b0:	4b38      	ldr	r3, [pc, #224]	; (8001894 <HAL_RCC_OscConfig+0x960>)
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80017b8:	2102      	movs	r1, #2
 80017ba:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017bc:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80017c0:	6812      	ldr	r2, [r2, #0]
 80017c2:	fa92 f1a2 	rbit	r1, r2
 80017c6:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80017ca:	6011      	str	r1, [r2, #0]
  return(result);
 80017cc:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80017d0:	6812      	ldr	r2, [r2, #0]
 80017d2:	fab2 f282 	clz	r2, r2
 80017d6:	b252      	sxtb	r2, r2
 80017d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017dc:	b252      	sxtb	r2, r2
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	f002 021f 	and.w	r2, r2, #31
 80017e4:	40d3      	lsrs	r3, r2
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1ac      	bne.n	8001748 <HAL_RCC_OscConfig+0x814>
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d106      	bne.n	8001806 <HAL_RCC_OscConfig+0x8d2>
 80017f8:	4b26      	ldr	r3, [pc, #152]	; (8001894 <HAL_RCC_OscConfig+0x960>)
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	4a25      	ldr	r2, [pc, #148]	; (8001894 <HAL_RCC_OscConfig+0x960>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6213      	str	r3, [r2, #32]
 8001804:	e02f      	b.n	8001866 <HAL_RCC_OscConfig+0x932>
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10c      	bne.n	800182a <HAL_RCC_OscConfig+0x8f6>
 8001810:	4b20      	ldr	r3, [pc, #128]	; (8001894 <HAL_RCC_OscConfig+0x960>)
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	4a1f      	ldr	r2, [pc, #124]	; (8001894 <HAL_RCC_OscConfig+0x960>)
 8001816:	f023 0301 	bic.w	r3, r3, #1
 800181a:	6213      	str	r3, [r2, #32]
 800181c:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <HAL_RCC_OscConfig+0x960>)
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	4a1c      	ldr	r2, [pc, #112]	; (8001894 <HAL_RCC_OscConfig+0x960>)
 8001822:	f023 0304 	bic.w	r3, r3, #4
 8001826:	6213      	str	r3, [r2, #32]
 8001828:	e01d      	b.n	8001866 <HAL_RCC_OscConfig+0x932>
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	2b05      	cmp	r3, #5
 8001832:	d10c      	bne.n	800184e <HAL_RCC_OscConfig+0x91a>
 8001834:	4b17      	ldr	r3, [pc, #92]	; (8001894 <HAL_RCC_OscConfig+0x960>)
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	4a16      	ldr	r2, [pc, #88]	; (8001894 <HAL_RCC_OscConfig+0x960>)
 800183a:	f043 0304 	orr.w	r3, r3, #4
 800183e:	6213      	str	r3, [r2, #32]
 8001840:	4b14      	ldr	r3, [pc, #80]	; (8001894 <HAL_RCC_OscConfig+0x960>)
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	4a13      	ldr	r2, [pc, #76]	; (8001894 <HAL_RCC_OscConfig+0x960>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6213      	str	r3, [r2, #32]
 800184c:	e00b      	b.n	8001866 <HAL_RCC_OscConfig+0x932>
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <HAL_RCC_OscConfig+0x960>)
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	4a10      	ldr	r2, [pc, #64]	; (8001894 <HAL_RCC_OscConfig+0x960>)
 8001854:	f023 0301 	bic.w	r3, r3, #1
 8001858:	6213      	str	r3, [r2, #32]
 800185a:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <HAL_RCC_OscConfig+0x960>)
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	4a0d      	ldr	r2, [pc, #52]	; (8001894 <HAL_RCC_OscConfig+0x960>)
 8001860:	f023 0304 	bic.w	r3, r3, #4
 8001864:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d05f      	beq.n	8001930 <HAL_RCC_OscConfig+0x9fc>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001870:	f7ff f8ae 	bl	80009d0 <HAL_GetTick>
 8001874:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001878:	e012      	b.n	80018a0 <HAL_RCC_OscConfig+0x96c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800187a:	f7ff f8a9 	bl	80009d0 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	f241 3288 	movw	r2, #5000	; 0x1388
 800188a:	4293      	cmp	r3, r2
 800188c:	d908      	bls.n	80018a0 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e237      	b.n	8001d02 <HAL_RCC_OscConfig+0xdce>
 8001892:	bf00      	nop
 8001894:	40021000 	.word	0x40021000
 8001898:	42420480 	.word	0x42420480
 800189c:	40007000 	.word	0x40007000
 80018a0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018a4:	2202      	movs	r2, #2
 80018a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	fa93 f2a3 	rbit	r2, r3
 80018b2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80018bc:	2202      	movs	r2, #2
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	fa93 f2a3 	rbit	r2, r3
 80018ca:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80018ce:	601a      	str	r2, [r3, #0]
  return(result);
 80018d0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80018d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d6:	fab3 f383 	clz	r3, r3
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	095b      	lsrs	r3, r3, #5
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d102      	bne.n	80018f0 <HAL_RCC_OscConfig+0x9bc>
 80018ea:	4bb2      	ldr	r3, [pc, #712]	; (8001bb4 <HAL_RCC_OscConfig+0xc80>)
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	e001      	b.n	80018f4 <HAL_RCC_OscConfig+0x9c0>
 80018f0:	4bb0      	ldr	r3, [pc, #704]	; (8001bb4 <HAL_RCC_OscConfig+0xc80>)
 80018f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80018f8:	2102      	movs	r1, #2
 80018fa:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001900:	6812      	ldr	r2, [r2, #0]
 8001902:	fa92 f1a2 	rbit	r1, r2
 8001906:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800190a:	6011      	str	r1, [r2, #0]
  return(result);
 800190c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001910:	6812      	ldr	r2, [r2, #0]
 8001912:	fab2 f282 	clz	r2, r2
 8001916:	b252      	sxtb	r2, r2
 8001918:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800191c:	b252      	sxtb	r2, r2
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	f002 021f 	and.w	r2, r2, #31
 8001924:	40d3      	lsrs	r3, r2
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0a5      	beq.n	800187a <HAL_RCC_OscConfig+0x946>
 800192e:	e057      	b.n	80019e0 <HAL_RCC_OscConfig+0xaac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001930:	f7ff f84e 	bl	80009d0 <HAL_GetTick>
 8001934:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001938:	e00b      	b.n	8001952 <HAL_RCC_OscConfig+0xa1e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800193a:	f7ff f849 	bl	80009d0 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	f241 3288 	movw	r2, #5000	; 0x1388
 800194a:	4293      	cmp	r3, r2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0xa1e>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e1d7      	b.n	8001d02 <HAL_RCC_OscConfig+0xdce>
 8001952:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001956:	2202      	movs	r2, #2
 8001958:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	fa93 f2a3 	rbit	r2, r3
 8001964:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800196e:	2202      	movs	r2, #2
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	fa93 f2a3 	rbit	r2, r3
 800197c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001980:	601a      	str	r2, [r3, #0]
  return(result);
 8001982:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001986:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001988:	fab3 f383 	clz	r3, r3
 800198c:	b2db      	uxtb	r3, r3
 800198e:	095b      	lsrs	r3, r3, #5
 8001990:	b2db      	uxtb	r3, r3
 8001992:	f043 0302 	orr.w	r3, r3, #2
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d102      	bne.n	80019a2 <HAL_RCC_OscConfig+0xa6e>
 800199c:	4b85      	ldr	r3, [pc, #532]	; (8001bb4 <HAL_RCC_OscConfig+0xc80>)
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	e001      	b.n	80019a6 <HAL_RCC_OscConfig+0xa72>
 80019a2:	4b84      	ldr	r3, [pc, #528]	; (8001bb4 <HAL_RCC_OscConfig+0xc80>)
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80019aa:	2102      	movs	r1, #2
 80019ac:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ae:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80019b2:	6812      	ldr	r2, [r2, #0]
 80019b4:	fa92 f1a2 	rbit	r1, r2
 80019b8:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80019bc:	6011      	str	r1, [r2, #0]
  return(result);
 80019be:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	fab2 f282 	clz	r2, r2
 80019c8:	b252      	sxtb	r2, r2
 80019ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019ce:	b252      	sxtb	r2, r2
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	f002 021f 	and.w	r2, r2, #31
 80019d6:	40d3      	lsrs	r3, r2
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1ac      	bne.n	800193a <HAL_RCC_OscConfig+0xa06>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 818a 	beq.w	8001d00 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019ec:	4b71      	ldr	r3, [pc, #452]	; (8001bb4 <HAL_RCC_OscConfig+0xc80>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 030c 	and.w	r3, r3, #12
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	f000 8181 	beq.w	8001cfc <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019fa:	1d3b      	adds	r3, r7, #4
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	f040 8107 	bne.w	8001c14 <HAL_RCC_OscConfig+0xce0>
 8001a06:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a10:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	fa93 f2a3 	rbit	r2, r3
 8001a1a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a1e:	601a      	str	r2, [r3, #0]
  return(result);
 8001a20:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a24:	681b      	ldr	r3, [r3, #0]
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a26:	fab3 f383 	clz	r3, r3
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001a30:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001a34:	461a      	mov	r2, r3
 8001a36:	2300      	movs	r3, #0
 8001a38:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3a:	f7fe ffc9 	bl	80009d0 <HAL_GetTick>
 8001a3e:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a42:	e009      	b.n	8001a58 <HAL_RCC_OscConfig+0xb24>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a44:	f7fe ffc4 	bl	80009d0 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0xb24>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e154      	b.n	8001d02 <HAL_RCC_OscConfig+0xdce>
 8001a58:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a62:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	fa93 f2a3 	rbit	r2, r3
 8001a6c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a70:	601a      	str	r2, [r3, #0]
  return(result);
 8001a72:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a76:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a78:	fab3 f383 	clz	r3, r3
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	095b      	lsrs	r3, r3, #5
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d102      	bne.n	8001a92 <HAL_RCC_OscConfig+0xb5e>
 8001a8c:	4b49      	ldr	r3, [pc, #292]	; (8001bb4 <HAL_RCC_OscConfig+0xc80>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	e00e      	b.n	8001ab0 <HAL_RCC_OscConfig+0xb7c>
 8001a92:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	fa93 f2a3 	rbit	r2, r3
 8001aa6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	4b41      	ldr	r3, [pc, #260]	; (8001bb4 <HAL_RCC_OscConfig+0xc80>)
 8001aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001ab4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ab8:	6011      	str	r1, [r2, #0]
 8001aba:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	fa92 f1a2 	rbit	r1, r2
 8001ac4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001ac8:	6011      	str	r1, [r2, #0]
  return(result);
 8001aca:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	fab2 f282 	clz	r2, r2
 8001ad4:	b252      	sxtb	r2, r2
 8001ad6:	f042 0220 	orr.w	r2, r2, #32
 8001ada:	b252      	sxtb	r2, r2
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	f002 021f 	and.w	r2, r2, #31
 8001ae2:	40d3      	lsrs	r3, r2
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1ab      	bne.n	8001a44 <HAL_RCC_OscConfig+0xb10>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af6:	d109      	bne.n	8001b0c <HAL_RCC_OscConfig+0xbd8>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001af8:	4b2e      	ldr	r3, [pc, #184]	; (8001bb4 <HAL_RCC_OscConfig+0xc80>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	492b      	ldr	r1, [pc, #172]	; (8001bb4 <HAL_RCC_OscConfig+0xc80>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b0c:	4b29      	ldr	r3, [pc, #164]	; (8001bb4 <HAL_RCC_OscConfig+0xc80>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6a19      	ldr	r1, [r3, #32]
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b20:	430b      	orrs	r3, r1
 8001b22:	4924      	ldr	r1, [pc, #144]	; (8001bb4 <HAL_RCC_OscConfig+0xc80>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	604b      	str	r3, [r1, #4]
 8001b28:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	fa93 f2a3 	rbit	r2, r3
 8001b3c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b40:	601a      	str	r2, [r3, #0]
  return(result);
 8001b42:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b46:	681b      	ldr	r3, [r3, #0]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b48:	fab3 f383 	clz	r3, r3
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001b52:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001b56:	461a      	mov	r2, r3
 8001b58:	2301      	movs	r3, #1
 8001b5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7fe ff38 	bl	80009d0 <HAL_GetTick>
 8001b60:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b64:	e009      	b.n	8001b7a <HAL_RCC_OscConfig+0xc46>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b66:	f7fe ff33 	bl	80009d0 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0xc46>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e0c3      	b.n	8001d02 <HAL_RCC_OscConfig+0xdce>
 8001b7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	fa93 f2a3 	rbit	r2, r3
 8001b8e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b92:	601a      	str	r2, [r3, #0]
  return(result);
 8001b94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b98:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b9a:	fab3 f383 	clz	r3, r3
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	095b      	lsrs	r3, r3, #5
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d104      	bne.n	8001bb8 <HAL_RCC_OscConfig+0xc84>
 8001bae:	4b01      	ldr	r3, [pc, #4]	; (8001bb4 <HAL_RCC_OscConfig+0xc80>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	e010      	b.n	8001bd6 <HAL_RCC_OscConfig+0xca2>
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	fa93 f2a3 	rbit	r2, r3
 8001bcc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	4b4e      	ldr	r3, [pc, #312]	; (8001d0c <HAL_RCC_OscConfig+0xdd8>)
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001bda:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bde:	6011      	str	r1, [r2, #0]
 8001be0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001be4:	6812      	ldr	r2, [r2, #0]
 8001be6:	fa92 f1a2 	rbit	r1, r2
 8001bea:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001bee:	6011      	str	r1, [r2, #0]
  return(result);
 8001bf0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001bf4:	6812      	ldr	r2, [r2, #0]
 8001bf6:	fab2 f282 	clz	r2, r2
 8001bfa:	b252      	sxtb	r2, r2
 8001bfc:	f042 0220 	orr.w	r2, r2, #32
 8001c00:	b252      	sxtb	r2, r2
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	f002 021f 	and.w	r2, r2, #31
 8001c08:	40d3      	lsrs	r3, r2
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0a9      	beq.n	8001b66 <HAL_RCC_OscConfig+0xc32>
 8001c12:	e075      	b.n	8001d00 <HAL_RCC_OscConfig+0xdcc>
 8001c14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	fa93 f2a3 	rbit	r2, r3
 8001c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2c:	601a      	str	r2, [r3, #0]
  return(result);
 8001c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c32:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c34:	fab3 f383 	clz	r3, r3
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001c3e:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001c42:	461a      	mov	r2, r3
 8001c44:	2300      	movs	r3, #0
 8001c46:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c48:	f7fe fec2 	bl	80009d0 <HAL_GetTick>
 8001c4c:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c50:	e009      	b.n	8001c66 <HAL_RCC_OscConfig+0xd32>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c52:	f7fe febd 	bl	80009d0 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0xd32>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e04d      	b.n	8001d02 <HAL_RCC_OscConfig+0xdce>
 8001c66:	f107 0320 	add.w	r3, r7, #32
 8001c6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c70:	f107 0320 	add.w	r3, r7, #32
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	fa93 f2a3 	rbit	r2, r3
 8001c7a:	f107 031c 	add.w	r3, r7, #28
 8001c7e:	601a      	str	r2, [r3, #0]
  return(result);
 8001c80:	f107 031c 	add.w	r3, r7, #28
 8001c84:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c86:	fab3 f383 	clz	r3, r3
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	095b      	lsrs	r3, r3, #5
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d102      	bne.n	8001ca0 <HAL_RCC_OscConfig+0xd6c>
 8001c9a:	4b1c      	ldr	r3, [pc, #112]	; (8001d0c <HAL_RCC_OscConfig+0xdd8>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	e00e      	b.n	8001cbe <HAL_RCC_OscConfig+0xd8a>
 8001ca0:	f107 0318 	add.w	r3, r7, #24
 8001ca4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ca8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001caa:	f107 0318 	add.w	r3, r7, #24
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	fa93 f2a3 	rbit	r2, r3
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <HAL_RCC_OscConfig+0xdd8>)
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbe:	f107 0210 	add.w	r2, r7, #16
 8001cc2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cc6:	6011      	str	r1, [r2, #0]
 8001cc8:	f107 0210 	add.w	r2, r7, #16
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	fa92 f1a2 	rbit	r1, r2
 8001cd2:	f107 020c 	add.w	r2, r7, #12
 8001cd6:	6011      	str	r1, [r2, #0]
  return(result);
 8001cd8:	f107 020c 	add.w	r2, r7, #12
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	fab2 f282 	clz	r2, r2
 8001ce2:	b252      	sxtb	r2, r2
 8001ce4:	f042 0220 	orr.w	r2, r2, #32
 8001ce8:	b252      	sxtb	r2, r2
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	f002 021f 	and.w	r2, r2, #31
 8001cf0:	40d3      	lsrs	r3, r2
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1ab      	bne.n	8001c52 <HAL_RCC_OscConfig+0xd1e>
 8001cfa:	e001      	b.n	8001d00 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e000      	b.n	8001d02 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40021000 	.word	0x40021000

08001d10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b0a8      	sub	sp, #160	; 0xa0
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d20:	4bb0      	ldr	r3, [pc, #704]	; (8001fe4 <HAL_RCC_ClockConfig+0x2d4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	f240 812b 	bls.w	8001f86 <HAL_RCC_ClockConfig+0x276>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d30:	4bac      	ldr	r3, [pc, #688]	; (8001fe4 <HAL_RCC_ClockConfig+0x2d4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f023 0207 	bic.w	r2, r3, #7
 8001d38:	49aa      	ldr	r1, [pc, #680]	; (8001fe4 <HAL_RCC_ClockConfig+0x2d4>)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d40:	4ba8      	ldr	r3, [pc, #672]	; (8001fe4 <HAL_RCC_ClockConfig+0x2d4>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d001      	beq.n	8001d52 <HAL_RCC_ClockConfig+0x42>
    {
      return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e25d      	b.n	800220e <HAL_RCC_ClockConfig+0x4fe>
    }
    
#endif /* FLASH_ACR_LATENCY */
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d008      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x60>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d5e:	4ba2      	ldr	r3, [pc, #648]	; (8001fe8 <HAL_RCC_ClockConfig+0x2d8>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	499f      	ldr	r1, [pc, #636]	; (8001fe8 <HAL_RCC_ClockConfig+0x2d8>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 8225 	beq.w	80021c8 <HAL_RCC_ClockConfig+0x4b8>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d140      	bne.n	8001e08 <HAL_RCC_ClockConfig+0xf8>
 8001d86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d92:	fa93 f3a3 	rbit	r3, r3
 8001d96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return(result);
 8001d9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9e:	fab3 f383 	clz	r3, r3
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	095b      	lsrs	r3, r3, #5
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d102      	bne.n	8001db8 <HAL_RCC_ClockConfig+0xa8>
 8001db2:	4b8d      	ldr	r3, [pc, #564]	; (8001fe8 <HAL_RCC_ClockConfig+0x2d8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	e00b      	b.n	8001dd0 <HAL_RCC_ClockConfig+0xc0>
 8001db8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dc4:	fa93 f3a3 	rbit	r3, r3
 8001dc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001dcc:	4b86      	ldr	r3, [pc, #536]	; (8001fe8 <HAL_RCC_ClockConfig+0x2d8>)
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dd4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001dd8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001ddc:	fa92 f2a2 	rbit	r2, r2
 8001de0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
  return(result);
 8001de4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001de8:	fab2 f282 	clz	r2, r2
 8001dec:	b252      	sxtb	r2, r2
 8001dee:	f042 0220 	orr.w	r2, r2, #32
 8001df2:	b252      	sxtb	r2, r2
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	f002 021f 	and.w	r2, r2, #31
 8001dfa:	40d3      	lsrs	r3, r2
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d170      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0x1d6>
        {
          return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e202      	b.n	800220e <HAL_RCC_ClockConfig+0x4fe>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d137      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x170>
 8001e10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e1c:	fa93 f3a3 	rbit	r3, r3
 8001e20:	67fb      	str	r3, [r7, #124]	; 0x7c
  return(result);
 8001e22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e24:	fab3 f383 	clz	r3, r3
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	095b      	lsrs	r3, r3, #5
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d102      	bne.n	8001e3e <HAL_RCC_ClockConfig+0x12e>
 8001e38:	4b6b      	ldr	r3, [pc, #428]	; (8001fe8 <HAL_RCC_ClockConfig+0x2d8>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_ClockConfig+0x140>
 8001e3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e42:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e46:	fa93 f3a3 	rbit	r3, r3
 8001e4a:	677b      	str	r3, [r7, #116]	; 0x74
 8001e4c:	4b66      	ldr	r3, [pc, #408]	; (8001fe8 <HAL_RCC_ClockConfig+0x2d8>)
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e54:	673a      	str	r2, [r7, #112]	; 0x70
 8001e56:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001e58:	fa92 f2a2 	rbit	r2, r2
 8001e5c:	66fa      	str	r2, [r7, #108]	; 0x6c
  return(result);
 8001e5e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001e60:	fab2 f282 	clz	r2, r2
 8001e64:	b252      	sxtb	r2, r2
 8001e66:	f042 0220 	orr.w	r2, r2, #32
 8001e6a:	b252      	sxtb	r2, r2
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	f002 021f 	and.w	r2, r2, #31
 8001e72:	40d3      	lsrs	r3, r2
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d134      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0x1d6>
        {
          return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e1c6      	b.n	800220e <HAL_RCC_ClockConfig+0x4fe>
 8001e80:	2302      	movs	r3, #2
 8001e82:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	667b      	str	r3, [r7, #100]	; 0x64
  return(result);
 8001e8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8e:	fab3 f383 	clz	r3, r3
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	095b      	lsrs	r3, r3, #5
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d102      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0x198>
 8001ea2:	4b51      	ldr	r3, [pc, #324]	; (8001fe8 <HAL_RCC_ClockConfig+0x2d8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	e007      	b.n	8001eb8 <HAL_RCC_ClockConfig+0x1a8>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001eae:	fa93 f3a3 	rbit	r3, r3
 8001eb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001eb4:	4b4c      	ldr	r3, [pc, #304]	; (8001fe8 <HAL_RCC_ClockConfig+0x2d8>)
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	2202      	movs	r2, #2
 8001eba:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ebc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ebe:	fa92 f2a2 	rbit	r2, r2
 8001ec2:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001ec4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ec6:	fab2 f282 	clz	r2, r2
 8001eca:	b252      	sxtb	r2, r2
 8001ecc:	f042 0220 	orr.w	r2, r2, #32
 8001ed0:	b252      	sxtb	r2, r2
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	f002 021f 	and.w	r2, r2, #31
 8001ed8:	40d3      	lsrs	r3, r2
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0x1d6>
        {
          return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e193      	b.n	800220e <HAL_RCC_ClockConfig+0x4fe>
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ee6:	4b40      	ldr	r3, [pc, #256]	; (8001fe8 <HAL_RCC_ClockConfig+0x2d8>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f023 0203 	bic.w	r2, r3, #3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	493d      	ldr	r1, [pc, #244]	; (8001fe8 <HAL_RCC_ClockConfig+0x2d8>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	604b      	str	r3, [r1, #4]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef8:	f7fe fd6a 	bl	80009d0 <HAL_GetTick>
 8001efc:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d113      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x220>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f08:	e00b      	b.n	8001f22 <HAL_RCC_ClockConfig+0x212>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f0a:	f7fe fd61 	bl	80009d0 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_ClockConfig+0x212>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e175      	b.n	800220e <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f22:	4b31      	ldr	r3, [pc, #196]	; (8001fe8 <HAL_RCC_ClockConfig+0x2d8>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	d1ed      	bne.n	8001f0a <HAL_RCC_ClockConfig+0x1fa>
 8001f2e:	e14b      	b.n	80021c8 <HAL_RCC_ClockConfig+0x4b8>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d11f      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x268>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f38:	e00b      	b.n	8001f52 <HAL_RCC_ClockConfig+0x242>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f3a:	f7fe fd49 	bl	80009d0 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_ClockConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e15d      	b.n	800220e <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f52:	4b25      	ldr	r3, [pc, #148]	; (8001fe8 <HAL_RCC_ClockConfig+0x2d8>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 030c 	and.w	r3, r3, #12
 8001f5a:	2b08      	cmp	r3, #8
 8001f5c:	d1ed      	bne.n	8001f3a <HAL_RCC_ClockConfig+0x22a>
 8001f5e:	e133      	b.n	80021c8 <HAL_RCC_ClockConfig+0x4b8>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f60:	f7fe fd36 	bl	80009d0 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_ClockConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e14a      	b.n	800220e <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f78:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <HAL_RCC_ClockConfig+0x2d8>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 030c 	and.w	r3, r3, #12
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1ed      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x250>
 8001f84:	e120      	b.n	80021c8 <HAL_RCC_ClockConfig+0x4b8>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d008      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x294>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_RCC_ClockConfig+0x2d8>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	4912      	ldr	r1, [pc, #72]	; (8001fe8 <HAL_RCC_ClockConfig+0x2d8>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	604b      	str	r3, [r1, #4]
    }
    
    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 80fa 	beq.w	80021a6 <HAL_RCC_ClockConfig+0x496>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d139      	bne.n	800202e <HAL_RCC_ClockConfig+0x31e>
 8001fba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fbe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fc2:	fa93 f3a3 	rbit	r3, r3
 8001fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8001fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fca:	fab3 f383 	clz	r3, r3
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	095b      	lsrs	r3, r3, #5
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d106      	bne.n	8001fec <HAL_RCC_ClockConfig+0x2dc>
 8001fde:	4b02      	ldr	r3, [pc, #8]	; (8001fe8 <HAL_RCC_ClockConfig+0x2d8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	e00c      	b.n	8001ffe <HAL_RCC_ClockConfig+0x2ee>
 8001fe4:	40022000 	.word	0x40022000
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ff0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ff4:	fa93 f3a3 	rbit	r3, r3
 8001ff8:	647b      	str	r3, [r7, #68]	; 0x44
 8001ffa:	4b87      	ldr	r3, [pc, #540]	; (8002218 <HAL_RCC_ClockConfig+0x508>)
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002002:	643a      	str	r2, [r7, #64]	; 0x40
 8002004:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002006:	fa92 f2a2 	rbit	r2, r2
 800200a:	63fa      	str	r2, [r7, #60]	; 0x3c
  return(result);
 800200c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800200e:	fab2 f282 	clz	r2, r2
 8002012:	b252      	sxtb	r2, r2
 8002014:	f042 0220 	orr.w	r2, r2, #32
 8002018:	b252      	sxtb	r2, r2
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	f002 021f 	and.w	r2, r2, #31
 8002020:	40d3      	lsrs	r3, r2
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d16e      	bne.n	8002108 <HAL_RCC_ClockConfig+0x3f8>
        {
          return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e0ef      	b.n	800220e <HAL_RCC_ClockConfig+0x4fe>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d135      	bne.n	80020a2 <HAL_RCC_ClockConfig+0x392>
 8002036:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800203a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	095b      	lsrs	r3, r3, #5
 800204e:	b2db      	uxtb	r3, r3
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b01      	cmp	r3, #1
 8002058:	d102      	bne.n	8002060 <HAL_RCC_ClockConfig+0x350>
 800205a:	4b6f      	ldr	r3, [pc, #444]	; (8002218 <HAL_RCC_ClockConfig+0x508>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	e008      	b.n	8002072 <HAL_RCC_ClockConfig+0x362>
 8002060:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002064:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002068:	fa93 f3a3 	rbit	r3, r3
 800206c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800206e:	4b6a      	ldr	r3, [pc, #424]	; (8002218 <HAL_RCC_ClockConfig+0x508>)
 8002070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002072:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002076:	62ba      	str	r2, [r7, #40]	; 0x28
 8002078:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800207a:	fa92 f2a2 	rbit	r2, r2
 800207e:	627a      	str	r2, [r7, #36]	; 0x24
  return(result);
 8002080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002082:	fab2 f282 	clz	r2, r2
 8002086:	b252      	sxtb	r2, r2
 8002088:	f042 0220 	orr.w	r2, r2, #32
 800208c:	b252      	sxtb	r2, r2
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	f002 021f 	and.w	r2, r2, #31
 8002094:	40d3      	lsrs	r3, r2
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d134      	bne.n	8002108 <HAL_RCC_ClockConfig+0x3f8>
        {
          return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e0b5      	b.n	800220e <HAL_RCC_ClockConfig+0x4fe>
 80020a2:	2302      	movs	r3, #2
 80020a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	6a3b      	ldr	r3, [r7, #32]
 80020a8:	fa93 f3a3 	rbit	r3, r3
 80020ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80020ae:	69fb      	ldr	r3, [r7, #28]
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b0:	fab3 f383 	clz	r3, r3
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	095b      	lsrs	r3, r3, #5
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	f043 0301 	orr.w	r3, r3, #1
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d102      	bne.n	80020ca <HAL_RCC_ClockConfig+0x3ba>
 80020c4:	4b54      	ldr	r3, [pc, #336]	; (8002218 <HAL_RCC_ClockConfig+0x508>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	e007      	b.n	80020da <HAL_RCC_ClockConfig+0x3ca>
 80020ca:	2302      	movs	r3, #2
 80020cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	fa93 f3a3 	rbit	r3, r3
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	4b50      	ldr	r3, [pc, #320]	; (8002218 <HAL_RCC_ClockConfig+0x508>)
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	2202      	movs	r2, #2
 80020dc:	613a      	str	r2, [r7, #16]
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	fa92 f2a2 	rbit	r2, r2
 80020e4:	60fa      	str	r2, [r7, #12]
  return(result);
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	fab2 f282 	clz	r2, r2
 80020ec:	b252      	sxtb	r2, r2
 80020ee:	f042 0220 	orr.w	r2, r2, #32
 80020f2:	b252      	sxtb	r2, r2
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	f002 021f 	and.w	r2, r2, #31
 80020fa:	40d3      	lsrs	r3, r2
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_RCC_ClockConfig+0x3f8>
        {
          return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e082      	b.n	800220e <HAL_RCC_ClockConfig+0x4fe>
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002108:	4b43      	ldr	r3, [pc, #268]	; (8002218 <HAL_RCC_ClockConfig+0x508>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f023 0203 	bic.w	r2, r3, #3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	4940      	ldr	r1, [pc, #256]	; (8002218 <HAL_RCC_ClockConfig+0x508>)
 8002116:	4313      	orrs	r3, r2
 8002118:	604b      	str	r3, [r1, #4]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211a:	f7fe fc59 	bl	80009d0 <HAL_GetTick>
 800211e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d113      	bne.n	8002152 <HAL_RCC_ClockConfig+0x442>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800212a:	e00b      	b.n	8002144 <HAL_RCC_ClockConfig+0x434>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800212c:	f7fe fc50 	bl	80009d0 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	f241 3288 	movw	r2, #5000	; 0x1388
 800213c:	4293      	cmp	r3, r2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_ClockConfig+0x434>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e064      	b.n	800220e <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002144:	4b34      	ldr	r3, [pc, #208]	; (8002218 <HAL_RCC_ClockConfig+0x508>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 030c 	and.w	r3, r3, #12
 800214c:	2b04      	cmp	r3, #4
 800214e:	d1ed      	bne.n	800212c <HAL_RCC_ClockConfig+0x41c>
 8002150:	e029      	b.n	80021a6 <HAL_RCC_ClockConfig+0x496>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d11f      	bne.n	800219a <HAL_RCC_ClockConfig+0x48a>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800215a:	e00b      	b.n	8002174 <HAL_RCC_ClockConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800215c:	f7fe fc38 	bl	80009d0 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	f241 3288 	movw	r2, #5000	; 0x1388
 800216c:	4293      	cmp	r3, r2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_ClockConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e04c      	b.n	800220e <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002174:	4b28      	ldr	r3, [pc, #160]	; (8002218 <HAL_RCC_ClockConfig+0x508>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 030c 	and.w	r3, r3, #12
 800217c:	2b08      	cmp	r3, #8
 800217e:	d1ed      	bne.n	800215c <HAL_RCC_ClockConfig+0x44c>
 8002180:	e011      	b.n	80021a6 <HAL_RCC_ClockConfig+0x496>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002182:	f7fe fc25 	bl	80009d0 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002192:	4293      	cmp	r3, r2
 8002194:	d901      	bls.n	800219a <HAL_RCC_ClockConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e039      	b.n	800220e <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800219a:	4b1f      	ldr	r3, [pc, #124]	; (8002218 <HAL_RCC_ClockConfig+0x508>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1ed      	bne.n	8002182 <HAL_RCC_ClockConfig+0x472>
        }
      }      
    } 
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a6:	4b1d      	ldr	r3, [pc, #116]	; (800221c <HAL_RCC_ClockConfig+0x50c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 0207 	bic.w	r2, r3, #7
 80021ae:	491b      	ldr	r1, [pc, #108]	; (800221c <HAL_RCC_ClockConfig+0x50c>)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021b6:	4b19      	ldr	r3, [pc, #100]	; (800221c <HAL_RCC_ClockConfig+0x50c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x4b8>
    {
      return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e022      	b.n	800220e <HAL_RCC_ClockConfig+0x4fe>
    }
  }
#endif /* FLASH_ACR_LATENCY */
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d008      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x4d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021d4:	4b10      	ldr	r3, [pc, #64]	; (8002218 <HAL_RCC_ClockConfig+0x508>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	490d      	ldr	r1, [pc, #52]	; (8002218 <HAL_RCC_ClockConfig+0x508>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d009      	beq.n	8002206 <HAL_RCC_ClockConfig+0x4f6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021f2:	4b09      	ldr	r3, [pc, #36]	; (8002218 <HAL_RCC_ClockConfig+0x508>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4905      	ldr	r1, [pc, #20]	; (8002218 <HAL_RCC_ClockConfig+0x508>)
 8002202:	4313      	orrs	r3, r2
 8002204:	604b      	str	r3, [r1, #4]
  }
 
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002206:	2000      	movs	r0, #0
 8002208:	f7fe fbb8 	bl	800097c <HAL_InitTick>
  
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	37a0      	adds	r7, #160	; 0xa0
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40021000 	.word	0x40021000
 800221c:	40022000 	.word	0x40022000

08002220 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002220:	b490      	push	{r4, r7}
 8002222:	b08e      	sub	sp, #56	; 0x38
 8002224:	af00      	add	r7, sp, #0
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002226:	4b35      	ldr	r3, [pc, #212]	; (80022fc <HAL_RCC_GetSysClockFreq+0xdc>)
 8002228:	1d3c      	adds	r4, r7, #4
 800222a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800222c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8002230:	4b33      	ldr	r3, [pc, #204]	; (8002300 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	62fb      	str	r3, [r7, #44]	; 0x2c
 800223a:	2300      	movs	r3, #0
 800223c:	62bb      	str	r3, [r7, #40]	; 0x28
 800223e:	2300      	movs	r3, #0
 8002240:	637b      	str	r3, [r7, #52]	; 0x34
 8002242:	2300      	movs	r3, #0
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 800224a:	4b2e      	ldr	r3, [pc, #184]	; (8002304 <HAL_RCC_GetSysClockFreq+0xe4>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b04      	cmp	r3, #4
 8002258:	d002      	beq.n	8002260 <HAL_RCC_GetSysClockFreq+0x40>
 800225a:	2b08      	cmp	r3, #8
 800225c:	d003      	beq.n	8002266 <HAL_RCC_GetSysClockFreq+0x46>
 800225e:	e043      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0xc8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002260:	4b29      	ldr	r3, [pc, #164]	; (8002308 <HAL_RCC_GetSysClockFreq+0xe8>)
 8002262:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002264:	e043      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0xce>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8002266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002268:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800226c:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002270:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	fa93 f3a3 	rbit	r3, r3
 8002278:	61fb      	str	r3, [r7, #28]
  return(result);
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	fab3 f383 	clz	r3, r3
 8002280:	fa22 f303 	lsr.w	r3, r2, r3
 8002284:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002288:	4413      	add	r3, r2
 800228a:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d01e      	beq.n	80022d8 <HAL_RCC_GetSysClockFreq+0xb8>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 800229a:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <HAL_RCC_GetSysClockFreq+0xe4>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 80022a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	fa93 f3a3 	rbit	r3, r3
 80022ae:	617b      	str	r3, [r7, #20]
  return(result);
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	fab3 f383 	clz	r3, r3
 80022b6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ba:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022be:	4413      	add	r3, r2
 80022c0:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80022c4:	62bb      	str	r3, [r7, #40]	; 0x28
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 80022c6:	4a10      	ldr	r2, [pc, #64]	; (8002308 <HAL_RCC_GetSysClockFreq+0xe8>)
 80022c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	fb02 f303 	mul.w	r3, r2, r3
 80022d4:	637b      	str	r3, [r7, #52]	; 0x34
 80022d6:	e004      	b.n	80022e2 <HAL_RCC_GetSysClockFreq+0xc2>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	4a0c      	ldr	r2, [pc, #48]	; (800230c <HAL_RCC_GetSysClockFreq+0xec>)
 80022dc:	fb02 f303 	mul.w	r3, r2, r3
 80022e0:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 80022e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022e6:	e002      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0xce>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022e8:	4b07      	ldr	r3, [pc, #28]	; (8002308 <HAL_RCC_GetSysClockFreq+0xe8>)
 80022ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3738      	adds	r7, #56	; 0x38
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc90      	pop	{r4, r7}
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	080044a0 	.word	0x080044a0
 8002300:	080044b0 	.word	0x080044b0
 8002304:	40021000 	.word	0x40021000
 8002308:	007a1200 	.word	0x007a1200
 800230c:	003d0900 	.word	0x003d0900

08002310 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002316:	f7ff ff83 	bl	8002220 <HAL_RCC_GetSysClockFreq>
 800231a:	4601      	mov	r1, r0
 800231c:	4b0d      	ldr	r3, [pc, #52]	; (8002354 <HAL_RCC_GetHCLKFreq+0x44>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002324:	23f0      	movs	r3, #240	; 0xf0
 8002326:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	fa93 f3a3 	rbit	r3, r3
 800232e:	603b      	str	r3, [r7, #0]
  return(result);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	fab3 f383 	clz	r3, r3
 8002336:	fa22 f303 	lsr.w	r3, r2, r3
 800233a:	4a07      	ldr	r2, [pc, #28]	; (8002358 <HAL_RCC_GetHCLKFreq+0x48>)
 800233c:	5cd3      	ldrb	r3, [r2, r3]
 800233e:	fa21 f303 	lsr.w	r3, r1, r3
 8002342:	4a06      	ldr	r2, [pc, #24]	; (800235c <HAL_RCC_GetHCLKFreq+0x4c>)
 8002344:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002346:	4b05      	ldr	r3, [pc, #20]	; (800235c <HAL_RCC_GetHCLKFreq+0x4c>)
 8002348:	681b      	ldr	r3, [r3, #0]
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000
 8002358:	080044b4 	.word	0x080044b4
 800235c:	20000000 	.word	0x20000000

08002360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8002366:	f7ff ffd3 	bl	8002310 <HAL_RCC_GetHCLKFreq>
 800236a:	4601      	mov	r1, r0
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002374:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002378:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	fa93 f3a3 	rbit	r3, r3
 8002380:	603b      	str	r3, [r7, #0]
  return(result);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	fab3 f383 	clz	r3, r3
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
 800238c:	4a04      	ldr	r2, [pc, #16]	; (80023a0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800238e:	5cd3      	ldrb	r3, [r2, r3]
 8002390:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40021000 	.word	0x40021000
 80023a0:	080044b4 	.word	0x080044b4

080023a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80023aa:	f7ff ffb1 	bl	8002310 <HAL_RCC_GetHCLKFreq>
 80023ae:	4601      	mov	r1, r0
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 80023b8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80023bc:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	fa93 f3a3 	rbit	r3, r3
 80023c4:	603b      	str	r3, [r7, #0]
  return(result);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	fab3 f383 	clz	r3, r3
 80023cc:	fa22 f303 	lsr.w	r3, r2, r3
 80023d0:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80023d2:	5cd3      	ldrb	r3, [r2, r3]
 80023d4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40021000 	.word	0x40021000
 80023e4:	080044b4 	.word	0x080044b4

080023e8 <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	4613      	mov	r3, r2
 80023f6:	80fb      	strh	r3, [r7, #6]

  if(hspi->State == HAL_SPI_STATE_READY)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b01      	cmp	r3, #1
 8002402:	f040 812b 	bne.w	800265c <HAL_SPI_Transmit+0x274>
  {
    if((pData == NULL ) || (Size == 0)) 
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <HAL_SPI_Transmit+0x2a>
 800240c:	88fb      	ldrh	r3, [r7, #6]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_SPI_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e123      	b.n	800265e <HAL_SPI_Transmit+0x276>

    /* Check the parameters */
    assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

    /* Process Locked */
    __HAL_LOCK(hspi);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <HAL_SPI_Transmit+0x3c>
 8002420:	2302      	movs	r3, #2
 8002422:	e11c      	b.n	800265e <HAL_SPI_Transmit+0x276>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Configure communication */
    hspi->State = HAL_SPI_STATE_BUSY_TX;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2212      	movs	r2, #18
 8002430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	655a      	str	r2, [r3, #84]	; 0x54

    hspi->pTxBuffPtr  = pData;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->TxXferSize  = Size;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	88fa      	ldrh	r2, [r7, #6]
 8002444:	869a      	strh	r2, [r3, #52]	; 0x34
    hspi->TxXferCount = Size;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	88fa      	ldrh	r2, [r7, #6]
 800244a:	86da      	strh	r2, [r3, #54]	; 0x36

    /*Init field not used in handle to zero */
    hspi->TxISR = 0;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->RxISR = 0;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	649a      	str	r2, [r3, #72]	; 0x48
    hspi->pRxBuffPtr  = NULL;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->RxXferSize  = 0;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	879a      	strh	r2, [r3, #60]	; 0x3c
    hspi->RxXferCount = 0;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	87da      	strh	r2, [r3, #62]	; 0x3e

    /* Reset CRC Calculation */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002472:	d10f      	bne.n	8002494 <HAL_SPI_Transmit+0xac>
    {
      SPI_RESET_CRC(hspi);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002492:	601a      	str	r2, [r3, #0]
    }

    if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800249c:	d107      	bne.n	80024ae <HAL_SPI_Transmit+0xc6>
    {
      /* Configure communication direction : 1Line */
      SPI_1LINE_TX(hspi);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024ac:	601a      	str	r2, [r3, #0]
    }

    /* Check if the SPI is already enabled */ 
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b8:	2b40      	cmp	r3, #64	; 0x40
 80024ba:	d007      	beq.n	80024cc <HAL_SPI_Transmit+0xe4>
    {
      /* Enable SPI peripheral */
      __HAL_SPI_ENABLE(hspi);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024ca:	601a      	str	r2, [r3, #0]
    }

    /* Transmit data in 8 Bit mode */
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d143      	bne.n	800255c <HAL_SPI_Transmit+0x174>
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_SPI_Transmit+0xfc>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d129      	bne.n	8002538 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e8:	1c59      	adds	r1, r3, #1
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	6311      	str	r1, [r2, #48]	; 0x30
 80024ee:	781a      	ldrb	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024fa:	3b01      	subs	r3, #1
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	86da      	strh	r2, [r3, #54]	; 0x36
      }

      while(hspi->TxXferCount > 0)
 8002502:	e019      	b.n	8002538 <HAL_SPI_Transmit+0x150>
      {
        /* Wait until TXE flag is set to send data */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	2200      	movs	r2, #0
 8002508:	2102      	movs	r1, #2
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 fc84 	bl	8002e18 <SPI_WaitOnFlagUntilTimeout>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_SPI_Transmit+0x132>
        { 
          return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e0a1      	b.n	800265e <HAL_SPI_Transmit+0x276>
        }
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	1c59      	adds	r1, r3, #1
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	6311      	str	r1, [r2, #48]	; 0x30
 8002524:	781a      	ldrb	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	86da      	strh	r2, [r3, #54]	; 0x36
      while(hspi->TxXferCount > 0)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1e1      	bne.n	8002504 <HAL_SPI_Transmit+0x11c>
      }
      /* Enable CRC Transmission */
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002544:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002548:	d14f      	bne.n	80025ea <HAL_SPI_Transmit+0x202>
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	e046      	b.n	80025ea <HAL_SPI_Transmit+0x202>
      }
    }
    /* Transmit data in 16 Bit mode */
    else
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_SPI_Transmit+0x184>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002568:	2b01      	cmp	r3, #1
 800256a:	d12d      	bne.n	80025c8 <HAL_SPI_Transmit+0x1e0>
      {
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	881a      	ldrh	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr+=2;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257c:	1c9a      	adds	r2, r3, #2
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002586:	3b01      	subs	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	86da      	strh	r2, [r3, #54]	; 0x36
      }

      while(hspi->TxXferCount > 0)
 800258e:	e01b      	b.n	80025c8 <HAL_SPI_Transmit+0x1e0>
      {
        /* Wait until TXE flag is set to send data */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	2200      	movs	r2, #0
 8002594:	2102      	movs	r1, #2
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 fc3e 	bl	8002e18 <SPI_WaitOnFlagUntilTimeout>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_SPI_Transmit+0x1be>
        { 
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e05b      	b.n	800265e <HAL_SPI_Transmit+0x276>
        }
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	881a      	ldrh	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr+=2;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	1c9a      	adds	r2, r3, #2
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	86da      	strh	r2, [r3, #54]	; 0x36
      while(hspi->TxXferCount > 0)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1df      	bne.n	8002590 <HAL_SPI_Transmit+0x1a8>
      }
      /* Enable CRC Transmission */
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025d8:	d107      	bne.n	80025ea <HAL_SPI_Transmit+0x202>
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80025e8:	601a      	str	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set to send data */
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	2200      	movs	r2, #0
 80025ee:	2102      	movs	r1, #2
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f000 fc11 	bl	8002e18 <SPI_WaitOnFlagUntilTimeout>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d007      	beq.n	800260c <HAL_SPI_Transmit+0x224>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002600:	f043 0210 	orr.w	r2, r3, #16
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e028      	b.n	800265e <HAL_SPI_Transmit+0x276>
    }

    /* Wait until Busy flag is reset before disabling SPI */
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	2201      	movs	r2, #1
 8002610:	2180      	movs	r1, #128	; 0x80
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 fc00 	bl	8002e18 <SPI_WaitOnFlagUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d007      	beq.n	800262e <HAL_SPI_Transmit+0x246>
    { 
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002622:	f043 0210 	orr.w	r2, r3, #16
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e017      	b.n	800265e <HAL_SPI_Transmit+0x276>
    }
 
    /* Clear OVERUN flag in 2 Lines communication mode because received is not read */
    if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d108      	bne.n	8002648 <HAL_SPI_Transmit+0x260>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	697b      	ldr	r3, [r7, #20]
    }

    hspi->State = HAL_SPI_STATE_READY; 
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_OK;
 8002658:	2300      	movs	r3, #0
 800265a:	e000      	b.n	800265e <HAL_SPI_Transmit+0x276>
  }
  else
  {
    return HAL_BUSY;
 800265c:	2302      	movs	r3, #2
  }
}
 800265e:	4618      	mov	r0, r3
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_SPI_Receive>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b088      	sub	sp, #32
 800266a:	af02      	add	r7, sp, #8
 800266c:	60f8      	str	r0, [r7, #12]
 800266e:	60b9      	str	r1, [r7, #8]
 8002670:	603b      	str	r3, [r7, #0]
 8002672:	4613      	mov	r3, r2
 8002674:	80fb      	strh	r3, [r7, #6]
  __IO uint16_t tmpreg = 0;
 8002676:	2300      	movs	r3, #0
 8002678:	82fb      	strh	r3, [r7, #22]

  if(hspi->State == HAL_SPI_STATE_READY)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b01      	cmp	r3, #1
 8002684:	f040 8177 	bne.w	8002976 <HAL_SPI_Receive+0x310>
  {
    if((pData == NULL ) || (Size == 0)) 
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d002      	beq.n	8002694 <HAL_SPI_Receive+0x2e>
 800268e:	88fb      	ldrh	r3, [r7, #6]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_SPI_Receive+0x32>
    {
      return  HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e16f      	b.n	8002978 <HAL_SPI_Receive+0x312>
    }

    /* Process Locked */
    __HAL_LOCK(hspi);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d101      	bne.n	80026a6 <HAL_SPI_Receive+0x40>
 80026a2:	2302      	movs	r3, #2
 80026a4:	e168      	b.n	8002978 <HAL_SPI_Receive+0x312>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Configure communication */
    hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2222      	movs	r2, #34	; 0x22
 80026b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	655a      	str	r2, [r3, #84]	; 0x54

    hspi->pRxBuffPtr  = pData;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->RxXferSize  = Size;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	88fa      	ldrh	r2, [r7, #6]
 80026c6:	879a      	strh	r2, [r3, #60]	; 0x3c
    hspi->RxXferCount = Size;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	88fa      	ldrh	r2, [r7, #6]
 80026cc:	87da      	strh	r2, [r3, #62]	; 0x3e

    /*Init field not used in handle to zero */
    hspi->RxISR = 0;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	649a      	str	r2, [r3, #72]	; 0x48
    hspi->TxISR = 0;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->pTxBuffPtr  = NULL;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->TxXferSize  = 0;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	869a      	strh	r2, [r3, #52]	; 0x34
    hspi->TxXferCount = 0;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	86da      	strh	r2, [r3, #54]	; 0x36

    /* Configure communication direction : 1Line */
    if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026f4:	d107      	bne.n	8002706 <HAL_SPI_Receive+0xa0>
    {
      SPI_1LINE_RX(hspi);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002704:	601a      	str	r2, [r3, #0]
    }

    /* Reset CRC Calculation */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800270e:	d10f      	bne.n	8002730 <HAL_SPI_Receive+0xca>
    {
      SPI_RESET_CRC(hspi);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800272e:	601a      	str	r2, [r3, #0]
    }
    
    if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002738:	d112      	bne.n	8002760 <HAL_SPI_Receive+0xfa>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10e      	bne.n	8002760 <HAL_SPI_Receive+0xfa>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hspi);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
      return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800274a:	88fa      	ldrh	r2, [r7, #6]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	4613      	mov	r3, r2
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	68b9      	ldr	r1, [r7, #8]
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 f912 	bl	8002980 <HAL_SPI_TransmitReceive>
 800275c:	4603      	mov	r3, r0
 800275e:	e10b      	b.n	8002978 <HAL_SPI_Receive+0x312>
    }

    /* Check if the SPI is already enabled */ 
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276a:	2b40      	cmp	r3, #64	; 0x40
 800276c:	d007      	beq.n	800277e <HAL_SPI_Receive+0x118>
    {
      /* Enable SPI peripheral */
      __HAL_SPI_ENABLE(hspi);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800277c:	601a      	str	r2, [r3, #0]
    }

    /* Receive data in 8 Bit mode */
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d14a      	bne.n	800281c <HAL_SPI_Receive+0x1b6>
    {
      while(hspi->RxXferCount > 1)
 8002786:	e01a      	b.n	80027be <HAL_SPI_Receive+0x158>
      {
        /* Wait until RXNE flag is set */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	2200      	movs	r2, #0
 800278c:	2101      	movs	r1, #1
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 fb42 	bl	8002e18 <SPI_WaitOnFlagUntilTimeout>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_SPI_Receive+0x138>
        { 
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e0ec      	b.n	8002978 <HAL_SPI_Receive+0x312>
        }

        (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68d8      	ldr	r0, [r3, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a8:	1c59      	adds	r1, r3, #1
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	6391      	str	r1, [r2, #56]	; 0x38
 80027ae:	b2c2      	uxtb	r2, r0
 80027b0:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	87da      	strh	r2, [r3, #62]	; 0x3e
      while(hspi->RxXferCount > 1)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d8e0      	bhi.n	8002788 <HAL_SPI_Receive+0x122>
      }
      /* Enable CRC Reception */
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ce:	d136      	bne.n	800283e <HAL_SPI_Receive+0x1d8>
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	e02d      	b.n	800283e <HAL_SPI_Receive+0x1d8>
    else
    {
      while(hspi->RxXferCount > 1)
      {
        /* Wait until RXNE flag is set to read data */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2200      	movs	r2, #0
 80027e6:	2101      	movs	r1, #1
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 fb15 	bl	8002e18 <SPI_WaitOnFlagUntilTimeout>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_SPI_Receive+0x192>
        { 
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e0bf      	b.n	8002978 <HAL_SPI_Receive+0x312>
        }

        *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002802:	b292      	uxth	r2, r2
 8002804:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr+=2;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280a:	1c9a      	adds	r2, r3, #2
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002814:	3b01      	subs	r3, #1
 8002816:	b29a      	uxth	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	87da      	strh	r2, [r3, #62]	; 0x3e
      while(hspi->RxXferCount > 1)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002820:	2b01      	cmp	r3, #1
 8002822:	d8de      	bhi.n	80027e2 <HAL_SPI_Receive+0x17c>
      }
      /* Enable CRC Reception */
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800282c:	d107      	bne.n	800283e <HAL_SPI_Receive+0x1d8>
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800283c:	601a      	str	r2, [r3, #0]
      }
    }

    /* Wait until RXNE flag is set */
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	2200      	movs	r2, #0
 8002842:	2101      	movs	r1, #1
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 fae7 	bl	8002e18 <SPI_WaitOnFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_SPI_Receive+0x1ee>
    { 
      return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e091      	b.n	8002978 <HAL_SPI_Receive+0x312>
    }

    /* Receive last data in 8 Bit mode */
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10a      	bne.n	8002872 <HAL_SPI_Receive+0x20c>
    {
      (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68d8      	ldr	r0, [r3, #12]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002866:	1c59      	adds	r1, r3, #1
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	6391      	str	r1, [r2, #56]	; 0x38
 800286c:	b2c2      	uxtb	r2, r0
 800286e:	701a      	strb	r2, [r3, #0]
 8002870:	e00b      	b.n	800288a <HAL_SPI_Receive+0x224>
    }
    /* Receive last data in 16 Bit mode */
    else
    {
      *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287c:	b292      	uxth	r2, r2
 800287e:	801a      	strh	r2, [r3, #0]
      hspi->pRxBuffPtr+=2;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002884:	1c9a      	adds	r2, r3, #2
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	639a      	str	r2, [r3, #56]	; 0x38
    }
    hspi->RxXferCount--;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	87da      	strh	r2, [r3, #62]	; 0x3e

    /* If CRC computation is enabled */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800289e:	d116      	bne.n	80028ce <HAL_SPI_Receive+0x268>
    {
      /* Wait until RXNE flag is set: CRC Received */
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2200      	movs	r2, #0
 80028a4:	2101      	movs	r1, #1
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 fab6 	bl	8002e18 <SPI_WaitOnFlagUntilTimeout>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d007      	beq.n	80028c2 <HAL_SPI_Receive+0x25c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b6:	f043 0202 	orr.w	r2, r3, #2
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e05a      	b.n	8002978 <HAL_SPI_Receive+0x312>
      }

      /* Read CRC to clear RXNE flag */
      tmpreg = hspi->Instance->DR;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	82fb      	strh	r3, [r7, #22]
      UNUSED(tmpreg);
 80028cc:	8afb      	ldrh	r3, [r7, #22]
    }
    
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028d6:	d111      	bne.n	80028fc <HAL_SPI_Receive+0x296>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028e0:	d004      	beq.n	80028ec <HAL_SPI_Receive+0x286>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ea:	d107      	bne.n	80028fc <HAL_SPI_Receive+0x296>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028fa:	601a      	str	r2, [r3, #0]
    }

    hspi->State = HAL_SPI_STATE_READY;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check if CRC error occurred */
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800290c:	d12d      	bne.n	800296a <HAL_SPI_Receive+0x304>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 0310 	and.w	r3, r3, #16
 8002918:	2b10      	cmp	r3, #16
 800291a:	d126      	bne.n	800296a <HAL_SPI_Receive+0x304>
    {  
      /* Check if CRC error is valid or not (workaround to be applied or not) */
      if (SPI_ISCRCErrorValid(hspi) == SPI_VALID_CRC_ERROR)
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 fb87 	bl	8003030 <SPI_ISCRCErrorValid>
 8002922:	4603      	mov	r3, r0
 8002924:	2b01      	cmp	r3, #1
 8002926:	d11b      	bne.n	8002960 <HAL_SPI_Receive+0x2fa>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292c:	f043 0202 	orr.w	r2, r3, #2
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	655a      	str	r2, [r3, #84]	; 0x54

        /* Reset CRC Calculation */
        SPI_RESET_CRC(hspi);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002952:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR; 
 800295c:	2301      	movs	r3, #1
 800295e:	e00b      	b.n	8002978 <HAL_SPI_Receive+0x312>
      }
      else
      {
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f06f 0210 	mvn.w	r2, #16
 8002968:	609a      	str	r2, [r3, #8]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_OK;
 8002972:	2300      	movs	r3, #0
 8002974:	e000      	b.n	8002978 <HAL_SPI_Receive+0x312>
  }
  else
  {
    return HAL_BUSY;
 8002976:	2302      	movs	r3, #2
  }
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	807b      	strh	r3, [r7, #2]
  __IO uint16_t tmpreg = 0;
 800298e:	2300      	movs	r3, #0
 8002990:	82fb      	strh	r3, [r7, #22]

  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b01      	cmp	r3, #1
 800299c:	d006      	beq.n	80029ac <HAL_SPI_TransmitReceive+0x2c>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b22      	cmp	r3, #34	; 0x22
 80029a8:	f040 8231 	bne.w	8002e0e <HAL_SPI_TransmitReceive+0x48e>
  {
    if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0))
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d005      	beq.n	80029be <HAL_SPI_TransmitReceive+0x3e>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <HAL_SPI_TransmitReceive+0x3e>
 80029b8:	887b      	ldrh	r3, [r7, #2]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_SPI_TransmitReceive+0x42>
    {
      return  HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e226      	b.n	8002e10 <HAL_SPI_TransmitReceive+0x490>

    /* Check the parameters */
    assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

    /* Process Locked */
    __HAL_LOCK(hspi);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_SPI_TransmitReceive+0x50>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e21f      	b.n	8002e10 <HAL_SPI_TransmitReceive+0x490>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 
    /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
    if(hspi->State == HAL_SPI_STATE_READY)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d103      	bne.n	80029ec <HAL_SPI_TransmitReceive+0x6c>
    {
      hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2232      	movs	r2, #50	; 0x32
 80029e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    }

     /* Configure communication */   
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	655a      	str	r2, [r3, #84]	; 0x54

    hspi->pRxBuffPtr  = pRxData;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->RxXferSize  = Size;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	887a      	ldrh	r2, [r7, #2]
 80029fc:	879a      	strh	r2, [r3, #60]	; 0x3c
    hspi->RxXferCount = Size;  
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	887a      	ldrh	r2, [r7, #2]
 8002a02:	87da      	strh	r2, [r3, #62]	; 0x3e
    
    hspi->pTxBuffPtr  = pTxData;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->TxXferSize  = Size; 
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	887a      	ldrh	r2, [r7, #2]
 8002a0e:	869a      	strh	r2, [r3, #52]	; 0x34
    hspi->TxXferCount = Size;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	887a      	ldrh	r2, [r7, #2]
 8002a14:	86da      	strh	r2, [r3, #54]	; 0x36

    /*Init field not used in handle to zero */
    hspi->RxISR = 0;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	649a      	str	r2, [r3, #72]	; 0x48
    hspi->TxISR = 0;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Reset CRC Calculation */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a2a:	d10f      	bne.n	8002a4c <HAL_SPI_TransmitReceive+0xcc>
    {
      SPI_RESET_CRC(hspi);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a4a:	601a      	str	r2, [r3, #0]
    }

    /* Check if the SPI is already enabled */ 
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a56:	2b40      	cmp	r3, #64	; 0x40
 8002a58:	d007      	beq.n	8002a6a <HAL_SPI_TransmitReceive+0xea>
    {
      /* Enable SPI peripheral */
      __HAL_SPI_ENABLE(hspi);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a68:	601a      	str	r2, [r3, #0]
    }

    /* Transmit and Receive data in 16 Bit mode */
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a72:	f040 80be 	bne.w	8002bf2 <HAL_SPI_TransmitReceive+0x272>
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d008      	beq.n	8002a90 <HAL_SPI_TransmitReceive+0x110>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a86:	d114      	bne.n	8002ab2 <HAL_SPI_TransmitReceive+0x132>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d110      	bne.n	8002ab2 <HAL_SPI_TransmitReceive+0x132>
      {
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a94:	881a      	ldrh	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr+=2;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa0:	1c9a      	adds	r2, r3, #2
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	86da      	strh	r2, [r3, #54]	; 0x36
      }
      if(hspi->TxXferCount == 0)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d174      	bne.n	8002ba4 <HAL_SPI_TransmitReceive+0x224>
      {
        /* Enable CRC Transmission */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ac2:	d107      	bne.n	8002ad4 <HAL_SPI_TransmitReceive+0x154>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ad2:	601a      	str	r2, [r3, #0]
        }

        /* Wait until RXNE flag is set */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2101      	movs	r1, #1
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 f99c 	bl	8002e18 <SPI_WaitOnFlagUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_SPI_TransmitReceive+0x16a>
        { 
          return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e192      	b.n	8002e10 <HAL_SPI_TransmitReceive+0x490>
        }

        *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68da      	ldr	r2, [r3, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af4:	b292      	uxth	r2, r2
 8002af6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr+=2;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afc:	1c9a      	adds	r2, r3, #2
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b0e:	e11f      	b.n	8002d50 <HAL_SPI_TransmitReceive+0x3d0>
      else
      {
        while(hspi->TxXferCount > 0)
        {
          /* Wait until TXE flag is set to send data */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	2200      	movs	r2, #0
 8002b14:	2102      	movs	r1, #2
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f97e 	bl	8002e18 <SPI_WaitOnFlagUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_SPI_TransmitReceive+0x1a6>
          { 
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e174      	b.n	8002e10 <HAL_SPI_TransmitReceive+0x490>
          }

          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	881a      	ldrh	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr+=2;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	1c9a      	adds	r2, r3, #2
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	631a      	str	r2, [r3, #48]	; 0x30
          hspi->TxXferCount--;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	86da      	strh	r2, [r3, #54]	; 0x36

          /* Enable CRC Transmission */
          if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10c      	bne.n	8002b6a <HAL_SPI_TransmitReceive+0x1ea>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b58:	d107      	bne.n	8002b6a <HAL_SPI_TransmitReceive+0x1ea>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b68:	601a      	str	r2, [r3, #0]
          }

          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2101      	movs	r1, #1
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 f951 	bl	8002e18 <SPI_WaitOnFlagUntilTimeout>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <HAL_SPI_TransmitReceive+0x200>
          { 
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e147      	b.n	8002e10 <HAL_SPI_TransmitReceive+0x490>
          }

          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8a:	b292      	uxth	r2, r2
 8002b8c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b92:	1c9a      	adds	r2, r3, #2
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->RxXferCount--;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	87da      	strh	r2, [r3, #62]	; 0x3e
        while(hspi->TxXferCount > 0)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1b1      	bne.n	8002b10 <HAL_SPI_TransmitReceive+0x190>
        }
        /* Receive the last byte */
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f040 80cd 	bne.w	8002d50 <HAL_SPI_TransmitReceive+0x3d0>
        {
          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2101      	movs	r1, #1
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 f92b 	bl	8002e18 <SPI_WaitOnFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <HAL_SPI_TransmitReceive+0x24c>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e121      	b.n	8002e10 <HAL_SPI_TransmitReceive+0x490>
          }
          
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd6:	b292      	uxth	r2, r2
 8002bd8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bde:	1c9a      	adds	r2, r3, #2
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->RxXferCount--;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bf0:	e0ae      	b.n	8002d50 <HAL_SPI_TransmitReceive+0x3d0>
      }
    }
    /* Transmit and Receive data in 8 Bit mode */
    else
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d008      	beq.n	8002c0c <HAL_SPI_TransmitReceive+0x28c>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c02:	d112      	bne.n	8002c2a <HAL_SPI_TransmitReceive+0x2aa>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d10e      	bne.n	8002c2a <HAL_SPI_TransmitReceive+0x2aa>
      {
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	1c59      	adds	r1, r3, #1
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	6311      	str	r1, [r2, #48]	; 0x30
 8002c16:	781a      	ldrb	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	86da      	strh	r2, [r3, #54]	; 0x36
      }
      if(hspi->TxXferCount == 0)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d16b      	bne.n	8002d0a <HAL_SPI_TransmitReceive+0x38a>
      {
        /* Enable CRC Transmission */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c3a:	d107      	bne.n	8002c4c <HAL_SPI_TransmitReceive+0x2cc>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c4a:	601a      	str	r2, [r3, #0]
        }

        /* Wait until RXNE flag is set */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2101      	movs	r1, #1
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 f8e0 	bl	8002e18 <SPI_WaitOnFlagUntilTimeout>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_SPI_TransmitReceive+0x2e2>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e0d6      	b.n	8002e10 <HAL_SPI_TransmitReceive+0x490>
        }

        (*hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68da      	ldr	r2, [r3, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c7c:	e068      	b.n	8002d50 <HAL_SPI_TransmitReceive+0x3d0>
      else
      {
        while(hspi->TxXferCount > 0)
        {
          /* Wait until TXE flag is set to send data */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	2200      	movs	r2, #0
 8002c82:	2102      	movs	r1, #2
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 f8c7 	bl	8002e18 <SPI_WaitOnFlagUntilTimeout>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_SPI_TransmitReceive+0x314>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e0bd      	b.n	8002e10 <HAL_SPI_TransmitReceive+0x490>
          }

          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c98:	1c59      	adds	r1, r3, #1
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	6311      	str	r1, [r2, #48]	; 0x30
 8002c9e:	781a      	ldrb	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	86da      	strh	r2, [r3, #54]	; 0x36

          /* Enable CRC Transmission */
          if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_SPI_TransmitReceive+0x354>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc2:	d107      	bne.n	8002cd4 <HAL_SPI_TransmitReceive+0x354>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cd2:	601a      	str	r2, [r3, #0]
          }

          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2101      	movs	r1, #1
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 f89c 	bl	8002e18 <SPI_WaitOnFlagUntilTimeout>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_SPI_TransmitReceive+0x36a>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e092      	b.n	8002e10 <HAL_SPI_TransmitReceive+0x490>
          }

          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68d8      	ldr	r0, [r3, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf4:	1c59      	adds	r1, r3, #1
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	6391      	str	r1, [r2, #56]	; 0x38
 8002cfa:	b2c2      	uxtb	r2, r0
 8002cfc:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	87da      	strh	r2, [r3, #62]	; 0x3e
        while(hspi->TxXferCount > 0)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1b5      	bne.n	8002c7e <HAL_SPI_TransmitReceive+0x2fe>
        }
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d11a      	bne.n	8002d50 <HAL_SPI_TransmitReceive+0x3d0>
        {
          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	2101      	movs	r1, #1
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 f879 	bl	8002e18 <SPI_WaitOnFlagUntilTimeout>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <HAL_SPI_TransmitReceive+0x3b0>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e06f      	b.n	8002e10 <HAL_SPI_TransmitReceive+0x490>
          }
          
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68d8      	ldr	r0, [r3, #12]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3a:	1c59      	adds	r1, r3, #1
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	6391      	str	r1, [r2, #56]	; 0x38
 8002d40:	b2c2      	uxtb	r2, r0
 8002d42:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
      }
    }

    /* Read CRC from DR to close CRC calculation process */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d58:	d116      	bne.n	8002d88 <HAL_SPI_TransmitReceive+0x408>
    {
      /* Wait until RXNE flag is set */
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	2101      	movs	r1, #1
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 f859 	bl	8002e18 <SPI_WaitOnFlagUntilTimeout>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d007      	beq.n	8002d7c <HAL_SPI_TransmitReceive+0x3fc>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d70:	f043 0202 	orr.w	r2, r3, #2
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e049      	b.n	8002e10 <HAL_SPI_TransmitReceive+0x490>
      }
      /* Read CRC */
      tmpreg = hspi->Instance->DR;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	82fb      	strh	r3, [r7, #22]
      UNUSED(tmpreg);
 8002d86:	8afb      	ldrh	r3, [r7, #22]
    }

    /* Wait until Busy flag is reset before disabling SPI */
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	2180      	movs	r1, #128	; 0x80
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f842 	bl	8002e18 <SPI_WaitOnFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d007      	beq.n	8002daa <HAL_SPI_TransmitReceive+0x42a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9e:	f043 0210 	orr.w	r2, r3, #16
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e032      	b.n	8002e10 <HAL_SPI_TransmitReceive+0x490>
    }
    
    hspi->State = HAL_SPI_STATE_READY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check if CRC error occurred */
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dba:	d122      	bne.n	8002e02 <HAL_SPI_TransmitReceive+0x482>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 0310 	and.w	r3, r3, #16
 8002dc6:	2b10      	cmp	r3, #16
 8002dc8:	d11b      	bne.n	8002e02 <HAL_SPI_TransmitReceive+0x482>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dce:	f043 0202 	orr.w	r2, r3, #2
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	655a      	str	r2, [r3, #84]	; 0x54

      SPI_RESET_CRC(hspi);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002df4:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hspi);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      
      return HAL_ERROR; 
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e006      	b.n	8002e10 <HAL_SPI_TransmitReceive+0x490>
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	e000      	b.n	8002e10 <HAL_SPI_TransmitReceive+0x490>
  }
  else
  {
    return HAL_BUSY;
 8002e0e:	2302      	movs	r3, #2
  }
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <SPI_WaitOnFlagUntilTimeout>:
  * @param  Status: Flag status to check: RESET or set
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	4613      	mov	r3, r2
 8002e26:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002e2c:	f7fd fdd0 	bl	80009d0 <HAL_GetTick>
 8002e30:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 8002e32:	79fb      	ldrb	r3, [r7, #7]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f040 8086 	bne.w	8002f46 <SPI_WaitOnFlagUntilTimeout+0x12e>
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 8002e3a:	e03d      	b.n	8002eb8 <SPI_WaitOnFlagUntilTimeout+0xa0>
    {
      if(Timeout != HAL_MAX_DELAY)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e42:	d039      	beq.n	8002eb8 <SPI_WaitOnFlagUntilTimeout+0xa0>
      {
        if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d007      	beq.n	8002e5a <SPI_WaitOnFlagUntilTimeout+0x42>
 8002e4a:	f7fd fdc1 	bl	80009d0 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d22e      	bcs.n	8002eb8 <SPI_WaitOnFlagUntilTimeout+0xa0>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e68:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e78:	601a      	str	r2, [r3, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e82:	d10f      	bne.n	8002ea4 <SPI_WaitOnFlagUntilTimeout+0x8c>
          {
            SPI_RESET_CRC(hspi);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ea2:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e04f      	b.n	8002f58 <SPI_WaitOnFlagUntilTimeout+0x140>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d1b9      	bne.n	8002e3c <SPI_WaitOnFlagUntilTimeout+0x24>
 8002ec8:	e045      	b.n	8002f56 <SPI_WaitOnFlagUntilTimeout+0x13e>
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
    {
      if(Timeout != HAL_MAX_DELAY)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed0:	d039      	beq.n	8002f46 <SPI_WaitOnFlagUntilTimeout+0x12e>
      {
        if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d007      	beq.n	8002ee8 <SPI_WaitOnFlagUntilTimeout+0xd0>
 8002ed8:	f7fd fd7a 	bl	80009d0 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d22e      	bcs.n	8002f46 <SPI_WaitOnFlagUntilTimeout+0x12e>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ef6:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f06:	601a      	str	r2, [r3, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f10:	d10f      	bne.n	8002f32 <SPI_WaitOnFlagUntilTimeout+0x11a>
          {
            SPI_RESET_CRC(hspi);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f30:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e008      	b.n	8002f58 <SPI_WaitOnFlagUntilTimeout+0x140>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d0b9      	beq.n	8002eca <SPI_WaitOnFlagUntilTimeout+0xb2>
        }
      }
    }
  }
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e057      	b.n	8003022 <HAL_SPI_Init+0xc2>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));

  if(hspi->State == HAL_SPI_STATE_RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d102      	bne.n	8002f84 <HAL_SPI_Init+0x24>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fd fb10 	bl	80005a4 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	ea42 0103 	orr.w	r1, r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	0c1b      	lsrs	r3, r3, #16
 8002fe2:	f003 0104 	and.w	r1, r3, #4
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ffa:	611a      	str	r2, [r3, #16]

#if defined (STM32F101x6) || defined (STM32F101xB) || defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F102x6) || defined (STM32F102xB) || defined (STM32F103x6) || defined (STM32F103xB) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F105xC) || defined (STM32F107xC)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	69da      	ldr	r2, [r3, #28]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800300a:	61da      	str	r2, [r3, #28]
     CRC errors wrongly detected */
  /* Pb is that ES_STM32F10xxCDE also identify an issue in Debug registers access while not in Debug mode.
     Revision ID information is only available in Debug mode, so Workaround could not be implemented
     to distinguish Rev Z devices (issue present) from more recent version (issue fixed).
     So, in case of Revison Z F101 or F103 devices, below variable should be assigned to 1 */
  uCRCErrorWorkaroundCheck = 0;
 800300c:	4b07      	ldr	r3, [pc, #28]	; (800302c <HAL_SPI_Init+0xcc>)
 800300e:	2200      	movs	r2, #0
 8003010:	701a      	strb	r2, [r3, #0]
#else
  uCRCErrorWorkaroundCheck = 0;
#endif

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	2000008c 	.word	0x2000008c

08003030 <SPI_ISCRCErrorValid>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval CRC error validity (SPI_INVALID_CRC_ERROR or SPI_VALID_CRC_ERROR).  
*/
uint8_t SPI_ISCRCErrorValid(SPI_HandleTypeDef *hspi)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
#if defined (STM32F101xE) || defined (STM32F103xE)
  /* Check how to handle this CRC error (workaround to be applied or not) */
  /* If CRC errors could be wrongly detected (issue 2.15.2 in STM32F10xxC/D/E silicon limitations ES (DocID14732 Rev 13) */
  if ( (uCRCErrorWorkaroundCheck != 0) && (hspi->Instance == SPI2) )
 8003038:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <SPI_ISCRCErrorValid+0x34>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00b      	beq.n	8003058 <SPI_ISCRCErrorValid+0x28>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a08      	ldr	r2, [pc, #32]	; (8003068 <SPI_ISCRCErrorValid+0x38>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d106      	bne.n	8003058 <SPI_ISCRCErrorValid+0x28>
  {
    if (hspi->Instance->RXCRCR == 0)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <SPI_ISCRCErrorValid+0x28>
    {
      return (SPI_INVALID_CRC_ERROR);
 8003054:	2300      	movs	r3, #0
 8003056:	e000      	b.n	800305a <SPI_ISCRCErrorValid+0x2a>
    }
  }
  return (SPI_VALID_CRC_ERROR);
 8003058:	2301      	movs	r3, #1
#else
  return (SPI_VALID_CRC_ERROR);
#endif
}
 800305a:	4618      	mov	r0, r3
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr
 8003064:	2000008c 	.word	0x2000008c
 8003068:	40003800 	.word	0x40003800

0800306c <HAL_UART_Init>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e03b      	b.n	80030f6 <HAL_UART_Init+0x8a>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->State == HAL_UART_STATE_RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d106      	bne.n	8003098 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fd fbea 	bl	800086c <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030ae:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f967 	bl	8003384 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	691a      	ldr	r2, [r3, #16]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695a      	ldr	r2, [r3, #20]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030d4:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030e4:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b086      	sub	sp, #24
 8003102:	af00      	add	r7, sp, #0
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	603b      	str	r3, [r7, #0]
 800310a:	4613      	mov	r3, r2
 800310c:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tmp_state = 0;
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]
  
  tmp_state = huart->State;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003118:	b2db      	uxtb	r3, r3
 800311a:	617b      	str	r3, [r7, #20]
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d003      	beq.n	800312a <HAL_UART_Transmit+0x2c>
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b22      	cmp	r3, #34	; 0x22
 8003126:	f040 808e 	bne.w	8003246 <HAL_UART_Transmit+0x148>
  {
    if((pData == NULL) || (Size == 0))
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <HAL_UART_Transmit+0x38>
 8003130:	88fb      	ldrh	r3, [r7, #6]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_UART_Transmit+0x3c>
    {
      return  HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e086      	b.n	8003248 <HAL_UART_Transmit+0x14a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_UART_Transmit+0x4a>
 8003144:	2302      	movs	r3, #2
 8003146:	e07f      	b.n	8003248 <HAL_UART_Transmit+0x14a>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b22      	cmp	r3, #34	; 0x22
 8003160:	d104      	bne.n	800316c <HAL_UART_Transmit+0x6e>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2232      	movs	r2, #50	; 0x32
 8003166:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800316a:	e003      	b.n	8003174 <HAL_UART_Transmit+0x76>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2212      	movs	r2, #18
 8003170:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    huart->TxXferSize = Size;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	88fa      	ldrh	r2, [r7, #6]
 8003178:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	88fa      	ldrh	r2, [r7, #6]
 800317e:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0)
 8003180:	e03d      	b.n	80031fe <HAL_UART_Transmit+0x100>
    {
      huart->TxXferCount--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003196:	d120      	bne.n	80031da <HAL_UART_Transmit+0xdc>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	2200      	movs	r2, #0
 800319c:	2180      	movs	r1, #128	; 0x80
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 f856 	bl	8003250 <UART_WaitOnFlagUntilTimeout>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_UART_Transmit+0xb0>
        {
          return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e04c      	b.n	8003248 <HAL_UART_Transmit+0x14a>
        }
        tmp = (uint16_t*) pData;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031c0:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d103      	bne.n	80031d2 <HAL_UART_Transmit+0xd4>
        {
          pData +=2;
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	3302      	adds	r3, #2
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	e015      	b.n	80031fe <HAL_UART_Transmit+0x100>
        }
        else
        { 
          pData +=1;
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	3301      	adds	r3, #1
 80031d6:	60bb      	str	r3, [r7, #8]
 80031d8:	e011      	b.n	80031fe <HAL_UART_Transmit+0x100>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2200      	movs	r2, #0
 80031de:	2180      	movs	r1, #128	; 0x80
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 f835 	bl	8003250 <UART_WaitOnFlagUntilTimeout>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <HAL_UART_Transmit+0xf2>
        {
          return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e02b      	b.n	8003248 <HAL_UART_Transmit+0x14a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	60ba      	str	r2, [r7, #8]
 80031f6:	781a      	ldrb	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1bd      	bne.n	8003182 <HAL_UART_Transmit+0x84>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2200      	movs	r2, #0
 800320a:	2140      	movs	r1, #64	; 0x40
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 f81f 	bl	8003250 <UART_WaitOnFlagUntilTimeout>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <HAL_UART_Transmit+0x11e>
    { 
      return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e015      	b.n	8003248 <HAL_UART_Transmit+0x14a>
    }

    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b32      	cmp	r3, #50	; 0x32
 8003226:	d104      	bne.n	8003232 <HAL_UART_Transmit+0x134>
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2222      	movs	r2, #34	; 0x22
 800322c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003230:	e003      	b.n	800323a <HAL_UART_Transmit+0x13c>
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003242:	2300      	movs	r3, #0
 8003244:	e000      	b.n	8003248 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003246:	2302      	movs	r3, #2
  }
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	603b      	str	r3, [r7, #0]
 800325c:	4613      	mov	r3, r2
 800325e:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = 0;
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003264:	f7fd fbb4 	bl	80009d0 <HAL_GetTick>
 8003268:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d17b      	bne.n	8003368 <UART_WaitOnFlagUntilTimeout+0x118>
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8003270:	e038      	b.n	80032e4 <UART_WaitOnFlagUntilTimeout+0x94>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003278:	d034      	beq.n	80032e4 <UART_WaitOnFlagUntilTimeout+0x94>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d007      	beq.n	8003290 <UART_WaitOnFlagUntilTimeout+0x40>
 8003280:	f7fd fba6 	bl	80009d0 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	429a      	cmp	r2, r3
 800328e:	d229      	bcs.n	80032e4 <UART_WaitOnFlagUntilTimeout+0x94>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800329e:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0220 	bic.w	r2, r2, #32
 80032ae:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032be:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	695a      	ldr	r2, [r3, #20]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	615a      	str	r2, [r3, #20]

          huart->State= HAL_UART_STATE_READY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e04a      	b.n	800337a <UART_WaitOnFlagUntilTimeout+0x12a>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	4013      	ands	r3, r2
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d1be      	bne.n	8003272 <UART_WaitOnFlagUntilTimeout+0x22>
 80032f4:	e040      	b.n	8003378 <UART_WaitOnFlagUntilTimeout+0x128>
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fc:	d034      	beq.n	8003368 <UART_WaitOnFlagUntilTimeout+0x118>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d007      	beq.n	8003314 <UART_WaitOnFlagUntilTimeout+0xc4>
 8003304:	f7fd fb64 	bl	80009d0 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	429a      	cmp	r2, r3
 8003312:	d229      	bcs.n	8003368 <UART_WaitOnFlagUntilTimeout+0x118>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003322:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0220 	bic.w	r2, r2, #32
 8003332:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003342:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695a      	ldr	r2, [r3, #20]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0201 	bic.w	r2, r2, #1
 8003352:	615a      	str	r2, [r3, #20]

          huart->State= HAL_UART_STATE_READY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e008      	b.n	800337a <UART_WaitOnFlagUntilTimeout+0x12a>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	4013      	ands	r3, r2
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	429a      	cmp	r2, r3
 8003376:	d0be      	beq.n	80032f6 <UART_WaitOnFlagUntilTimeout+0xa6>
        }
      }
    }
  }
  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3718      	adds	r7, #24
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
	...

08003384 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003384:	b5b0      	push	{r4, r5, r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00;
 800338c:	2300      	movs	r3, #0
 800338e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	611a      	str	r2, [r3, #16]
  /*------- UART-associated USART registers setting : CR1 Configuration ------*/
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80033c2:	f023 030c 	bic.w	r3, r3, #12
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6812      	ldr	r2, [r2, #0]
 80033ca:	68f9      	ldr	r1, [r7, #12]
 80033cc:	430b      	orrs	r3, r1
 80033ce:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699a      	ldr	r2, [r3, #24]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	615a      	str	r2, [r3, #20]
  
  /*------- UART-associated USART registers setting : BRR Configuration ------*/
  if((huart->Instance == USART1))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a44      	ldr	r2, [pc, #272]	; (80034fc <UART_SetConfig+0x178>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d140      	bne.n	8003472 <UART_SetConfig+0xee>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80033f0:	f7fe ffd8 	bl	80023a4 <HAL_RCC_GetPCLK2Freq>
 80033f4:	4602      	mov	r2, r0
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	009a      	lsls	r2, r3, #2
 80033fe:	441a      	add	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	fbb2 f3f3 	udiv	r3, r2, r3
 800340a:	4a3d      	ldr	r2, [pc, #244]	; (8003500 <UART_SetConfig+0x17c>)
 800340c:	fba2 2303 	umull	r2, r3, r2, r3
 8003410:	095b      	lsrs	r3, r3, #5
 8003412:	011c      	lsls	r4, r3, #4
 8003414:	f7fe ffc6 	bl	80023a4 <HAL_RCC_GetPCLK2Freq>
 8003418:	4602      	mov	r2, r0
 800341a:	4613      	mov	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	009a      	lsls	r2, r3, #2
 8003422:	441a      	add	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	fbb2 f5f3 	udiv	r5, r2, r3
 800342e:	f7fe ffb9 	bl	80023a4 <HAL_RCC_GetPCLK2Freq>
 8003432:	4602      	mov	r2, r0
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	009a      	lsls	r2, r3, #2
 800343c:	441a      	add	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	fbb2 f3f3 	udiv	r3, r2, r3
 8003448:	4a2d      	ldr	r2, [pc, #180]	; (8003500 <UART_SetConfig+0x17c>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	095b      	lsrs	r3, r3, #5
 8003450:	2264      	movs	r2, #100	; 0x64
 8003452:	fb02 f303 	mul.w	r3, r2, r3
 8003456:	1aeb      	subs	r3, r5, r3
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	3332      	adds	r3, #50	; 0x32
 800345c:	4a28      	ldr	r2, [pc, #160]	; (8003500 <UART_SetConfig+0x17c>)
 800345e:	fba2 2303 	umull	r2, r3, r2, r3
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	f003 020f 	and.w	r2, r3, #15
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4322      	orrs	r2, r4
 800346e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
}
 8003470:	e03f      	b.n	80034f2 <UART_SetConfig+0x16e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003472:	f7fe ff75 	bl	8002360 <HAL_RCC_GetPCLK1Freq>
 8003476:	4602      	mov	r2, r0
 8003478:	4613      	mov	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	009a      	lsls	r2, r3, #2
 8003480:	441a      	add	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	fbb2 f3f3 	udiv	r3, r2, r3
 800348c:	4a1c      	ldr	r2, [pc, #112]	; (8003500 <UART_SetConfig+0x17c>)
 800348e:	fba2 2303 	umull	r2, r3, r2, r3
 8003492:	095b      	lsrs	r3, r3, #5
 8003494:	011c      	lsls	r4, r3, #4
 8003496:	f7fe ff63 	bl	8002360 <HAL_RCC_GetPCLK1Freq>
 800349a:	4602      	mov	r2, r0
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	009a      	lsls	r2, r3, #2
 80034a4:	441a      	add	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	fbb2 f5f3 	udiv	r5, r2, r3
 80034b0:	f7fe ff56 	bl	8002360 <HAL_RCC_GetPCLK1Freq>
 80034b4:	4602      	mov	r2, r0
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	009a      	lsls	r2, r3, #2
 80034be:	441a      	add	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ca:	4a0d      	ldr	r2, [pc, #52]	; (8003500 <UART_SetConfig+0x17c>)
 80034cc:	fba2 2303 	umull	r2, r3, r2, r3
 80034d0:	095b      	lsrs	r3, r3, #5
 80034d2:	2264      	movs	r2, #100	; 0x64
 80034d4:	fb02 f303 	mul.w	r3, r2, r3
 80034d8:	1aeb      	subs	r3, r5, r3
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	3332      	adds	r3, #50	; 0x32
 80034de:	4a08      	ldr	r2, [pc, #32]	; (8003500 <UART_SetConfig+0x17c>)
 80034e0:	fba2 2303 	umull	r2, r3, r2, r3
 80034e4:	095b      	lsrs	r3, r3, #5
 80034e6:	f003 020f 	and.w	r2, r3, #15
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4322      	orrs	r2, r4
 80034f0:	609a      	str	r2, [r3, #8]
}
 80034f2:	bf00      	nop
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bdb0      	pop	{r4, r5, r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40013800 	.word	0x40013800
 8003500:	51eb851f 	.word	0x51eb851f

08003504 <__errno>:
 8003504:	4b01      	ldr	r3, [pc, #4]	; (800350c <__errno+0x8>)
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	20000004 	.word	0x20000004

08003510 <__libc_init_array>:
 8003510:	b570      	push	{r4, r5, r6, lr}
 8003512:	2500      	movs	r5, #0
 8003514:	4e0c      	ldr	r6, [pc, #48]	; (8003548 <__libc_init_array+0x38>)
 8003516:	4c0d      	ldr	r4, [pc, #52]	; (800354c <__libc_init_array+0x3c>)
 8003518:	1ba4      	subs	r4, r4, r6
 800351a:	10a4      	asrs	r4, r4, #2
 800351c:	42a5      	cmp	r5, r4
 800351e:	d109      	bne.n	8003534 <__libc_init_array+0x24>
 8003520:	f000 ff74 	bl	800440c <_init>
 8003524:	2500      	movs	r5, #0
 8003526:	4e0a      	ldr	r6, [pc, #40]	; (8003550 <__libc_init_array+0x40>)
 8003528:	4c0a      	ldr	r4, [pc, #40]	; (8003554 <__libc_init_array+0x44>)
 800352a:	1ba4      	subs	r4, r4, r6
 800352c:	10a4      	asrs	r4, r4, #2
 800352e:	42a5      	cmp	r5, r4
 8003530:	d105      	bne.n	800353e <__libc_init_array+0x2e>
 8003532:	bd70      	pop	{r4, r5, r6, pc}
 8003534:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003538:	4798      	blx	r3
 800353a:	3501      	adds	r5, #1
 800353c:	e7ee      	b.n	800351c <__libc_init_array+0xc>
 800353e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003542:	4798      	blx	r3
 8003544:	3501      	adds	r5, #1
 8003546:	e7f2      	b.n	800352e <__libc_init_array+0x1e>
 8003548:	0800455c 	.word	0x0800455c
 800354c:	0800455c 	.word	0x0800455c
 8003550:	0800455c 	.word	0x0800455c
 8003554:	08004560 	.word	0x08004560

08003558 <memset>:
 8003558:	4603      	mov	r3, r0
 800355a:	4402      	add	r2, r0
 800355c:	4293      	cmp	r3, r2
 800355e:	d100      	bne.n	8003562 <memset+0xa>
 8003560:	4770      	bx	lr
 8003562:	f803 1b01 	strb.w	r1, [r3], #1
 8003566:	e7f9      	b.n	800355c <memset+0x4>

08003568 <iprintf>:
 8003568:	b40f      	push	{r0, r1, r2, r3}
 800356a:	4b0a      	ldr	r3, [pc, #40]	; (8003594 <iprintf+0x2c>)
 800356c:	b513      	push	{r0, r1, r4, lr}
 800356e:	681c      	ldr	r4, [r3, #0]
 8003570:	b124      	cbz	r4, 800357c <iprintf+0x14>
 8003572:	69a3      	ldr	r3, [r4, #24]
 8003574:	b913      	cbnz	r3, 800357c <iprintf+0x14>
 8003576:	4620      	mov	r0, r4
 8003578:	f000 fa22 	bl	80039c0 <__sinit>
 800357c:	ab05      	add	r3, sp, #20
 800357e:	9a04      	ldr	r2, [sp, #16]
 8003580:	68a1      	ldr	r1, [r4, #8]
 8003582:	4620      	mov	r0, r4
 8003584:	9301      	str	r3, [sp, #4]
 8003586:	f000 fbd7 	bl	8003d38 <_vfiprintf_r>
 800358a:	b002      	add	sp, #8
 800358c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003590:	b004      	add	sp, #16
 8003592:	4770      	bx	lr
 8003594:	20000004 	.word	0x20000004

08003598 <_puts_r>:
 8003598:	b570      	push	{r4, r5, r6, lr}
 800359a:	460e      	mov	r6, r1
 800359c:	4605      	mov	r5, r0
 800359e:	b118      	cbz	r0, 80035a8 <_puts_r+0x10>
 80035a0:	6983      	ldr	r3, [r0, #24]
 80035a2:	b90b      	cbnz	r3, 80035a8 <_puts_r+0x10>
 80035a4:	f000 fa0c 	bl	80039c0 <__sinit>
 80035a8:	69ab      	ldr	r3, [r5, #24]
 80035aa:	68ac      	ldr	r4, [r5, #8]
 80035ac:	b913      	cbnz	r3, 80035b4 <_puts_r+0x1c>
 80035ae:	4628      	mov	r0, r5
 80035b0:	f000 fa06 	bl	80039c0 <__sinit>
 80035b4:	4b23      	ldr	r3, [pc, #140]	; (8003644 <_puts_r+0xac>)
 80035b6:	429c      	cmp	r4, r3
 80035b8:	d117      	bne.n	80035ea <_puts_r+0x52>
 80035ba:	686c      	ldr	r4, [r5, #4]
 80035bc:	89a3      	ldrh	r3, [r4, #12]
 80035be:	071b      	lsls	r3, r3, #28
 80035c0:	d51d      	bpl.n	80035fe <_puts_r+0x66>
 80035c2:	6923      	ldr	r3, [r4, #16]
 80035c4:	b1db      	cbz	r3, 80035fe <_puts_r+0x66>
 80035c6:	3e01      	subs	r6, #1
 80035c8:	68a3      	ldr	r3, [r4, #8]
 80035ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80035ce:	3b01      	subs	r3, #1
 80035d0:	60a3      	str	r3, [r4, #8]
 80035d2:	b9e9      	cbnz	r1, 8003610 <_puts_r+0x78>
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	da2e      	bge.n	8003636 <_puts_r+0x9e>
 80035d8:	4622      	mov	r2, r4
 80035da:	210a      	movs	r1, #10
 80035dc:	4628      	mov	r0, r5
 80035de:	f000 f83f 	bl	8003660 <__swbuf_r>
 80035e2:	3001      	adds	r0, #1
 80035e4:	d011      	beq.n	800360a <_puts_r+0x72>
 80035e6:	200a      	movs	r0, #10
 80035e8:	e011      	b.n	800360e <_puts_r+0x76>
 80035ea:	4b17      	ldr	r3, [pc, #92]	; (8003648 <_puts_r+0xb0>)
 80035ec:	429c      	cmp	r4, r3
 80035ee:	d101      	bne.n	80035f4 <_puts_r+0x5c>
 80035f0:	68ac      	ldr	r4, [r5, #8]
 80035f2:	e7e3      	b.n	80035bc <_puts_r+0x24>
 80035f4:	4b15      	ldr	r3, [pc, #84]	; (800364c <_puts_r+0xb4>)
 80035f6:	429c      	cmp	r4, r3
 80035f8:	bf08      	it	eq
 80035fa:	68ec      	ldreq	r4, [r5, #12]
 80035fc:	e7de      	b.n	80035bc <_puts_r+0x24>
 80035fe:	4621      	mov	r1, r4
 8003600:	4628      	mov	r0, r5
 8003602:	f000 f87f 	bl	8003704 <__swsetup_r>
 8003606:	2800      	cmp	r0, #0
 8003608:	d0dd      	beq.n	80035c6 <_puts_r+0x2e>
 800360a:	f04f 30ff 	mov.w	r0, #4294967295
 800360e:	bd70      	pop	{r4, r5, r6, pc}
 8003610:	2b00      	cmp	r3, #0
 8003612:	da04      	bge.n	800361e <_puts_r+0x86>
 8003614:	69a2      	ldr	r2, [r4, #24]
 8003616:	429a      	cmp	r2, r3
 8003618:	dc06      	bgt.n	8003628 <_puts_r+0x90>
 800361a:	290a      	cmp	r1, #10
 800361c:	d004      	beq.n	8003628 <_puts_r+0x90>
 800361e:	6823      	ldr	r3, [r4, #0]
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	6022      	str	r2, [r4, #0]
 8003624:	7019      	strb	r1, [r3, #0]
 8003626:	e7cf      	b.n	80035c8 <_puts_r+0x30>
 8003628:	4622      	mov	r2, r4
 800362a:	4628      	mov	r0, r5
 800362c:	f000 f818 	bl	8003660 <__swbuf_r>
 8003630:	3001      	adds	r0, #1
 8003632:	d1c9      	bne.n	80035c8 <_puts_r+0x30>
 8003634:	e7e9      	b.n	800360a <_puts_r+0x72>
 8003636:	200a      	movs	r0, #10
 8003638:	6823      	ldr	r3, [r4, #0]
 800363a:	1c5a      	adds	r2, r3, #1
 800363c:	6022      	str	r2, [r4, #0]
 800363e:	7018      	strb	r0, [r3, #0]
 8003640:	e7e5      	b.n	800360e <_puts_r+0x76>
 8003642:	bf00      	nop
 8003644:	080044e8 	.word	0x080044e8
 8003648:	08004508 	.word	0x08004508
 800364c:	080044c8 	.word	0x080044c8

08003650 <puts>:
 8003650:	4b02      	ldr	r3, [pc, #8]	; (800365c <puts+0xc>)
 8003652:	4601      	mov	r1, r0
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	f7ff bf9f 	b.w	8003598 <_puts_r>
 800365a:	bf00      	nop
 800365c:	20000004 	.word	0x20000004

08003660 <__swbuf_r>:
 8003660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003662:	460e      	mov	r6, r1
 8003664:	4614      	mov	r4, r2
 8003666:	4605      	mov	r5, r0
 8003668:	b118      	cbz	r0, 8003672 <__swbuf_r+0x12>
 800366a:	6983      	ldr	r3, [r0, #24]
 800366c:	b90b      	cbnz	r3, 8003672 <__swbuf_r+0x12>
 800366e:	f000 f9a7 	bl	80039c0 <__sinit>
 8003672:	4b21      	ldr	r3, [pc, #132]	; (80036f8 <__swbuf_r+0x98>)
 8003674:	429c      	cmp	r4, r3
 8003676:	d12a      	bne.n	80036ce <__swbuf_r+0x6e>
 8003678:	686c      	ldr	r4, [r5, #4]
 800367a:	69a3      	ldr	r3, [r4, #24]
 800367c:	60a3      	str	r3, [r4, #8]
 800367e:	89a3      	ldrh	r3, [r4, #12]
 8003680:	071a      	lsls	r2, r3, #28
 8003682:	d52e      	bpl.n	80036e2 <__swbuf_r+0x82>
 8003684:	6923      	ldr	r3, [r4, #16]
 8003686:	b363      	cbz	r3, 80036e2 <__swbuf_r+0x82>
 8003688:	6923      	ldr	r3, [r4, #16]
 800368a:	6820      	ldr	r0, [r4, #0]
 800368c:	b2f6      	uxtb	r6, r6
 800368e:	1ac0      	subs	r0, r0, r3
 8003690:	6963      	ldr	r3, [r4, #20]
 8003692:	4637      	mov	r7, r6
 8003694:	4283      	cmp	r3, r0
 8003696:	dc04      	bgt.n	80036a2 <__swbuf_r+0x42>
 8003698:	4621      	mov	r1, r4
 800369a:	4628      	mov	r0, r5
 800369c:	f000 f926 	bl	80038ec <_fflush_r>
 80036a0:	bb28      	cbnz	r0, 80036ee <__swbuf_r+0x8e>
 80036a2:	68a3      	ldr	r3, [r4, #8]
 80036a4:	3001      	adds	r0, #1
 80036a6:	3b01      	subs	r3, #1
 80036a8:	60a3      	str	r3, [r4, #8]
 80036aa:	6823      	ldr	r3, [r4, #0]
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	6022      	str	r2, [r4, #0]
 80036b0:	701e      	strb	r6, [r3, #0]
 80036b2:	6963      	ldr	r3, [r4, #20]
 80036b4:	4283      	cmp	r3, r0
 80036b6:	d004      	beq.n	80036c2 <__swbuf_r+0x62>
 80036b8:	89a3      	ldrh	r3, [r4, #12]
 80036ba:	07db      	lsls	r3, r3, #31
 80036bc:	d519      	bpl.n	80036f2 <__swbuf_r+0x92>
 80036be:	2e0a      	cmp	r6, #10
 80036c0:	d117      	bne.n	80036f2 <__swbuf_r+0x92>
 80036c2:	4621      	mov	r1, r4
 80036c4:	4628      	mov	r0, r5
 80036c6:	f000 f911 	bl	80038ec <_fflush_r>
 80036ca:	b190      	cbz	r0, 80036f2 <__swbuf_r+0x92>
 80036cc:	e00f      	b.n	80036ee <__swbuf_r+0x8e>
 80036ce:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <__swbuf_r+0x9c>)
 80036d0:	429c      	cmp	r4, r3
 80036d2:	d101      	bne.n	80036d8 <__swbuf_r+0x78>
 80036d4:	68ac      	ldr	r4, [r5, #8]
 80036d6:	e7d0      	b.n	800367a <__swbuf_r+0x1a>
 80036d8:	4b09      	ldr	r3, [pc, #36]	; (8003700 <__swbuf_r+0xa0>)
 80036da:	429c      	cmp	r4, r3
 80036dc:	bf08      	it	eq
 80036de:	68ec      	ldreq	r4, [r5, #12]
 80036e0:	e7cb      	b.n	800367a <__swbuf_r+0x1a>
 80036e2:	4621      	mov	r1, r4
 80036e4:	4628      	mov	r0, r5
 80036e6:	f000 f80d 	bl	8003704 <__swsetup_r>
 80036ea:	2800      	cmp	r0, #0
 80036ec:	d0cc      	beq.n	8003688 <__swbuf_r+0x28>
 80036ee:	f04f 37ff 	mov.w	r7, #4294967295
 80036f2:	4638      	mov	r0, r7
 80036f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036f6:	bf00      	nop
 80036f8:	080044e8 	.word	0x080044e8
 80036fc:	08004508 	.word	0x08004508
 8003700:	080044c8 	.word	0x080044c8

08003704 <__swsetup_r>:
 8003704:	4b32      	ldr	r3, [pc, #200]	; (80037d0 <__swsetup_r+0xcc>)
 8003706:	b570      	push	{r4, r5, r6, lr}
 8003708:	681d      	ldr	r5, [r3, #0]
 800370a:	4606      	mov	r6, r0
 800370c:	460c      	mov	r4, r1
 800370e:	b125      	cbz	r5, 800371a <__swsetup_r+0x16>
 8003710:	69ab      	ldr	r3, [r5, #24]
 8003712:	b913      	cbnz	r3, 800371a <__swsetup_r+0x16>
 8003714:	4628      	mov	r0, r5
 8003716:	f000 f953 	bl	80039c0 <__sinit>
 800371a:	4b2e      	ldr	r3, [pc, #184]	; (80037d4 <__swsetup_r+0xd0>)
 800371c:	429c      	cmp	r4, r3
 800371e:	d10f      	bne.n	8003740 <__swsetup_r+0x3c>
 8003720:	686c      	ldr	r4, [r5, #4]
 8003722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003726:	b29a      	uxth	r2, r3
 8003728:	0715      	lsls	r5, r2, #28
 800372a:	d42c      	bmi.n	8003786 <__swsetup_r+0x82>
 800372c:	06d0      	lsls	r0, r2, #27
 800372e:	d411      	bmi.n	8003754 <__swsetup_r+0x50>
 8003730:	2209      	movs	r2, #9
 8003732:	6032      	str	r2, [r6, #0]
 8003734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003738:	81a3      	strh	r3, [r4, #12]
 800373a:	f04f 30ff 	mov.w	r0, #4294967295
 800373e:	e03e      	b.n	80037be <__swsetup_r+0xba>
 8003740:	4b25      	ldr	r3, [pc, #148]	; (80037d8 <__swsetup_r+0xd4>)
 8003742:	429c      	cmp	r4, r3
 8003744:	d101      	bne.n	800374a <__swsetup_r+0x46>
 8003746:	68ac      	ldr	r4, [r5, #8]
 8003748:	e7eb      	b.n	8003722 <__swsetup_r+0x1e>
 800374a:	4b24      	ldr	r3, [pc, #144]	; (80037dc <__swsetup_r+0xd8>)
 800374c:	429c      	cmp	r4, r3
 800374e:	bf08      	it	eq
 8003750:	68ec      	ldreq	r4, [r5, #12]
 8003752:	e7e6      	b.n	8003722 <__swsetup_r+0x1e>
 8003754:	0751      	lsls	r1, r2, #29
 8003756:	d512      	bpl.n	800377e <__swsetup_r+0x7a>
 8003758:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800375a:	b141      	cbz	r1, 800376e <__swsetup_r+0x6a>
 800375c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003760:	4299      	cmp	r1, r3
 8003762:	d002      	beq.n	800376a <__swsetup_r+0x66>
 8003764:	4630      	mov	r0, r6
 8003766:	f000 fa19 	bl	8003b9c <_free_r>
 800376a:	2300      	movs	r3, #0
 800376c:	6363      	str	r3, [r4, #52]	; 0x34
 800376e:	89a3      	ldrh	r3, [r4, #12]
 8003770:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003774:	81a3      	strh	r3, [r4, #12]
 8003776:	2300      	movs	r3, #0
 8003778:	6063      	str	r3, [r4, #4]
 800377a:	6923      	ldr	r3, [r4, #16]
 800377c:	6023      	str	r3, [r4, #0]
 800377e:	89a3      	ldrh	r3, [r4, #12]
 8003780:	f043 0308 	orr.w	r3, r3, #8
 8003784:	81a3      	strh	r3, [r4, #12]
 8003786:	6923      	ldr	r3, [r4, #16]
 8003788:	b94b      	cbnz	r3, 800379e <__swsetup_r+0x9a>
 800378a:	89a3      	ldrh	r3, [r4, #12]
 800378c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003794:	d003      	beq.n	800379e <__swsetup_r+0x9a>
 8003796:	4621      	mov	r1, r4
 8003798:	4630      	mov	r0, r6
 800379a:	f000 f9bf 	bl	8003b1c <__smakebuf_r>
 800379e:	89a2      	ldrh	r2, [r4, #12]
 80037a0:	f012 0301 	ands.w	r3, r2, #1
 80037a4:	d00c      	beq.n	80037c0 <__swsetup_r+0xbc>
 80037a6:	2300      	movs	r3, #0
 80037a8:	60a3      	str	r3, [r4, #8]
 80037aa:	6963      	ldr	r3, [r4, #20]
 80037ac:	425b      	negs	r3, r3
 80037ae:	61a3      	str	r3, [r4, #24]
 80037b0:	6923      	ldr	r3, [r4, #16]
 80037b2:	b953      	cbnz	r3, 80037ca <__swsetup_r+0xc6>
 80037b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037b8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80037bc:	d1ba      	bne.n	8003734 <__swsetup_r+0x30>
 80037be:	bd70      	pop	{r4, r5, r6, pc}
 80037c0:	0792      	lsls	r2, r2, #30
 80037c2:	bf58      	it	pl
 80037c4:	6963      	ldrpl	r3, [r4, #20]
 80037c6:	60a3      	str	r3, [r4, #8]
 80037c8:	e7f2      	b.n	80037b0 <__swsetup_r+0xac>
 80037ca:	2000      	movs	r0, #0
 80037cc:	e7f7      	b.n	80037be <__swsetup_r+0xba>
 80037ce:	bf00      	nop
 80037d0:	20000004 	.word	0x20000004
 80037d4:	080044e8 	.word	0x080044e8
 80037d8:	08004508 	.word	0x08004508
 80037dc:	080044c8 	.word	0x080044c8

080037e0 <__sflush_r>:
 80037e0:	898a      	ldrh	r2, [r1, #12]
 80037e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037e6:	4605      	mov	r5, r0
 80037e8:	0710      	lsls	r0, r2, #28
 80037ea:	460c      	mov	r4, r1
 80037ec:	d458      	bmi.n	80038a0 <__sflush_r+0xc0>
 80037ee:	684b      	ldr	r3, [r1, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	dc05      	bgt.n	8003800 <__sflush_r+0x20>
 80037f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	dc02      	bgt.n	8003800 <__sflush_r+0x20>
 80037fa:	2000      	movs	r0, #0
 80037fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003800:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003802:	2e00      	cmp	r6, #0
 8003804:	d0f9      	beq.n	80037fa <__sflush_r+0x1a>
 8003806:	2300      	movs	r3, #0
 8003808:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800380c:	682f      	ldr	r7, [r5, #0]
 800380e:	6a21      	ldr	r1, [r4, #32]
 8003810:	602b      	str	r3, [r5, #0]
 8003812:	d032      	beq.n	800387a <__sflush_r+0x9a>
 8003814:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003816:	89a3      	ldrh	r3, [r4, #12]
 8003818:	075a      	lsls	r2, r3, #29
 800381a:	d505      	bpl.n	8003828 <__sflush_r+0x48>
 800381c:	6863      	ldr	r3, [r4, #4]
 800381e:	1ac0      	subs	r0, r0, r3
 8003820:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003822:	b10b      	cbz	r3, 8003828 <__sflush_r+0x48>
 8003824:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003826:	1ac0      	subs	r0, r0, r3
 8003828:	2300      	movs	r3, #0
 800382a:	4602      	mov	r2, r0
 800382c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800382e:	6a21      	ldr	r1, [r4, #32]
 8003830:	4628      	mov	r0, r5
 8003832:	47b0      	blx	r6
 8003834:	1c43      	adds	r3, r0, #1
 8003836:	89a3      	ldrh	r3, [r4, #12]
 8003838:	d106      	bne.n	8003848 <__sflush_r+0x68>
 800383a:	6829      	ldr	r1, [r5, #0]
 800383c:	291d      	cmp	r1, #29
 800383e:	d848      	bhi.n	80038d2 <__sflush_r+0xf2>
 8003840:	4a29      	ldr	r2, [pc, #164]	; (80038e8 <__sflush_r+0x108>)
 8003842:	40ca      	lsrs	r2, r1
 8003844:	07d6      	lsls	r6, r2, #31
 8003846:	d544      	bpl.n	80038d2 <__sflush_r+0xf2>
 8003848:	2200      	movs	r2, #0
 800384a:	6062      	str	r2, [r4, #4]
 800384c:	6922      	ldr	r2, [r4, #16]
 800384e:	04d9      	lsls	r1, r3, #19
 8003850:	6022      	str	r2, [r4, #0]
 8003852:	d504      	bpl.n	800385e <__sflush_r+0x7e>
 8003854:	1c42      	adds	r2, r0, #1
 8003856:	d101      	bne.n	800385c <__sflush_r+0x7c>
 8003858:	682b      	ldr	r3, [r5, #0]
 800385a:	b903      	cbnz	r3, 800385e <__sflush_r+0x7e>
 800385c:	6560      	str	r0, [r4, #84]	; 0x54
 800385e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003860:	602f      	str	r7, [r5, #0]
 8003862:	2900      	cmp	r1, #0
 8003864:	d0c9      	beq.n	80037fa <__sflush_r+0x1a>
 8003866:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800386a:	4299      	cmp	r1, r3
 800386c:	d002      	beq.n	8003874 <__sflush_r+0x94>
 800386e:	4628      	mov	r0, r5
 8003870:	f000 f994 	bl	8003b9c <_free_r>
 8003874:	2000      	movs	r0, #0
 8003876:	6360      	str	r0, [r4, #52]	; 0x34
 8003878:	e7c0      	b.n	80037fc <__sflush_r+0x1c>
 800387a:	2301      	movs	r3, #1
 800387c:	4628      	mov	r0, r5
 800387e:	47b0      	blx	r6
 8003880:	1c41      	adds	r1, r0, #1
 8003882:	d1c8      	bne.n	8003816 <__sflush_r+0x36>
 8003884:	682b      	ldr	r3, [r5, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0c5      	beq.n	8003816 <__sflush_r+0x36>
 800388a:	2b1d      	cmp	r3, #29
 800388c:	d001      	beq.n	8003892 <__sflush_r+0xb2>
 800388e:	2b16      	cmp	r3, #22
 8003890:	d101      	bne.n	8003896 <__sflush_r+0xb6>
 8003892:	602f      	str	r7, [r5, #0]
 8003894:	e7b1      	b.n	80037fa <__sflush_r+0x1a>
 8003896:	89a3      	ldrh	r3, [r4, #12]
 8003898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800389c:	81a3      	strh	r3, [r4, #12]
 800389e:	e7ad      	b.n	80037fc <__sflush_r+0x1c>
 80038a0:	690f      	ldr	r7, [r1, #16]
 80038a2:	2f00      	cmp	r7, #0
 80038a4:	d0a9      	beq.n	80037fa <__sflush_r+0x1a>
 80038a6:	0793      	lsls	r3, r2, #30
 80038a8:	bf18      	it	ne
 80038aa:	2300      	movne	r3, #0
 80038ac:	680e      	ldr	r6, [r1, #0]
 80038ae:	bf08      	it	eq
 80038b0:	694b      	ldreq	r3, [r1, #20]
 80038b2:	eba6 0807 	sub.w	r8, r6, r7
 80038b6:	600f      	str	r7, [r1, #0]
 80038b8:	608b      	str	r3, [r1, #8]
 80038ba:	f1b8 0f00 	cmp.w	r8, #0
 80038be:	dd9c      	ble.n	80037fa <__sflush_r+0x1a>
 80038c0:	4643      	mov	r3, r8
 80038c2:	463a      	mov	r2, r7
 80038c4:	6a21      	ldr	r1, [r4, #32]
 80038c6:	4628      	mov	r0, r5
 80038c8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80038ca:	47b0      	blx	r6
 80038cc:	2800      	cmp	r0, #0
 80038ce:	dc06      	bgt.n	80038de <__sflush_r+0xfe>
 80038d0:	89a3      	ldrh	r3, [r4, #12]
 80038d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038d6:	81a3      	strh	r3, [r4, #12]
 80038d8:	f04f 30ff 	mov.w	r0, #4294967295
 80038dc:	e78e      	b.n	80037fc <__sflush_r+0x1c>
 80038de:	4407      	add	r7, r0
 80038e0:	eba8 0800 	sub.w	r8, r8, r0
 80038e4:	e7e9      	b.n	80038ba <__sflush_r+0xda>
 80038e6:	bf00      	nop
 80038e8:	20400001 	.word	0x20400001

080038ec <_fflush_r>:
 80038ec:	b538      	push	{r3, r4, r5, lr}
 80038ee:	690b      	ldr	r3, [r1, #16]
 80038f0:	4605      	mov	r5, r0
 80038f2:	460c      	mov	r4, r1
 80038f4:	b1db      	cbz	r3, 800392e <_fflush_r+0x42>
 80038f6:	b118      	cbz	r0, 8003900 <_fflush_r+0x14>
 80038f8:	6983      	ldr	r3, [r0, #24]
 80038fa:	b90b      	cbnz	r3, 8003900 <_fflush_r+0x14>
 80038fc:	f000 f860 	bl	80039c0 <__sinit>
 8003900:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <_fflush_r+0x48>)
 8003902:	429c      	cmp	r4, r3
 8003904:	d109      	bne.n	800391a <_fflush_r+0x2e>
 8003906:	686c      	ldr	r4, [r5, #4]
 8003908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800390c:	b17b      	cbz	r3, 800392e <_fflush_r+0x42>
 800390e:	4621      	mov	r1, r4
 8003910:	4628      	mov	r0, r5
 8003912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003916:	f7ff bf63 	b.w	80037e0 <__sflush_r>
 800391a:	4b07      	ldr	r3, [pc, #28]	; (8003938 <_fflush_r+0x4c>)
 800391c:	429c      	cmp	r4, r3
 800391e:	d101      	bne.n	8003924 <_fflush_r+0x38>
 8003920:	68ac      	ldr	r4, [r5, #8]
 8003922:	e7f1      	b.n	8003908 <_fflush_r+0x1c>
 8003924:	4b05      	ldr	r3, [pc, #20]	; (800393c <_fflush_r+0x50>)
 8003926:	429c      	cmp	r4, r3
 8003928:	bf08      	it	eq
 800392a:	68ec      	ldreq	r4, [r5, #12]
 800392c:	e7ec      	b.n	8003908 <_fflush_r+0x1c>
 800392e:	2000      	movs	r0, #0
 8003930:	bd38      	pop	{r3, r4, r5, pc}
 8003932:	bf00      	nop
 8003934:	080044e8 	.word	0x080044e8
 8003938:	08004508 	.word	0x08004508
 800393c:	080044c8 	.word	0x080044c8

08003940 <std>:
 8003940:	2300      	movs	r3, #0
 8003942:	b510      	push	{r4, lr}
 8003944:	4604      	mov	r4, r0
 8003946:	e9c0 3300 	strd	r3, r3, [r0]
 800394a:	6083      	str	r3, [r0, #8]
 800394c:	8181      	strh	r1, [r0, #12]
 800394e:	6643      	str	r3, [r0, #100]	; 0x64
 8003950:	81c2      	strh	r2, [r0, #14]
 8003952:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003956:	6183      	str	r3, [r0, #24]
 8003958:	4619      	mov	r1, r3
 800395a:	2208      	movs	r2, #8
 800395c:	305c      	adds	r0, #92	; 0x5c
 800395e:	f7ff fdfb 	bl	8003558 <memset>
 8003962:	4b05      	ldr	r3, [pc, #20]	; (8003978 <std+0x38>)
 8003964:	6224      	str	r4, [r4, #32]
 8003966:	6263      	str	r3, [r4, #36]	; 0x24
 8003968:	4b04      	ldr	r3, [pc, #16]	; (800397c <std+0x3c>)
 800396a:	62a3      	str	r3, [r4, #40]	; 0x28
 800396c:	4b04      	ldr	r3, [pc, #16]	; (8003980 <std+0x40>)
 800396e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003970:	4b04      	ldr	r3, [pc, #16]	; (8003984 <std+0x44>)
 8003972:	6323      	str	r3, [r4, #48]	; 0x30
 8003974:	bd10      	pop	{r4, pc}
 8003976:	bf00      	nop
 8003978:	08004295 	.word	0x08004295
 800397c:	080042b7 	.word	0x080042b7
 8003980:	080042ef 	.word	0x080042ef
 8003984:	08004313 	.word	0x08004313

08003988 <_cleanup_r>:
 8003988:	4901      	ldr	r1, [pc, #4]	; (8003990 <_cleanup_r+0x8>)
 800398a:	f000 b885 	b.w	8003a98 <_fwalk_reent>
 800398e:	bf00      	nop
 8003990:	080038ed 	.word	0x080038ed

08003994 <__sfmoreglue>:
 8003994:	b570      	push	{r4, r5, r6, lr}
 8003996:	2568      	movs	r5, #104	; 0x68
 8003998:	1e4a      	subs	r2, r1, #1
 800399a:	4355      	muls	r5, r2
 800399c:	460e      	mov	r6, r1
 800399e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80039a2:	f000 f947 	bl	8003c34 <_malloc_r>
 80039a6:	4604      	mov	r4, r0
 80039a8:	b140      	cbz	r0, 80039bc <__sfmoreglue+0x28>
 80039aa:	2100      	movs	r1, #0
 80039ac:	e9c0 1600 	strd	r1, r6, [r0]
 80039b0:	300c      	adds	r0, #12
 80039b2:	60a0      	str	r0, [r4, #8]
 80039b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80039b8:	f7ff fdce 	bl	8003558 <memset>
 80039bc:	4620      	mov	r0, r4
 80039be:	bd70      	pop	{r4, r5, r6, pc}

080039c0 <__sinit>:
 80039c0:	6983      	ldr	r3, [r0, #24]
 80039c2:	b510      	push	{r4, lr}
 80039c4:	4604      	mov	r4, r0
 80039c6:	bb33      	cbnz	r3, 8003a16 <__sinit+0x56>
 80039c8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80039cc:	6503      	str	r3, [r0, #80]	; 0x50
 80039ce:	4b12      	ldr	r3, [pc, #72]	; (8003a18 <__sinit+0x58>)
 80039d0:	4a12      	ldr	r2, [pc, #72]	; (8003a1c <__sinit+0x5c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6282      	str	r2, [r0, #40]	; 0x28
 80039d6:	4298      	cmp	r0, r3
 80039d8:	bf04      	itt	eq
 80039da:	2301      	moveq	r3, #1
 80039dc:	6183      	streq	r3, [r0, #24]
 80039de:	f000 f81f 	bl	8003a20 <__sfp>
 80039e2:	6060      	str	r0, [r4, #4]
 80039e4:	4620      	mov	r0, r4
 80039e6:	f000 f81b 	bl	8003a20 <__sfp>
 80039ea:	60a0      	str	r0, [r4, #8]
 80039ec:	4620      	mov	r0, r4
 80039ee:	f000 f817 	bl	8003a20 <__sfp>
 80039f2:	2200      	movs	r2, #0
 80039f4:	60e0      	str	r0, [r4, #12]
 80039f6:	2104      	movs	r1, #4
 80039f8:	6860      	ldr	r0, [r4, #4]
 80039fa:	f7ff ffa1 	bl	8003940 <std>
 80039fe:	2201      	movs	r2, #1
 8003a00:	2109      	movs	r1, #9
 8003a02:	68a0      	ldr	r0, [r4, #8]
 8003a04:	f7ff ff9c 	bl	8003940 <std>
 8003a08:	2202      	movs	r2, #2
 8003a0a:	2112      	movs	r1, #18
 8003a0c:	68e0      	ldr	r0, [r4, #12]
 8003a0e:	f7ff ff97 	bl	8003940 <std>
 8003a12:	2301      	movs	r3, #1
 8003a14:	61a3      	str	r3, [r4, #24]
 8003a16:	bd10      	pop	{r4, pc}
 8003a18:	080044c4 	.word	0x080044c4
 8003a1c:	08003989 	.word	0x08003989

08003a20 <__sfp>:
 8003a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a22:	4b1b      	ldr	r3, [pc, #108]	; (8003a90 <__sfp+0x70>)
 8003a24:	4607      	mov	r7, r0
 8003a26:	681e      	ldr	r6, [r3, #0]
 8003a28:	69b3      	ldr	r3, [r6, #24]
 8003a2a:	b913      	cbnz	r3, 8003a32 <__sfp+0x12>
 8003a2c:	4630      	mov	r0, r6
 8003a2e:	f7ff ffc7 	bl	80039c0 <__sinit>
 8003a32:	3648      	adds	r6, #72	; 0x48
 8003a34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	d503      	bpl.n	8003a44 <__sfp+0x24>
 8003a3c:	6833      	ldr	r3, [r6, #0]
 8003a3e:	b133      	cbz	r3, 8003a4e <__sfp+0x2e>
 8003a40:	6836      	ldr	r6, [r6, #0]
 8003a42:	e7f7      	b.n	8003a34 <__sfp+0x14>
 8003a44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a48:	b16d      	cbz	r5, 8003a66 <__sfp+0x46>
 8003a4a:	3468      	adds	r4, #104	; 0x68
 8003a4c:	e7f4      	b.n	8003a38 <__sfp+0x18>
 8003a4e:	2104      	movs	r1, #4
 8003a50:	4638      	mov	r0, r7
 8003a52:	f7ff ff9f 	bl	8003994 <__sfmoreglue>
 8003a56:	6030      	str	r0, [r6, #0]
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	d1f1      	bne.n	8003a40 <__sfp+0x20>
 8003a5c:	230c      	movs	r3, #12
 8003a5e:	4604      	mov	r4, r0
 8003a60:	603b      	str	r3, [r7, #0]
 8003a62:	4620      	mov	r0, r4
 8003a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a66:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <__sfp+0x74>)
 8003a68:	6665      	str	r5, [r4, #100]	; 0x64
 8003a6a:	e9c4 5500 	strd	r5, r5, [r4]
 8003a6e:	60a5      	str	r5, [r4, #8]
 8003a70:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003a74:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003a78:	2208      	movs	r2, #8
 8003a7a:	4629      	mov	r1, r5
 8003a7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a80:	f7ff fd6a 	bl	8003558 <memset>
 8003a84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a8c:	e7e9      	b.n	8003a62 <__sfp+0x42>
 8003a8e:	bf00      	nop
 8003a90:	080044c4 	.word	0x080044c4
 8003a94:	ffff0001 	.word	0xffff0001

08003a98 <_fwalk_reent>:
 8003a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a9c:	4680      	mov	r8, r0
 8003a9e:	4689      	mov	r9, r1
 8003aa0:	2600      	movs	r6, #0
 8003aa2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003aa6:	b914      	cbnz	r4, 8003aae <_fwalk_reent+0x16>
 8003aa8:	4630      	mov	r0, r6
 8003aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003aae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003ab2:	3f01      	subs	r7, #1
 8003ab4:	d501      	bpl.n	8003aba <_fwalk_reent+0x22>
 8003ab6:	6824      	ldr	r4, [r4, #0]
 8003ab8:	e7f5      	b.n	8003aa6 <_fwalk_reent+0xe>
 8003aba:	89ab      	ldrh	r3, [r5, #12]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d907      	bls.n	8003ad0 <_fwalk_reent+0x38>
 8003ac0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	d003      	beq.n	8003ad0 <_fwalk_reent+0x38>
 8003ac8:	4629      	mov	r1, r5
 8003aca:	4640      	mov	r0, r8
 8003acc:	47c8      	blx	r9
 8003ace:	4306      	orrs	r6, r0
 8003ad0:	3568      	adds	r5, #104	; 0x68
 8003ad2:	e7ee      	b.n	8003ab2 <_fwalk_reent+0x1a>

08003ad4 <__swhatbuf_r>:
 8003ad4:	b570      	push	{r4, r5, r6, lr}
 8003ad6:	460e      	mov	r6, r1
 8003ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003adc:	b096      	sub	sp, #88	; 0x58
 8003ade:	2900      	cmp	r1, #0
 8003ae0:	4614      	mov	r4, r2
 8003ae2:	461d      	mov	r5, r3
 8003ae4:	da07      	bge.n	8003af6 <__swhatbuf_r+0x22>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	602b      	str	r3, [r5, #0]
 8003aea:	89b3      	ldrh	r3, [r6, #12]
 8003aec:	061a      	lsls	r2, r3, #24
 8003aee:	d410      	bmi.n	8003b12 <__swhatbuf_r+0x3e>
 8003af0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003af4:	e00e      	b.n	8003b14 <__swhatbuf_r+0x40>
 8003af6:	466a      	mov	r2, sp
 8003af8:	f000 fc32 	bl	8004360 <_fstat_r>
 8003afc:	2800      	cmp	r0, #0
 8003afe:	dbf2      	blt.n	8003ae6 <__swhatbuf_r+0x12>
 8003b00:	9a01      	ldr	r2, [sp, #4]
 8003b02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003b06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003b0a:	425a      	negs	r2, r3
 8003b0c:	415a      	adcs	r2, r3
 8003b0e:	602a      	str	r2, [r5, #0]
 8003b10:	e7ee      	b.n	8003af0 <__swhatbuf_r+0x1c>
 8003b12:	2340      	movs	r3, #64	; 0x40
 8003b14:	2000      	movs	r0, #0
 8003b16:	6023      	str	r3, [r4, #0]
 8003b18:	b016      	add	sp, #88	; 0x58
 8003b1a:	bd70      	pop	{r4, r5, r6, pc}

08003b1c <__smakebuf_r>:
 8003b1c:	898b      	ldrh	r3, [r1, #12]
 8003b1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b20:	079d      	lsls	r5, r3, #30
 8003b22:	4606      	mov	r6, r0
 8003b24:	460c      	mov	r4, r1
 8003b26:	d507      	bpl.n	8003b38 <__smakebuf_r+0x1c>
 8003b28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b2c:	6023      	str	r3, [r4, #0]
 8003b2e:	6123      	str	r3, [r4, #16]
 8003b30:	2301      	movs	r3, #1
 8003b32:	6163      	str	r3, [r4, #20]
 8003b34:	b002      	add	sp, #8
 8003b36:	bd70      	pop	{r4, r5, r6, pc}
 8003b38:	ab01      	add	r3, sp, #4
 8003b3a:	466a      	mov	r2, sp
 8003b3c:	f7ff ffca 	bl	8003ad4 <__swhatbuf_r>
 8003b40:	9900      	ldr	r1, [sp, #0]
 8003b42:	4605      	mov	r5, r0
 8003b44:	4630      	mov	r0, r6
 8003b46:	f000 f875 	bl	8003c34 <_malloc_r>
 8003b4a:	b948      	cbnz	r0, 8003b60 <__smakebuf_r+0x44>
 8003b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b50:	059a      	lsls	r2, r3, #22
 8003b52:	d4ef      	bmi.n	8003b34 <__smakebuf_r+0x18>
 8003b54:	f023 0303 	bic.w	r3, r3, #3
 8003b58:	f043 0302 	orr.w	r3, r3, #2
 8003b5c:	81a3      	strh	r3, [r4, #12]
 8003b5e:	e7e3      	b.n	8003b28 <__smakebuf_r+0xc>
 8003b60:	4b0d      	ldr	r3, [pc, #52]	; (8003b98 <__smakebuf_r+0x7c>)
 8003b62:	62b3      	str	r3, [r6, #40]	; 0x28
 8003b64:	89a3      	ldrh	r3, [r4, #12]
 8003b66:	6020      	str	r0, [r4, #0]
 8003b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b6c:	81a3      	strh	r3, [r4, #12]
 8003b6e:	9b00      	ldr	r3, [sp, #0]
 8003b70:	6120      	str	r0, [r4, #16]
 8003b72:	6163      	str	r3, [r4, #20]
 8003b74:	9b01      	ldr	r3, [sp, #4]
 8003b76:	b15b      	cbz	r3, 8003b90 <__smakebuf_r+0x74>
 8003b78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b7c:	4630      	mov	r0, r6
 8003b7e:	f000 fc01 	bl	8004384 <_isatty_r>
 8003b82:	b128      	cbz	r0, 8003b90 <__smakebuf_r+0x74>
 8003b84:	89a3      	ldrh	r3, [r4, #12]
 8003b86:	f023 0303 	bic.w	r3, r3, #3
 8003b8a:	f043 0301 	orr.w	r3, r3, #1
 8003b8e:	81a3      	strh	r3, [r4, #12]
 8003b90:	89a3      	ldrh	r3, [r4, #12]
 8003b92:	431d      	orrs	r5, r3
 8003b94:	81a5      	strh	r5, [r4, #12]
 8003b96:	e7cd      	b.n	8003b34 <__smakebuf_r+0x18>
 8003b98:	08003989 	.word	0x08003989

08003b9c <_free_r>:
 8003b9c:	b538      	push	{r3, r4, r5, lr}
 8003b9e:	4605      	mov	r5, r0
 8003ba0:	2900      	cmp	r1, #0
 8003ba2:	d043      	beq.n	8003c2c <_free_r+0x90>
 8003ba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ba8:	1f0c      	subs	r4, r1, #4
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	bfb8      	it	lt
 8003bae:	18e4      	addlt	r4, r4, r3
 8003bb0:	f000 fc18 	bl	80043e4 <__malloc_lock>
 8003bb4:	4a1e      	ldr	r2, [pc, #120]	; (8003c30 <_free_r+0x94>)
 8003bb6:	6813      	ldr	r3, [r2, #0]
 8003bb8:	4610      	mov	r0, r2
 8003bba:	b933      	cbnz	r3, 8003bca <_free_r+0x2e>
 8003bbc:	6063      	str	r3, [r4, #4]
 8003bbe:	6014      	str	r4, [r2, #0]
 8003bc0:	4628      	mov	r0, r5
 8003bc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bc6:	f000 bc0e 	b.w	80043e6 <__malloc_unlock>
 8003bca:	42a3      	cmp	r3, r4
 8003bcc:	d90b      	bls.n	8003be6 <_free_r+0x4a>
 8003bce:	6821      	ldr	r1, [r4, #0]
 8003bd0:	1862      	adds	r2, r4, r1
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	bf01      	itttt	eq
 8003bd6:	681a      	ldreq	r2, [r3, #0]
 8003bd8:	685b      	ldreq	r3, [r3, #4]
 8003bda:	1852      	addeq	r2, r2, r1
 8003bdc:	6022      	streq	r2, [r4, #0]
 8003bde:	6063      	str	r3, [r4, #4]
 8003be0:	6004      	str	r4, [r0, #0]
 8003be2:	e7ed      	b.n	8003bc0 <_free_r+0x24>
 8003be4:	4613      	mov	r3, r2
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	b10a      	cbz	r2, 8003bee <_free_r+0x52>
 8003bea:	42a2      	cmp	r2, r4
 8003bec:	d9fa      	bls.n	8003be4 <_free_r+0x48>
 8003bee:	6819      	ldr	r1, [r3, #0]
 8003bf0:	1858      	adds	r0, r3, r1
 8003bf2:	42a0      	cmp	r0, r4
 8003bf4:	d10b      	bne.n	8003c0e <_free_r+0x72>
 8003bf6:	6820      	ldr	r0, [r4, #0]
 8003bf8:	4401      	add	r1, r0
 8003bfa:	1858      	adds	r0, r3, r1
 8003bfc:	4282      	cmp	r2, r0
 8003bfe:	6019      	str	r1, [r3, #0]
 8003c00:	d1de      	bne.n	8003bc0 <_free_r+0x24>
 8003c02:	6810      	ldr	r0, [r2, #0]
 8003c04:	6852      	ldr	r2, [r2, #4]
 8003c06:	4401      	add	r1, r0
 8003c08:	6019      	str	r1, [r3, #0]
 8003c0a:	605a      	str	r2, [r3, #4]
 8003c0c:	e7d8      	b.n	8003bc0 <_free_r+0x24>
 8003c0e:	d902      	bls.n	8003c16 <_free_r+0x7a>
 8003c10:	230c      	movs	r3, #12
 8003c12:	602b      	str	r3, [r5, #0]
 8003c14:	e7d4      	b.n	8003bc0 <_free_r+0x24>
 8003c16:	6820      	ldr	r0, [r4, #0]
 8003c18:	1821      	adds	r1, r4, r0
 8003c1a:	428a      	cmp	r2, r1
 8003c1c:	bf01      	itttt	eq
 8003c1e:	6811      	ldreq	r1, [r2, #0]
 8003c20:	6852      	ldreq	r2, [r2, #4]
 8003c22:	1809      	addeq	r1, r1, r0
 8003c24:	6021      	streq	r1, [r4, #0]
 8003c26:	6062      	str	r2, [r4, #4]
 8003c28:	605c      	str	r4, [r3, #4]
 8003c2a:	e7c9      	b.n	8003bc0 <_free_r+0x24>
 8003c2c:	bd38      	pop	{r3, r4, r5, pc}
 8003c2e:	bf00      	nop
 8003c30:	20000090 	.word	0x20000090

08003c34 <_malloc_r>:
 8003c34:	b570      	push	{r4, r5, r6, lr}
 8003c36:	1ccd      	adds	r5, r1, #3
 8003c38:	f025 0503 	bic.w	r5, r5, #3
 8003c3c:	3508      	adds	r5, #8
 8003c3e:	2d0c      	cmp	r5, #12
 8003c40:	bf38      	it	cc
 8003c42:	250c      	movcc	r5, #12
 8003c44:	2d00      	cmp	r5, #0
 8003c46:	4606      	mov	r6, r0
 8003c48:	db01      	blt.n	8003c4e <_malloc_r+0x1a>
 8003c4a:	42a9      	cmp	r1, r5
 8003c4c:	d903      	bls.n	8003c56 <_malloc_r+0x22>
 8003c4e:	230c      	movs	r3, #12
 8003c50:	6033      	str	r3, [r6, #0]
 8003c52:	2000      	movs	r0, #0
 8003c54:	bd70      	pop	{r4, r5, r6, pc}
 8003c56:	f000 fbc5 	bl	80043e4 <__malloc_lock>
 8003c5a:	4a21      	ldr	r2, [pc, #132]	; (8003ce0 <_malloc_r+0xac>)
 8003c5c:	6814      	ldr	r4, [r2, #0]
 8003c5e:	4621      	mov	r1, r4
 8003c60:	b991      	cbnz	r1, 8003c88 <_malloc_r+0x54>
 8003c62:	4c20      	ldr	r4, [pc, #128]	; (8003ce4 <_malloc_r+0xb0>)
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	b91b      	cbnz	r3, 8003c70 <_malloc_r+0x3c>
 8003c68:	4630      	mov	r0, r6
 8003c6a:	f000 fb03 	bl	8004274 <_sbrk_r>
 8003c6e:	6020      	str	r0, [r4, #0]
 8003c70:	4629      	mov	r1, r5
 8003c72:	4630      	mov	r0, r6
 8003c74:	f000 fafe 	bl	8004274 <_sbrk_r>
 8003c78:	1c43      	adds	r3, r0, #1
 8003c7a:	d124      	bne.n	8003cc6 <_malloc_r+0x92>
 8003c7c:	230c      	movs	r3, #12
 8003c7e:	4630      	mov	r0, r6
 8003c80:	6033      	str	r3, [r6, #0]
 8003c82:	f000 fbb0 	bl	80043e6 <__malloc_unlock>
 8003c86:	e7e4      	b.n	8003c52 <_malloc_r+0x1e>
 8003c88:	680b      	ldr	r3, [r1, #0]
 8003c8a:	1b5b      	subs	r3, r3, r5
 8003c8c:	d418      	bmi.n	8003cc0 <_malloc_r+0x8c>
 8003c8e:	2b0b      	cmp	r3, #11
 8003c90:	d90f      	bls.n	8003cb2 <_malloc_r+0x7e>
 8003c92:	600b      	str	r3, [r1, #0]
 8003c94:	18cc      	adds	r4, r1, r3
 8003c96:	50cd      	str	r5, [r1, r3]
 8003c98:	4630      	mov	r0, r6
 8003c9a:	f000 fba4 	bl	80043e6 <__malloc_unlock>
 8003c9e:	f104 000b 	add.w	r0, r4, #11
 8003ca2:	1d23      	adds	r3, r4, #4
 8003ca4:	f020 0007 	bic.w	r0, r0, #7
 8003ca8:	1ac3      	subs	r3, r0, r3
 8003caa:	d0d3      	beq.n	8003c54 <_malloc_r+0x20>
 8003cac:	425a      	negs	r2, r3
 8003cae:	50e2      	str	r2, [r4, r3]
 8003cb0:	e7d0      	b.n	8003c54 <_malloc_r+0x20>
 8003cb2:	684b      	ldr	r3, [r1, #4]
 8003cb4:	428c      	cmp	r4, r1
 8003cb6:	bf16      	itet	ne
 8003cb8:	6063      	strne	r3, [r4, #4]
 8003cba:	6013      	streq	r3, [r2, #0]
 8003cbc:	460c      	movne	r4, r1
 8003cbe:	e7eb      	b.n	8003c98 <_malloc_r+0x64>
 8003cc0:	460c      	mov	r4, r1
 8003cc2:	6849      	ldr	r1, [r1, #4]
 8003cc4:	e7cc      	b.n	8003c60 <_malloc_r+0x2c>
 8003cc6:	1cc4      	adds	r4, r0, #3
 8003cc8:	f024 0403 	bic.w	r4, r4, #3
 8003ccc:	42a0      	cmp	r0, r4
 8003cce:	d005      	beq.n	8003cdc <_malloc_r+0xa8>
 8003cd0:	1a21      	subs	r1, r4, r0
 8003cd2:	4630      	mov	r0, r6
 8003cd4:	f000 face 	bl	8004274 <_sbrk_r>
 8003cd8:	3001      	adds	r0, #1
 8003cda:	d0cf      	beq.n	8003c7c <_malloc_r+0x48>
 8003cdc:	6025      	str	r5, [r4, #0]
 8003cde:	e7db      	b.n	8003c98 <_malloc_r+0x64>
 8003ce0:	20000090 	.word	0x20000090
 8003ce4:	20000094 	.word	0x20000094

08003ce8 <__sfputc_r>:
 8003ce8:	6893      	ldr	r3, [r2, #8]
 8003cea:	b410      	push	{r4}
 8003cec:	3b01      	subs	r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	6093      	str	r3, [r2, #8]
 8003cf2:	da07      	bge.n	8003d04 <__sfputc_r+0x1c>
 8003cf4:	6994      	ldr	r4, [r2, #24]
 8003cf6:	42a3      	cmp	r3, r4
 8003cf8:	db01      	blt.n	8003cfe <__sfputc_r+0x16>
 8003cfa:	290a      	cmp	r1, #10
 8003cfc:	d102      	bne.n	8003d04 <__sfputc_r+0x1c>
 8003cfe:	bc10      	pop	{r4}
 8003d00:	f7ff bcae 	b.w	8003660 <__swbuf_r>
 8003d04:	6813      	ldr	r3, [r2, #0]
 8003d06:	1c58      	adds	r0, r3, #1
 8003d08:	6010      	str	r0, [r2, #0]
 8003d0a:	7019      	strb	r1, [r3, #0]
 8003d0c:	4608      	mov	r0, r1
 8003d0e:	bc10      	pop	{r4}
 8003d10:	4770      	bx	lr

08003d12 <__sfputs_r>:
 8003d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d14:	4606      	mov	r6, r0
 8003d16:	460f      	mov	r7, r1
 8003d18:	4614      	mov	r4, r2
 8003d1a:	18d5      	adds	r5, r2, r3
 8003d1c:	42ac      	cmp	r4, r5
 8003d1e:	d101      	bne.n	8003d24 <__sfputs_r+0x12>
 8003d20:	2000      	movs	r0, #0
 8003d22:	e007      	b.n	8003d34 <__sfputs_r+0x22>
 8003d24:	463a      	mov	r2, r7
 8003d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d2a:	4630      	mov	r0, r6
 8003d2c:	f7ff ffdc 	bl	8003ce8 <__sfputc_r>
 8003d30:	1c43      	adds	r3, r0, #1
 8003d32:	d1f3      	bne.n	8003d1c <__sfputs_r+0xa>
 8003d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d38 <_vfiprintf_r>:
 8003d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d3c:	460c      	mov	r4, r1
 8003d3e:	b09d      	sub	sp, #116	; 0x74
 8003d40:	4617      	mov	r7, r2
 8003d42:	461d      	mov	r5, r3
 8003d44:	4606      	mov	r6, r0
 8003d46:	b118      	cbz	r0, 8003d50 <_vfiprintf_r+0x18>
 8003d48:	6983      	ldr	r3, [r0, #24]
 8003d4a:	b90b      	cbnz	r3, 8003d50 <_vfiprintf_r+0x18>
 8003d4c:	f7ff fe38 	bl	80039c0 <__sinit>
 8003d50:	4b7c      	ldr	r3, [pc, #496]	; (8003f44 <_vfiprintf_r+0x20c>)
 8003d52:	429c      	cmp	r4, r3
 8003d54:	d158      	bne.n	8003e08 <_vfiprintf_r+0xd0>
 8003d56:	6874      	ldr	r4, [r6, #4]
 8003d58:	89a3      	ldrh	r3, [r4, #12]
 8003d5a:	0718      	lsls	r0, r3, #28
 8003d5c:	d55e      	bpl.n	8003e1c <_vfiprintf_r+0xe4>
 8003d5e:	6923      	ldr	r3, [r4, #16]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d05b      	beq.n	8003e1c <_vfiprintf_r+0xe4>
 8003d64:	2300      	movs	r3, #0
 8003d66:	9309      	str	r3, [sp, #36]	; 0x24
 8003d68:	2320      	movs	r3, #32
 8003d6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d6e:	2330      	movs	r3, #48	; 0x30
 8003d70:	f04f 0b01 	mov.w	fp, #1
 8003d74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d78:	9503      	str	r5, [sp, #12]
 8003d7a:	46b8      	mov	r8, r7
 8003d7c:	4645      	mov	r5, r8
 8003d7e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003d82:	b10b      	cbz	r3, 8003d88 <_vfiprintf_r+0x50>
 8003d84:	2b25      	cmp	r3, #37	; 0x25
 8003d86:	d154      	bne.n	8003e32 <_vfiprintf_r+0xfa>
 8003d88:	ebb8 0a07 	subs.w	sl, r8, r7
 8003d8c:	d00b      	beq.n	8003da6 <_vfiprintf_r+0x6e>
 8003d8e:	4653      	mov	r3, sl
 8003d90:	463a      	mov	r2, r7
 8003d92:	4621      	mov	r1, r4
 8003d94:	4630      	mov	r0, r6
 8003d96:	f7ff ffbc 	bl	8003d12 <__sfputs_r>
 8003d9a:	3001      	adds	r0, #1
 8003d9c:	f000 80c2 	beq.w	8003f24 <_vfiprintf_r+0x1ec>
 8003da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003da2:	4453      	add	r3, sl
 8003da4:	9309      	str	r3, [sp, #36]	; 0x24
 8003da6:	f898 3000 	ldrb.w	r3, [r8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 80ba 	beq.w	8003f24 <_vfiprintf_r+0x1ec>
 8003db0:	2300      	movs	r3, #0
 8003db2:	f04f 32ff 	mov.w	r2, #4294967295
 8003db6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dba:	9304      	str	r3, [sp, #16]
 8003dbc:	9307      	str	r3, [sp, #28]
 8003dbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003dc2:	931a      	str	r3, [sp, #104]	; 0x68
 8003dc4:	46a8      	mov	r8, r5
 8003dc6:	2205      	movs	r2, #5
 8003dc8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003dcc:	485e      	ldr	r0, [pc, #376]	; (8003f48 <_vfiprintf_r+0x210>)
 8003dce:	f000 fafb 	bl	80043c8 <memchr>
 8003dd2:	9b04      	ldr	r3, [sp, #16]
 8003dd4:	bb78      	cbnz	r0, 8003e36 <_vfiprintf_r+0xfe>
 8003dd6:	06d9      	lsls	r1, r3, #27
 8003dd8:	bf44      	itt	mi
 8003dda:	2220      	movmi	r2, #32
 8003ddc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003de0:	071a      	lsls	r2, r3, #28
 8003de2:	bf44      	itt	mi
 8003de4:	222b      	movmi	r2, #43	; 0x2b
 8003de6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003dea:	782a      	ldrb	r2, [r5, #0]
 8003dec:	2a2a      	cmp	r2, #42	; 0x2a
 8003dee:	d02a      	beq.n	8003e46 <_vfiprintf_r+0x10e>
 8003df0:	46a8      	mov	r8, r5
 8003df2:	2000      	movs	r0, #0
 8003df4:	250a      	movs	r5, #10
 8003df6:	9a07      	ldr	r2, [sp, #28]
 8003df8:	4641      	mov	r1, r8
 8003dfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dfe:	3b30      	subs	r3, #48	; 0x30
 8003e00:	2b09      	cmp	r3, #9
 8003e02:	d969      	bls.n	8003ed8 <_vfiprintf_r+0x1a0>
 8003e04:	b360      	cbz	r0, 8003e60 <_vfiprintf_r+0x128>
 8003e06:	e024      	b.n	8003e52 <_vfiprintf_r+0x11a>
 8003e08:	4b50      	ldr	r3, [pc, #320]	; (8003f4c <_vfiprintf_r+0x214>)
 8003e0a:	429c      	cmp	r4, r3
 8003e0c:	d101      	bne.n	8003e12 <_vfiprintf_r+0xda>
 8003e0e:	68b4      	ldr	r4, [r6, #8]
 8003e10:	e7a2      	b.n	8003d58 <_vfiprintf_r+0x20>
 8003e12:	4b4f      	ldr	r3, [pc, #316]	; (8003f50 <_vfiprintf_r+0x218>)
 8003e14:	429c      	cmp	r4, r3
 8003e16:	bf08      	it	eq
 8003e18:	68f4      	ldreq	r4, [r6, #12]
 8003e1a:	e79d      	b.n	8003d58 <_vfiprintf_r+0x20>
 8003e1c:	4621      	mov	r1, r4
 8003e1e:	4630      	mov	r0, r6
 8003e20:	f7ff fc70 	bl	8003704 <__swsetup_r>
 8003e24:	2800      	cmp	r0, #0
 8003e26:	d09d      	beq.n	8003d64 <_vfiprintf_r+0x2c>
 8003e28:	f04f 30ff 	mov.w	r0, #4294967295
 8003e2c:	b01d      	add	sp, #116	; 0x74
 8003e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e32:	46a8      	mov	r8, r5
 8003e34:	e7a2      	b.n	8003d7c <_vfiprintf_r+0x44>
 8003e36:	4a44      	ldr	r2, [pc, #272]	; (8003f48 <_vfiprintf_r+0x210>)
 8003e38:	4645      	mov	r5, r8
 8003e3a:	1a80      	subs	r0, r0, r2
 8003e3c:	fa0b f000 	lsl.w	r0, fp, r0
 8003e40:	4318      	orrs	r0, r3
 8003e42:	9004      	str	r0, [sp, #16]
 8003e44:	e7be      	b.n	8003dc4 <_vfiprintf_r+0x8c>
 8003e46:	9a03      	ldr	r2, [sp, #12]
 8003e48:	1d11      	adds	r1, r2, #4
 8003e4a:	6812      	ldr	r2, [r2, #0]
 8003e4c:	9103      	str	r1, [sp, #12]
 8003e4e:	2a00      	cmp	r2, #0
 8003e50:	db01      	blt.n	8003e56 <_vfiprintf_r+0x11e>
 8003e52:	9207      	str	r2, [sp, #28]
 8003e54:	e004      	b.n	8003e60 <_vfiprintf_r+0x128>
 8003e56:	4252      	negs	r2, r2
 8003e58:	f043 0302 	orr.w	r3, r3, #2
 8003e5c:	9207      	str	r2, [sp, #28]
 8003e5e:	9304      	str	r3, [sp, #16]
 8003e60:	f898 3000 	ldrb.w	r3, [r8]
 8003e64:	2b2e      	cmp	r3, #46	; 0x2e
 8003e66:	d10e      	bne.n	8003e86 <_vfiprintf_r+0x14e>
 8003e68:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003e6c:	2b2a      	cmp	r3, #42	; 0x2a
 8003e6e:	d138      	bne.n	8003ee2 <_vfiprintf_r+0x1aa>
 8003e70:	9b03      	ldr	r3, [sp, #12]
 8003e72:	f108 0802 	add.w	r8, r8, #2
 8003e76:	1d1a      	adds	r2, r3, #4
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	9203      	str	r2, [sp, #12]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bfb8      	it	lt
 8003e80:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e84:	9305      	str	r3, [sp, #20]
 8003e86:	4d33      	ldr	r5, [pc, #204]	; (8003f54 <_vfiprintf_r+0x21c>)
 8003e88:	2203      	movs	r2, #3
 8003e8a:	f898 1000 	ldrb.w	r1, [r8]
 8003e8e:	4628      	mov	r0, r5
 8003e90:	f000 fa9a 	bl	80043c8 <memchr>
 8003e94:	b140      	cbz	r0, 8003ea8 <_vfiprintf_r+0x170>
 8003e96:	2340      	movs	r3, #64	; 0x40
 8003e98:	1b40      	subs	r0, r0, r5
 8003e9a:	fa03 f000 	lsl.w	r0, r3, r0
 8003e9e:	9b04      	ldr	r3, [sp, #16]
 8003ea0:	f108 0801 	add.w	r8, r8, #1
 8003ea4:	4303      	orrs	r3, r0
 8003ea6:	9304      	str	r3, [sp, #16]
 8003ea8:	f898 1000 	ldrb.w	r1, [r8]
 8003eac:	2206      	movs	r2, #6
 8003eae:	482a      	ldr	r0, [pc, #168]	; (8003f58 <_vfiprintf_r+0x220>)
 8003eb0:	f108 0701 	add.w	r7, r8, #1
 8003eb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003eb8:	f000 fa86 	bl	80043c8 <memchr>
 8003ebc:	2800      	cmp	r0, #0
 8003ebe:	d037      	beq.n	8003f30 <_vfiprintf_r+0x1f8>
 8003ec0:	4b26      	ldr	r3, [pc, #152]	; (8003f5c <_vfiprintf_r+0x224>)
 8003ec2:	bb1b      	cbnz	r3, 8003f0c <_vfiprintf_r+0x1d4>
 8003ec4:	9b03      	ldr	r3, [sp, #12]
 8003ec6:	3307      	adds	r3, #7
 8003ec8:	f023 0307 	bic.w	r3, r3, #7
 8003ecc:	3308      	adds	r3, #8
 8003ece:	9303      	str	r3, [sp, #12]
 8003ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ed2:	444b      	add	r3, r9
 8003ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ed6:	e750      	b.n	8003d7a <_vfiprintf_r+0x42>
 8003ed8:	fb05 3202 	mla	r2, r5, r2, r3
 8003edc:	2001      	movs	r0, #1
 8003ede:	4688      	mov	r8, r1
 8003ee0:	e78a      	b.n	8003df8 <_vfiprintf_r+0xc0>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	250a      	movs	r5, #10
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	f108 0801 	add.w	r8, r8, #1
 8003eec:	9305      	str	r3, [sp, #20]
 8003eee:	4640      	mov	r0, r8
 8003ef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ef4:	3a30      	subs	r2, #48	; 0x30
 8003ef6:	2a09      	cmp	r2, #9
 8003ef8:	d903      	bls.n	8003f02 <_vfiprintf_r+0x1ca>
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0c3      	beq.n	8003e86 <_vfiprintf_r+0x14e>
 8003efe:	9105      	str	r1, [sp, #20]
 8003f00:	e7c1      	b.n	8003e86 <_vfiprintf_r+0x14e>
 8003f02:	fb05 2101 	mla	r1, r5, r1, r2
 8003f06:	2301      	movs	r3, #1
 8003f08:	4680      	mov	r8, r0
 8003f0a:	e7f0      	b.n	8003eee <_vfiprintf_r+0x1b6>
 8003f0c:	ab03      	add	r3, sp, #12
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	4622      	mov	r2, r4
 8003f12:	4b13      	ldr	r3, [pc, #76]	; (8003f60 <_vfiprintf_r+0x228>)
 8003f14:	a904      	add	r1, sp, #16
 8003f16:	4630      	mov	r0, r6
 8003f18:	f3af 8000 	nop.w
 8003f1c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003f20:	4681      	mov	r9, r0
 8003f22:	d1d5      	bne.n	8003ed0 <_vfiprintf_r+0x198>
 8003f24:	89a3      	ldrh	r3, [r4, #12]
 8003f26:	065b      	lsls	r3, r3, #25
 8003f28:	f53f af7e 	bmi.w	8003e28 <_vfiprintf_r+0xf0>
 8003f2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f2e:	e77d      	b.n	8003e2c <_vfiprintf_r+0xf4>
 8003f30:	ab03      	add	r3, sp, #12
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	4622      	mov	r2, r4
 8003f36:	4b0a      	ldr	r3, [pc, #40]	; (8003f60 <_vfiprintf_r+0x228>)
 8003f38:	a904      	add	r1, sp, #16
 8003f3a:	4630      	mov	r0, r6
 8003f3c:	f000 f888 	bl	8004050 <_printf_i>
 8003f40:	e7ec      	b.n	8003f1c <_vfiprintf_r+0x1e4>
 8003f42:	bf00      	nop
 8003f44:	080044e8 	.word	0x080044e8
 8003f48:	08004528 	.word	0x08004528
 8003f4c:	08004508 	.word	0x08004508
 8003f50:	080044c8 	.word	0x080044c8
 8003f54:	0800452e 	.word	0x0800452e
 8003f58:	08004532 	.word	0x08004532
 8003f5c:	00000000 	.word	0x00000000
 8003f60:	08003d13 	.word	0x08003d13

08003f64 <_printf_common>:
 8003f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f68:	4691      	mov	r9, r2
 8003f6a:	461f      	mov	r7, r3
 8003f6c:	688a      	ldr	r2, [r1, #8]
 8003f6e:	690b      	ldr	r3, [r1, #16]
 8003f70:	4606      	mov	r6, r0
 8003f72:	4293      	cmp	r3, r2
 8003f74:	bfb8      	it	lt
 8003f76:	4613      	movlt	r3, r2
 8003f78:	f8c9 3000 	str.w	r3, [r9]
 8003f7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f80:	460c      	mov	r4, r1
 8003f82:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f86:	b112      	cbz	r2, 8003f8e <_printf_common+0x2a>
 8003f88:	3301      	adds	r3, #1
 8003f8a:	f8c9 3000 	str.w	r3, [r9]
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	0699      	lsls	r1, r3, #26
 8003f92:	bf42      	ittt	mi
 8003f94:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003f98:	3302      	addmi	r3, #2
 8003f9a:	f8c9 3000 	strmi.w	r3, [r9]
 8003f9e:	6825      	ldr	r5, [r4, #0]
 8003fa0:	f015 0506 	ands.w	r5, r5, #6
 8003fa4:	d107      	bne.n	8003fb6 <_printf_common+0x52>
 8003fa6:	f104 0a19 	add.w	sl, r4, #25
 8003faa:	68e3      	ldr	r3, [r4, #12]
 8003fac:	f8d9 2000 	ldr.w	r2, [r9]
 8003fb0:	1a9b      	subs	r3, r3, r2
 8003fb2:	42ab      	cmp	r3, r5
 8003fb4:	dc29      	bgt.n	800400a <_printf_common+0xa6>
 8003fb6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003fba:	6822      	ldr	r2, [r4, #0]
 8003fbc:	3300      	adds	r3, #0
 8003fbe:	bf18      	it	ne
 8003fc0:	2301      	movne	r3, #1
 8003fc2:	0692      	lsls	r2, r2, #26
 8003fc4:	d42e      	bmi.n	8004024 <_printf_common+0xc0>
 8003fc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fca:	4639      	mov	r1, r7
 8003fcc:	4630      	mov	r0, r6
 8003fce:	47c0      	blx	r8
 8003fd0:	3001      	adds	r0, #1
 8003fd2:	d021      	beq.n	8004018 <_printf_common+0xb4>
 8003fd4:	6823      	ldr	r3, [r4, #0]
 8003fd6:	68e5      	ldr	r5, [r4, #12]
 8003fd8:	f003 0306 	and.w	r3, r3, #6
 8003fdc:	2b04      	cmp	r3, #4
 8003fde:	bf18      	it	ne
 8003fe0:	2500      	movne	r5, #0
 8003fe2:	f8d9 2000 	ldr.w	r2, [r9]
 8003fe6:	f04f 0900 	mov.w	r9, #0
 8003fea:	bf08      	it	eq
 8003fec:	1aad      	subeq	r5, r5, r2
 8003fee:	68a3      	ldr	r3, [r4, #8]
 8003ff0:	6922      	ldr	r2, [r4, #16]
 8003ff2:	bf08      	it	eq
 8003ff4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	bfc4      	itt	gt
 8003ffc:	1a9b      	subgt	r3, r3, r2
 8003ffe:	18ed      	addgt	r5, r5, r3
 8004000:	341a      	adds	r4, #26
 8004002:	454d      	cmp	r5, r9
 8004004:	d11a      	bne.n	800403c <_printf_common+0xd8>
 8004006:	2000      	movs	r0, #0
 8004008:	e008      	b.n	800401c <_printf_common+0xb8>
 800400a:	2301      	movs	r3, #1
 800400c:	4652      	mov	r2, sl
 800400e:	4639      	mov	r1, r7
 8004010:	4630      	mov	r0, r6
 8004012:	47c0      	blx	r8
 8004014:	3001      	adds	r0, #1
 8004016:	d103      	bne.n	8004020 <_printf_common+0xbc>
 8004018:	f04f 30ff 	mov.w	r0, #4294967295
 800401c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004020:	3501      	adds	r5, #1
 8004022:	e7c2      	b.n	8003faa <_printf_common+0x46>
 8004024:	2030      	movs	r0, #48	; 0x30
 8004026:	18e1      	adds	r1, r4, r3
 8004028:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004032:	4422      	add	r2, r4
 8004034:	3302      	adds	r3, #2
 8004036:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800403a:	e7c4      	b.n	8003fc6 <_printf_common+0x62>
 800403c:	2301      	movs	r3, #1
 800403e:	4622      	mov	r2, r4
 8004040:	4639      	mov	r1, r7
 8004042:	4630      	mov	r0, r6
 8004044:	47c0      	blx	r8
 8004046:	3001      	adds	r0, #1
 8004048:	d0e6      	beq.n	8004018 <_printf_common+0xb4>
 800404a:	f109 0901 	add.w	r9, r9, #1
 800404e:	e7d8      	b.n	8004002 <_printf_common+0x9e>

08004050 <_printf_i>:
 8004050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004054:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004058:	460c      	mov	r4, r1
 800405a:	7e09      	ldrb	r1, [r1, #24]
 800405c:	b085      	sub	sp, #20
 800405e:	296e      	cmp	r1, #110	; 0x6e
 8004060:	4617      	mov	r7, r2
 8004062:	4606      	mov	r6, r0
 8004064:	4698      	mov	r8, r3
 8004066:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004068:	f000 80b3 	beq.w	80041d2 <_printf_i+0x182>
 800406c:	d822      	bhi.n	80040b4 <_printf_i+0x64>
 800406e:	2963      	cmp	r1, #99	; 0x63
 8004070:	d036      	beq.n	80040e0 <_printf_i+0x90>
 8004072:	d80a      	bhi.n	800408a <_printf_i+0x3a>
 8004074:	2900      	cmp	r1, #0
 8004076:	f000 80b9 	beq.w	80041ec <_printf_i+0x19c>
 800407a:	2958      	cmp	r1, #88	; 0x58
 800407c:	f000 8083 	beq.w	8004186 <_printf_i+0x136>
 8004080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004084:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004088:	e032      	b.n	80040f0 <_printf_i+0xa0>
 800408a:	2964      	cmp	r1, #100	; 0x64
 800408c:	d001      	beq.n	8004092 <_printf_i+0x42>
 800408e:	2969      	cmp	r1, #105	; 0x69
 8004090:	d1f6      	bne.n	8004080 <_printf_i+0x30>
 8004092:	6820      	ldr	r0, [r4, #0]
 8004094:	6813      	ldr	r3, [r2, #0]
 8004096:	0605      	lsls	r5, r0, #24
 8004098:	f103 0104 	add.w	r1, r3, #4
 800409c:	d52a      	bpl.n	80040f4 <_printf_i+0xa4>
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6011      	str	r1, [r2, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	da03      	bge.n	80040ae <_printf_i+0x5e>
 80040a6:	222d      	movs	r2, #45	; 0x2d
 80040a8:	425b      	negs	r3, r3
 80040aa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80040ae:	486f      	ldr	r0, [pc, #444]	; (800426c <_printf_i+0x21c>)
 80040b0:	220a      	movs	r2, #10
 80040b2:	e039      	b.n	8004128 <_printf_i+0xd8>
 80040b4:	2973      	cmp	r1, #115	; 0x73
 80040b6:	f000 809d 	beq.w	80041f4 <_printf_i+0x1a4>
 80040ba:	d808      	bhi.n	80040ce <_printf_i+0x7e>
 80040bc:	296f      	cmp	r1, #111	; 0x6f
 80040be:	d020      	beq.n	8004102 <_printf_i+0xb2>
 80040c0:	2970      	cmp	r1, #112	; 0x70
 80040c2:	d1dd      	bne.n	8004080 <_printf_i+0x30>
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	f043 0320 	orr.w	r3, r3, #32
 80040ca:	6023      	str	r3, [r4, #0]
 80040cc:	e003      	b.n	80040d6 <_printf_i+0x86>
 80040ce:	2975      	cmp	r1, #117	; 0x75
 80040d0:	d017      	beq.n	8004102 <_printf_i+0xb2>
 80040d2:	2978      	cmp	r1, #120	; 0x78
 80040d4:	d1d4      	bne.n	8004080 <_printf_i+0x30>
 80040d6:	2378      	movs	r3, #120	; 0x78
 80040d8:	4865      	ldr	r0, [pc, #404]	; (8004270 <_printf_i+0x220>)
 80040da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040de:	e055      	b.n	800418c <_printf_i+0x13c>
 80040e0:	6813      	ldr	r3, [r2, #0]
 80040e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040e6:	1d19      	adds	r1, r3, #4
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6011      	str	r1, [r2, #0]
 80040ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040f0:	2301      	movs	r3, #1
 80040f2:	e08c      	b.n	800420e <_printf_i+0x1be>
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040fa:	6011      	str	r1, [r2, #0]
 80040fc:	bf18      	it	ne
 80040fe:	b21b      	sxthne	r3, r3
 8004100:	e7cf      	b.n	80040a2 <_printf_i+0x52>
 8004102:	6813      	ldr	r3, [r2, #0]
 8004104:	6825      	ldr	r5, [r4, #0]
 8004106:	1d18      	adds	r0, r3, #4
 8004108:	6010      	str	r0, [r2, #0]
 800410a:	0628      	lsls	r0, r5, #24
 800410c:	d501      	bpl.n	8004112 <_printf_i+0xc2>
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	e002      	b.n	8004118 <_printf_i+0xc8>
 8004112:	0668      	lsls	r0, r5, #25
 8004114:	d5fb      	bpl.n	800410e <_printf_i+0xbe>
 8004116:	881b      	ldrh	r3, [r3, #0]
 8004118:	296f      	cmp	r1, #111	; 0x6f
 800411a:	bf14      	ite	ne
 800411c:	220a      	movne	r2, #10
 800411e:	2208      	moveq	r2, #8
 8004120:	4852      	ldr	r0, [pc, #328]	; (800426c <_printf_i+0x21c>)
 8004122:	2100      	movs	r1, #0
 8004124:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004128:	6865      	ldr	r5, [r4, #4]
 800412a:	2d00      	cmp	r5, #0
 800412c:	60a5      	str	r5, [r4, #8]
 800412e:	f2c0 8095 	blt.w	800425c <_printf_i+0x20c>
 8004132:	6821      	ldr	r1, [r4, #0]
 8004134:	f021 0104 	bic.w	r1, r1, #4
 8004138:	6021      	str	r1, [r4, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d13d      	bne.n	80041ba <_printf_i+0x16a>
 800413e:	2d00      	cmp	r5, #0
 8004140:	f040 808e 	bne.w	8004260 <_printf_i+0x210>
 8004144:	4665      	mov	r5, ip
 8004146:	2a08      	cmp	r2, #8
 8004148:	d10b      	bne.n	8004162 <_printf_i+0x112>
 800414a:	6823      	ldr	r3, [r4, #0]
 800414c:	07db      	lsls	r3, r3, #31
 800414e:	d508      	bpl.n	8004162 <_printf_i+0x112>
 8004150:	6923      	ldr	r3, [r4, #16]
 8004152:	6862      	ldr	r2, [r4, #4]
 8004154:	429a      	cmp	r2, r3
 8004156:	bfde      	ittt	le
 8004158:	2330      	movle	r3, #48	; 0x30
 800415a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800415e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004162:	ebac 0305 	sub.w	r3, ip, r5
 8004166:	6123      	str	r3, [r4, #16]
 8004168:	f8cd 8000 	str.w	r8, [sp]
 800416c:	463b      	mov	r3, r7
 800416e:	aa03      	add	r2, sp, #12
 8004170:	4621      	mov	r1, r4
 8004172:	4630      	mov	r0, r6
 8004174:	f7ff fef6 	bl	8003f64 <_printf_common>
 8004178:	3001      	adds	r0, #1
 800417a:	d14d      	bne.n	8004218 <_printf_i+0x1c8>
 800417c:	f04f 30ff 	mov.w	r0, #4294967295
 8004180:	b005      	add	sp, #20
 8004182:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004186:	4839      	ldr	r0, [pc, #228]	; (800426c <_printf_i+0x21c>)
 8004188:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800418c:	6813      	ldr	r3, [r2, #0]
 800418e:	6821      	ldr	r1, [r4, #0]
 8004190:	1d1d      	adds	r5, r3, #4
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6015      	str	r5, [r2, #0]
 8004196:	060a      	lsls	r2, r1, #24
 8004198:	d50b      	bpl.n	80041b2 <_printf_i+0x162>
 800419a:	07ca      	lsls	r2, r1, #31
 800419c:	bf44      	itt	mi
 800419e:	f041 0120 	orrmi.w	r1, r1, #32
 80041a2:	6021      	strmi	r1, [r4, #0]
 80041a4:	b91b      	cbnz	r3, 80041ae <_printf_i+0x15e>
 80041a6:	6822      	ldr	r2, [r4, #0]
 80041a8:	f022 0220 	bic.w	r2, r2, #32
 80041ac:	6022      	str	r2, [r4, #0]
 80041ae:	2210      	movs	r2, #16
 80041b0:	e7b7      	b.n	8004122 <_printf_i+0xd2>
 80041b2:	064d      	lsls	r5, r1, #25
 80041b4:	bf48      	it	mi
 80041b6:	b29b      	uxthmi	r3, r3
 80041b8:	e7ef      	b.n	800419a <_printf_i+0x14a>
 80041ba:	4665      	mov	r5, ip
 80041bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80041c0:	fb02 3311 	mls	r3, r2, r1, r3
 80041c4:	5cc3      	ldrb	r3, [r0, r3]
 80041c6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80041ca:	460b      	mov	r3, r1
 80041cc:	2900      	cmp	r1, #0
 80041ce:	d1f5      	bne.n	80041bc <_printf_i+0x16c>
 80041d0:	e7b9      	b.n	8004146 <_printf_i+0xf6>
 80041d2:	6813      	ldr	r3, [r2, #0]
 80041d4:	6825      	ldr	r5, [r4, #0]
 80041d6:	1d18      	adds	r0, r3, #4
 80041d8:	6961      	ldr	r1, [r4, #20]
 80041da:	6010      	str	r0, [r2, #0]
 80041dc:	0628      	lsls	r0, r5, #24
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	d501      	bpl.n	80041e6 <_printf_i+0x196>
 80041e2:	6019      	str	r1, [r3, #0]
 80041e4:	e002      	b.n	80041ec <_printf_i+0x19c>
 80041e6:	066a      	lsls	r2, r5, #25
 80041e8:	d5fb      	bpl.n	80041e2 <_printf_i+0x192>
 80041ea:	8019      	strh	r1, [r3, #0]
 80041ec:	2300      	movs	r3, #0
 80041ee:	4665      	mov	r5, ip
 80041f0:	6123      	str	r3, [r4, #16]
 80041f2:	e7b9      	b.n	8004168 <_printf_i+0x118>
 80041f4:	6813      	ldr	r3, [r2, #0]
 80041f6:	1d19      	adds	r1, r3, #4
 80041f8:	6011      	str	r1, [r2, #0]
 80041fa:	681d      	ldr	r5, [r3, #0]
 80041fc:	6862      	ldr	r2, [r4, #4]
 80041fe:	2100      	movs	r1, #0
 8004200:	4628      	mov	r0, r5
 8004202:	f000 f8e1 	bl	80043c8 <memchr>
 8004206:	b108      	cbz	r0, 800420c <_printf_i+0x1bc>
 8004208:	1b40      	subs	r0, r0, r5
 800420a:	6060      	str	r0, [r4, #4]
 800420c:	6863      	ldr	r3, [r4, #4]
 800420e:	6123      	str	r3, [r4, #16]
 8004210:	2300      	movs	r3, #0
 8004212:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004216:	e7a7      	b.n	8004168 <_printf_i+0x118>
 8004218:	6923      	ldr	r3, [r4, #16]
 800421a:	462a      	mov	r2, r5
 800421c:	4639      	mov	r1, r7
 800421e:	4630      	mov	r0, r6
 8004220:	47c0      	blx	r8
 8004222:	3001      	adds	r0, #1
 8004224:	d0aa      	beq.n	800417c <_printf_i+0x12c>
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	079b      	lsls	r3, r3, #30
 800422a:	d413      	bmi.n	8004254 <_printf_i+0x204>
 800422c:	68e0      	ldr	r0, [r4, #12]
 800422e:	9b03      	ldr	r3, [sp, #12]
 8004230:	4298      	cmp	r0, r3
 8004232:	bfb8      	it	lt
 8004234:	4618      	movlt	r0, r3
 8004236:	e7a3      	b.n	8004180 <_printf_i+0x130>
 8004238:	2301      	movs	r3, #1
 800423a:	464a      	mov	r2, r9
 800423c:	4639      	mov	r1, r7
 800423e:	4630      	mov	r0, r6
 8004240:	47c0      	blx	r8
 8004242:	3001      	adds	r0, #1
 8004244:	d09a      	beq.n	800417c <_printf_i+0x12c>
 8004246:	3501      	adds	r5, #1
 8004248:	68e3      	ldr	r3, [r4, #12]
 800424a:	9a03      	ldr	r2, [sp, #12]
 800424c:	1a9b      	subs	r3, r3, r2
 800424e:	42ab      	cmp	r3, r5
 8004250:	dcf2      	bgt.n	8004238 <_printf_i+0x1e8>
 8004252:	e7eb      	b.n	800422c <_printf_i+0x1dc>
 8004254:	2500      	movs	r5, #0
 8004256:	f104 0919 	add.w	r9, r4, #25
 800425a:	e7f5      	b.n	8004248 <_printf_i+0x1f8>
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1ac      	bne.n	80041ba <_printf_i+0x16a>
 8004260:	7803      	ldrb	r3, [r0, #0]
 8004262:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004266:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800426a:	e76c      	b.n	8004146 <_printf_i+0xf6>
 800426c:	08004539 	.word	0x08004539
 8004270:	0800454a 	.word	0x0800454a

08004274 <_sbrk_r>:
 8004274:	b538      	push	{r3, r4, r5, lr}
 8004276:	2300      	movs	r3, #0
 8004278:	4c05      	ldr	r4, [pc, #20]	; (8004290 <_sbrk_r+0x1c>)
 800427a:	4605      	mov	r5, r0
 800427c:	4608      	mov	r0, r1
 800427e:	6023      	str	r3, [r4, #0]
 8004280:	f7fc fa70 	bl	8000764 <_sbrk>
 8004284:	1c43      	adds	r3, r0, #1
 8004286:	d102      	bne.n	800428e <_sbrk_r+0x1a>
 8004288:	6823      	ldr	r3, [r4, #0]
 800428a:	b103      	cbz	r3, 800428e <_sbrk_r+0x1a>
 800428c:	602b      	str	r3, [r5, #0]
 800428e:	bd38      	pop	{r3, r4, r5, pc}
 8004290:	20000130 	.word	0x20000130

08004294 <__sread>:
 8004294:	b510      	push	{r4, lr}
 8004296:	460c      	mov	r4, r1
 8004298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800429c:	f000 f8a4 	bl	80043e8 <_read_r>
 80042a0:	2800      	cmp	r0, #0
 80042a2:	bfab      	itete	ge
 80042a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80042a6:	89a3      	ldrhlt	r3, [r4, #12]
 80042a8:	181b      	addge	r3, r3, r0
 80042aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80042ae:	bfac      	ite	ge
 80042b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80042b2:	81a3      	strhlt	r3, [r4, #12]
 80042b4:	bd10      	pop	{r4, pc}

080042b6 <__swrite>:
 80042b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042ba:	461f      	mov	r7, r3
 80042bc:	898b      	ldrh	r3, [r1, #12]
 80042be:	4605      	mov	r5, r0
 80042c0:	05db      	lsls	r3, r3, #23
 80042c2:	460c      	mov	r4, r1
 80042c4:	4616      	mov	r6, r2
 80042c6:	d505      	bpl.n	80042d4 <__swrite+0x1e>
 80042c8:	2302      	movs	r3, #2
 80042ca:	2200      	movs	r2, #0
 80042cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042d0:	f000 f868 	bl	80043a4 <_lseek_r>
 80042d4:	89a3      	ldrh	r3, [r4, #12]
 80042d6:	4632      	mov	r2, r6
 80042d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042dc:	81a3      	strh	r3, [r4, #12]
 80042de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042e2:	463b      	mov	r3, r7
 80042e4:	4628      	mov	r0, r5
 80042e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042ea:	f000 b817 	b.w	800431c <_write_r>

080042ee <__sseek>:
 80042ee:	b510      	push	{r4, lr}
 80042f0:	460c      	mov	r4, r1
 80042f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042f6:	f000 f855 	bl	80043a4 <_lseek_r>
 80042fa:	1c43      	adds	r3, r0, #1
 80042fc:	89a3      	ldrh	r3, [r4, #12]
 80042fe:	bf15      	itete	ne
 8004300:	6560      	strne	r0, [r4, #84]	; 0x54
 8004302:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004306:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800430a:	81a3      	strheq	r3, [r4, #12]
 800430c:	bf18      	it	ne
 800430e:	81a3      	strhne	r3, [r4, #12]
 8004310:	bd10      	pop	{r4, pc}

08004312 <__sclose>:
 8004312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004316:	f000 b813 	b.w	8004340 <_close_r>
	...

0800431c <_write_r>:
 800431c:	b538      	push	{r3, r4, r5, lr}
 800431e:	4605      	mov	r5, r0
 8004320:	4608      	mov	r0, r1
 8004322:	4611      	mov	r1, r2
 8004324:	2200      	movs	r2, #0
 8004326:	4c05      	ldr	r4, [pc, #20]	; (800433c <_write_r+0x20>)
 8004328:	6022      	str	r2, [r4, #0]
 800432a:	461a      	mov	r2, r3
 800432c:	f7fc f9cd 	bl	80006ca <_write>
 8004330:	1c43      	adds	r3, r0, #1
 8004332:	d102      	bne.n	800433a <_write_r+0x1e>
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	b103      	cbz	r3, 800433a <_write_r+0x1e>
 8004338:	602b      	str	r3, [r5, #0]
 800433a:	bd38      	pop	{r3, r4, r5, pc}
 800433c:	20000130 	.word	0x20000130

08004340 <_close_r>:
 8004340:	b538      	push	{r3, r4, r5, lr}
 8004342:	2300      	movs	r3, #0
 8004344:	4c05      	ldr	r4, [pc, #20]	; (800435c <_close_r+0x1c>)
 8004346:	4605      	mov	r5, r0
 8004348:	4608      	mov	r0, r1
 800434a:	6023      	str	r3, [r4, #0]
 800434c:	f7fc f9d9 	bl	8000702 <_close>
 8004350:	1c43      	adds	r3, r0, #1
 8004352:	d102      	bne.n	800435a <_close_r+0x1a>
 8004354:	6823      	ldr	r3, [r4, #0]
 8004356:	b103      	cbz	r3, 800435a <_close_r+0x1a>
 8004358:	602b      	str	r3, [r5, #0]
 800435a:	bd38      	pop	{r3, r4, r5, pc}
 800435c:	20000130 	.word	0x20000130

08004360 <_fstat_r>:
 8004360:	b538      	push	{r3, r4, r5, lr}
 8004362:	2300      	movs	r3, #0
 8004364:	4c06      	ldr	r4, [pc, #24]	; (8004380 <_fstat_r+0x20>)
 8004366:	4605      	mov	r5, r0
 8004368:	4608      	mov	r0, r1
 800436a:	4611      	mov	r1, r2
 800436c:	6023      	str	r3, [r4, #0]
 800436e:	f7fc f9d3 	bl	8000718 <_fstat>
 8004372:	1c43      	adds	r3, r0, #1
 8004374:	d102      	bne.n	800437c <_fstat_r+0x1c>
 8004376:	6823      	ldr	r3, [r4, #0]
 8004378:	b103      	cbz	r3, 800437c <_fstat_r+0x1c>
 800437a:	602b      	str	r3, [r5, #0]
 800437c:	bd38      	pop	{r3, r4, r5, pc}
 800437e:	bf00      	nop
 8004380:	20000130 	.word	0x20000130

08004384 <_isatty_r>:
 8004384:	b538      	push	{r3, r4, r5, lr}
 8004386:	2300      	movs	r3, #0
 8004388:	4c05      	ldr	r4, [pc, #20]	; (80043a0 <_isatty_r+0x1c>)
 800438a:	4605      	mov	r5, r0
 800438c:	4608      	mov	r0, r1
 800438e:	6023      	str	r3, [r4, #0]
 8004390:	f7fc f9d1 	bl	8000736 <_isatty>
 8004394:	1c43      	adds	r3, r0, #1
 8004396:	d102      	bne.n	800439e <_isatty_r+0x1a>
 8004398:	6823      	ldr	r3, [r4, #0]
 800439a:	b103      	cbz	r3, 800439e <_isatty_r+0x1a>
 800439c:	602b      	str	r3, [r5, #0]
 800439e:	bd38      	pop	{r3, r4, r5, pc}
 80043a0:	20000130 	.word	0x20000130

080043a4 <_lseek_r>:
 80043a4:	b538      	push	{r3, r4, r5, lr}
 80043a6:	4605      	mov	r5, r0
 80043a8:	4608      	mov	r0, r1
 80043aa:	4611      	mov	r1, r2
 80043ac:	2200      	movs	r2, #0
 80043ae:	4c05      	ldr	r4, [pc, #20]	; (80043c4 <_lseek_r+0x20>)
 80043b0:	6022      	str	r2, [r4, #0]
 80043b2:	461a      	mov	r2, r3
 80043b4:	f7fc f9c9 	bl	800074a <_lseek>
 80043b8:	1c43      	adds	r3, r0, #1
 80043ba:	d102      	bne.n	80043c2 <_lseek_r+0x1e>
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	b103      	cbz	r3, 80043c2 <_lseek_r+0x1e>
 80043c0:	602b      	str	r3, [r5, #0]
 80043c2:	bd38      	pop	{r3, r4, r5, pc}
 80043c4:	20000130 	.word	0x20000130

080043c8 <memchr>:
 80043c8:	b510      	push	{r4, lr}
 80043ca:	b2c9      	uxtb	r1, r1
 80043cc:	4402      	add	r2, r0
 80043ce:	4290      	cmp	r0, r2
 80043d0:	4603      	mov	r3, r0
 80043d2:	d101      	bne.n	80043d8 <memchr+0x10>
 80043d4:	2300      	movs	r3, #0
 80043d6:	e003      	b.n	80043e0 <memchr+0x18>
 80043d8:	781c      	ldrb	r4, [r3, #0]
 80043da:	3001      	adds	r0, #1
 80043dc:	428c      	cmp	r4, r1
 80043de:	d1f6      	bne.n	80043ce <memchr+0x6>
 80043e0:	4618      	mov	r0, r3
 80043e2:	bd10      	pop	{r4, pc}

080043e4 <__malloc_lock>:
 80043e4:	4770      	bx	lr

080043e6 <__malloc_unlock>:
 80043e6:	4770      	bx	lr

080043e8 <_read_r>:
 80043e8:	b538      	push	{r3, r4, r5, lr}
 80043ea:	4605      	mov	r5, r0
 80043ec:	4608      	mov	r0, r1
 80043ee:	4611      	mov	r1, r2
 80043f0:	2200      	movs	r2, #0
 80043f2:	4c05      	ldr	r4, [pc, #20]	; (8004408 <_read_r+0x20>)
 80043f4:	6022      	str	r2, [r4, #0]
 80043f6:	461a      	mov	r2, r3
 80043f8:	f7fc f94a 	bl	8000690 <_read>
 80043fc:	1c43      	adds	r3, r0, #1
 80043fe:	d102      	bne.n	8004406 <_read_r+0x1e>
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	b103      	cbz	r3, 8004406 <_read_r+0x1e>
 8004404:	602b      	str	r3, [r5, #0]
 8004406:	bd38      	pop	{r3, r4, r5, pc}
 8004408:	20000130 	.word	0x20000130

0800440c <_init>:
 800440c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440e:	bf00      	nop
 8004410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004412:	bc08      	pop	{r3}
 8004414:	469e      	mov	lr, r3
 8004416:	4770      	bx	lr

08004418 <_fini>:
 8004418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441a:	bf00      	nop
 800441c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800441e:	bc08      	pop	{r3}
 8004420:	469e      	mov	lr, r3
 8004422:	4770      	bx	lr
