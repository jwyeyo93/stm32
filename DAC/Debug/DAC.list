
DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092f0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08009478  08009478  00019478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009864  08009864  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009864  08009864  00019864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800986c  0800986c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800986c  0800986c  0001986c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009870  08009870  00019870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000860  20000090  08009904  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008f0  08009904  000208f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002197c  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004709  00000000  00000000  00041a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001938  00000000  00000000  00046148  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001730  00000000  00000000  00047a80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026acf  00000000  00000000  000491b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001841e  00000000  00000000  0006fc7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d961f  00000000  00000000  0008809d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001616bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c54  00000000  00000000  00161738  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009460 	.word	0x08009460

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08009460 	.word	0x08009460

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80004ce:	463b      	mov	r3, r7
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80004da:	4b21      	ldr	r3, [pc, #132]	; (8000560 <MX_ADC1_Init+0x98>)
 80004dc:	4a21      	ldr	r2, [pc, #132]	; (8000564 <MX_ADC1_Init+0x9c>)
 80004de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004e0:	4b1f      	ldr	r3, [pc, #124]	; (8000560 <MX_ADC1_Init+0x98>)
 80004e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e8:	4b1d      	ldr	r3, [pc, #116]	; (8000560 <MX_ADC1_Init+0x98>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004ee:	4b1c      	ldr	r3, [pc, #112]	; (8000560 <MX_ADC1_Init+0x98>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004f4:	4b1a      	ldr	r3, [pc, #104]	; (8000560 <MX_ADC1_Init+0x98>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004fa:	4b19      	ldr	r3, [pc, #100]	; (8000560 <MX_ADC1_Init+0x98>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000502:	4b17      	ldr	r3, [pc, #92]	; (8000560 <MX_ADC1_Init+0x98>)
 8000504:	2200      	movs	r2, #0
 8000506:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000508:	4b15      	ldr	r3, [pc, #84]	; (8000560 <MX_ADC1_Init+0x98>)
 800050a:	4a17      	ldr	r2, [pc, #92]	; (8000568 <MX_ADC1_Init+0xa0>)
 800050c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800050e:	4b14      	ldr	r3, [pc, #80]	; (8000560 <MX_ADC1_Init+0x98>)
 8000510:	2200      	movs	r2, #0
 8000512:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <MX_ADC1_Init+0x98>)
 8000516:	2201      	movs	r2, #1
 8000518:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800051a:	4b11      	ldr	r3, [pc, #68]	; (8000560 <MX_ADC1_Init+0x98>)
 800051c:	2200      	movs	r2, #0
 800051e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000522:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <MX_ADC1_Init+0x98>)
 8000524:	2201      	movs	r2, #1
 8000526:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000528:	480d      	ldr	r0, [pc, #52]	; (8000560 <MX_ADC1_Init+0x98>)
 800052a:	f000 fdf5 	bl	8001118 <HAL_ADC_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000534:	f000 fb24 	bl	8000b80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000538:	2310      	movs	r3, #16
 800053a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800053c:	2301      	movs	r3, #1
 800053e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000540:	2304      	movs	r3, #4
 8000542:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000544:	463b      	mov	r3, r7
 8000546:	4619      	mov	r1, r3
 8000548:	4805      	ldr	r0, [pc, #20]	; (8000560 <MX_ADC1_Init+0x98>)
 800054a:	f000 fe29 	bl	80011a0 <HAL_ADC_ConfigChannel>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000554:	f000 fb14 	bl	8000b80 <Error_Handler>
  }

}
 8000558:	bf00      	nop
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	200000c4 	.word	0x200000c4
 8000564:	40012000 	.word	0x40012000
 8000568:	0f000001 	.word	0x0f000001

0800056c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0b      	ldr	r2, [pc, #44]	; (80005a8 <HAL_ADC_MspInit+0x3c>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d10d      	bne.n	800059a <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <HAL_ADC_MspInit+0x40>)
 8000584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000586:	4a09      	ldr	r2, [pc, #36]	; (80005ac <HAL_ADC_MspInit+0x40>)
 8000588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800058c:	6453      	str	r3, [r2, #68]	; 0x44
 800058e:	4b07      	ldr	r3, [pc, #28]	; (80005ac <HAL_ADC_MspInit+0x40>)
 8000590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800059a:	bf00      	nop
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	40012000 	.word	0x40012000
 80005ac:	40023800 	.word	0x40023800

080005b0 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80005b6:	463b      	mov	r3, r7
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]

  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 80005be:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <MX_DAC_Init+0x4c>)
 80005c0:	4a0f      	ldr	r2, [pc, #60]	; (8000600 <MX_DAC_Init+0x50>)
 80005c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80005c4:	480d      	ldr	r0, [pc, #52]	; (80005fc <MX_DAC_Init+0x4c>)
 80005c6:	f001 f91a 	bl	80017fe <HAL_DAC_Init>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80005d0:	f000 fad6 	bl	8000b80 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80005dc:	463b      	mov	r3, r7
 80005de:	2200      	movs	r2, #0
 80005e0:	4619      	mov	r1, r3
 80005e2:	4806      	ldr	r0, [pc, #24]	; (80005fc <MX_DAC_Init+0x4c>)
 80005e4:	f001 f993 	bl	800190e <HAL_DAC_ConfigChannel>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80005ee:	f000 fac7 	bl	8000b80 <Error_Handler>
  }

}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	2000010c 	.word	0x2000010c
 8000600:	40007400 	.word	0x40007400

08000604 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	; 0x28
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a17      	ldr	r2, [pc, #92]	; (8000680 <HAL_DAC_MspInit+0x7c>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d127      	bne.n	8000676 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]
 800062a:	4b16      	ldr	r3, [pc, #88]	; (8000684 <HAL_DAC_MspInit+0x80>)
 800062c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062e:	4a15      	ldr	r2, [pc, #84]	; (8000684 <HAL_DAC_MspInit+0x80>)
 8000630:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000634:	6413      	str	r3, [r2, #64]	; 0x40
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <HAL_DAC_MspInit+0x80>)
 8000638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <HAL_DAC_MspInit+0x80>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a0e      	ldr	r2, [pc, #56]	; (8000684 <HAL_DAC_MspInit+0x80>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <HAL_DAC_MspInit+0x80>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800065e:	2310      	movs	r3, #16
 8000660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000662:	2303      	movs	r3, #3
 8000664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <HAL_DAC_MspInit+0x84>)
 8000672:	f001 f9e1 	bl	8001a38 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000676:	bf00      	nop
 8000678:	3728      	adds	r7, #40	; 0x28
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40007400 	.word	0x40007400
 8000684:	40023800 	.word	0x40023800
 8000688:	40020000 	.word	0x40020000

0800068c <MX_GPIO_Init>:
     PC7   ------> I2S3_MCK
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08c      	sub	sp, #48	; 0x30
 8000690:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	f107 031c 	add.w	r3, r7, #28
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	61bb      	str	r3, [r7, #24]
 80006a6:	4b79      	ldr	r3, [pc, #484]	; (800088c <MX_GPIO_Init+0x200>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a78      	ldr	r2, [pc, #480]	; (800088c <MX_GPIO_Init+0x200>)
 80006ac:	f043 0310 	orr.w	r3, r3, #16
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b76      	ldr	r3, [pc, #472]	; (800088c <MX_GPIO_Init+0x200>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0310 	and.w	r3, r3, #16
 80006ba:	61bb      	str	r3, [r7, #24]
 80006bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
 80006c2:	4b72      	ldr	r3, [pc, #456]	; (800088c <MX_GPIO_Init+0x200>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a71      	ldr	r2, [pc, #452]	; (800088c <MX_GPIO_Init+0x200>)
 80006c8:	f043 0304 	orr.w	r3, r3, #4
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b6f      	ldr	r3, [pc, #444]	; (800088c <MX_GPIO_Init+0x200>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
 80006de:	4b6b      	ldr	r3, [pc, #428]	; (800088c <MX_GPIO_Init+0x200>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a6a      	ldr	r2, [pc, #424]	; (800088c <MX_GPIO_Init+0x200>)
 80006e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b68      	ldr	r3, [pc, #416]	; (800088c <MX_GPIO_Init+0x200>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	4b64      	ldr	r3, [pc, #400]	; (800088c <MX_GPIO_Init+0x200>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a63      	ldr	r2, [pc, #396]	; (800088c <MX_GPIO_Init+0x200>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b61      	ldr	r3, [pc, #388]	; (800088c <MX_GPIO_Init+0x200>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	4b5d      	ldr	r3, [pc, #372]	; (800088c <MX_GPIO_Init+0x200>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a5c      	ldr	r2, [pc, #368]	; (800088c <MX_GPIO_Init+0x200>)
 800071c:	f043 0302 	orr.w	r3, r3, #2
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b5a      	ldr	r3, [pc, #360]	; (800088c <MX_GPIO_Init+0x200>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b56      	ldr	r3, [pc, #344]	; (800088c <MX_GPIO_Init+0x200>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a55      	ldr	r2, [pc, #340]	; (800088c <MX_GPIO_Init+0x200>)
 8000738:	f043 0308 	orr.w	r3, r3, #8
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b53      	ldr	r3, [pc, #332]	; (800088c <MX_GPIO_Init+0x200>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0308 	and.w	r3, r3, #8
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2108      	movs	r1, #8
 800074e:	4850      	ldr	r0, [pc, #320]	; (8000890 <MX_GPIO_Init+0x204>)
 8000750:	f001 fb0c 	bl	8001d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000754:	2201      	movs	r2, #1
 8000756:	2101      	movs	r1, #1
 8000758:	484e      	ldr	r0, [pc, #312]	; (8000894 <MX_GPIO_Init+0x208>)
 800075a:	f001 fb07 	bl	8001d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 800075e:	2200      	movs	r2, #0
 8000760:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000764:	484c      	ldr	r0, [pc, #304]	; (8000898 <MX_GPIO_Init+0x20c>)
 8000766:	f001 fb01 	bl	8001d6c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800076a:	2308      	movs	r3, #8
 800076c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	4619      	mov	r1, r3
 8000780:	4843      	ldr	r0, [pc, #268]	; (8000890 <MX_GPIO_Init+0x204>)
 8000782:	f001 f959 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000786:	2301      	movs	r3, #1
 8000788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2301      	movs	r3, #1
 800078c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	4619      	mov	r1, r3
 800079c:	483d      	ldr	r0, [pc, #244]	; (8000894 <MX_GPIO_Init+0x208>)
 800079e:	f001 f94b 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007a2:	2308      	movs	r3, #8
 80007a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007b2:	2305      	movs	r3, #5
 80007b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4619      	mov	r1, r3
 80007bc:	4835      	ldr	r0, [pc, #212]	; (8000894 <MX_GPIO_Init+0x208>)
 80007be:	f001 f93b 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007c2:	2301      	movs	r3, #1
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c6:	4b35      	ldr	r3, [pc, #212]	; (800089c <MX_GPIO_Init+0x210>)
 80007c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	4619      	mov	r1, r3
 80007d4:	4832      	ldr	r0, [pc, #200]	; (80008a0 <MX_GPIO_Init+0x214>)
 80007d6:	f001 f92f 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007da:	2304      	movs	r3, #4
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007de:	2300      	movs	r3, #0
 80007e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	482d      	ldr	r0, [pc, #180]	; (80008a4 <MX_GPIO_Init+0x218>)
 80007ee:	f001 f923 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80007f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f8:	2302      	movs	r3, #2
 80007fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000804:	2305      	movs	r3, #5
 8000806:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000808:	f107 031c 	add.w	r3, r7, #28
 800080c:	4619      	mov	r1, r3
 800080e:	4825      	ldr	r0, [pc, #148]	; (80008a4 <MX_GPIO_Init+0x218>)
 8000810:	f001 f912 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 
                           PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8000814:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000818:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	481a      	ldr	r0, [pc, #104]	; (8000898 <MX_GPIO_Init+0x20c>)
 800082e:	f001 f903 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000832:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000838:	2302      	movs	r3, #2
 800083a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000844:	2306      	movs	r3, #6
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	4811      	ldr	r0, [pc, #68]	; (8000894 <MX_GPIO_Init+0x208>)
 8000850:	f001 f8f2 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000854:	2320      	movs	r3, #32
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000858:	2300      	movs	r3, #0
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	480c      	ldr	r0, [pc, #48]	; (8000898 <MX_GPIO_Init+0x20c>)
 8000868:	f001 f8e6 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800086c:	2302      	movs	r3, #2
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000870:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <MX_GPIO_Init+0x21c>)
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	4804      	ldr	r0, [pc, #16]	; (8000890 <MX_GPIO_Init+0x204>)
 8000880:	f001 f8da 	bl	8001a38 <HAL_GPIO_Init>

}
 8000884:	bf00      	nop
 8000886:	3730      	adds	r7, #48	; 0x30
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40023800 	.word	0x40023800
 8000890:	40021000 	.word	0x40021000
 8000894:	40020800 	.word	0x40020800
 8000898:	40020c00 	.word	0x40020c00
 800089c:	10110000 	.word	0x10110000
 80008a0:	40020000 	.word	0x40020000
 80008a4:	40020400 	.word	0x40020400
 80008a8:	10120000 	.word	0x10120000

080008ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_I2C1_Init+0x50>)
 80008b2:	4a13      	ldr	r2, [pc, #76]	; (8000900 <MX_I2C1_Init+0x54>)
 80008b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_I2C1_Init+0x50>)
 80008b8:	4a12      	ldr	r2, [pc, #72]	; (8000904 <MX_I2C1_Init+0x58>)
 80008ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_I2C1_Init+0x50>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_I2C1_Init+0x50>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_I2C1_Init+0x50>)
 80008ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d0:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <MX_I2C1_Init+0x50>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_I2C1_Init+0x50>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <MX_I2C1_Init+0x50>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_I2C1_Init+0x50>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <MX_I2C1_Init+0x50>)
 80008ea:	f002 ff6d 	bl	80037c8 <HAL_I2C_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008f4:	f000 f944 	bl	8000b80 <Error_Handler>
  }

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000120 	.word	0x20000120
 8000900:	40005400 	.word	0x40005400
 8000904:	000186a0 	.word	0x000186a0

08000908 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a19      	ldr	r2, [pc, #100]	; (800098c <HAL_I2C_MspInit+0x84>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d12c      	bne.n	8000984 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	4b18      	ldr	r3, [pc, #96]	; (8000990 <HAL_I2C_MspInit+0x88>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a17      	ldr	r2, [pc, #92]	; (8000990 <HAL_I2C_MspInit+0x88>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <HAL_I2C_MspInit+0x88>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000946:	f44f 7310 	mov.w	r3, #576	; 0x240
 800094a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800094c:	2312      	movs	r3, #18
 800094e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000950:	2301      	movs	r3, #1
 8000952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000958:	2304      	movs	r3, #4
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4619      	mov	r1, r3
 8000962:	480c      	ldr	r0, [pc, #48]	; (8000994 <HAL_I2C_MspInit+0x8c>)
 8000964:	f001 f868 	bl	8001a38 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <HAL_I2C_MspInit+0x88>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	4a07      	ldr	r2, [pc, #28]	; (8000990 <HAL_I2C_MspInit+0x88>)
 8000972:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000976:	6413      	str	r3, [r2, #64]	; 0x40
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <HAL_I2C_MspInit+0x88>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000984:	bf00      	nop
 8000986:	3728      	adds	r7, #40	; 0x28
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40005400 	.word	0x40005400
 8000990:	40023800 	.word	0x40023800
 8000994:	40020400 	.word	0x40020400

08000998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800099e:	f000 fb27 	bl	8000ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a2:	f000 f823 	bl	80009ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a6:	f7ff fe71 	bl	800068c <MX_GPIO_Init>
  MX_I2C1_Init();
 80009aa:	f7ff ff7f 	bl	80008ac <MX_I2C1_Init>
  MX_SPI1_Init();
 80009ae:	f000 f8ef 	bl	8000b90 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80009b2:	f007 fc05 	bl	80081c0 <MX_USB_HOST_Init>
  MX_TIM7_Init();
 80009b6:	f000 fa27 	bl	8000e08 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 80009ba:	f000 fa7d 	bl	8000eb8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80009be:	f7ff fd83 	bl	80004c8 <MX_ADC1_Init>
  MX_DAC_Init();
 80009c2:	f7ff fdf5 	bl	80005b0 <MX_DAC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80009c6:	f000 f87b 	bl	8000ac0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80009ca:	2100      	movs	r1, #0
 80009cc:	4805      	ldr	r0, [pc, #20]	; (80009e4 <main+0x4c>)
 80009ce:	f000 ff38 	bl	8001842 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 80009d2:	4805      	ldr	r0, [pc, #20]	; (80009e8 <main+0x50>)
 80009d4:	f003 fd21 	bl	800441a <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t dacval = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	80fb      	strh	r3, [r7, #6]
  {
//	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dacval);
//	  dacval++;
//	  if(dacval > 4095)	dacval = 0;
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80009dc:	f007 fc16 	bl	800820c <MX_USB_HOST_Process>
 80009e0:	e7fc      	b.n	80009dc <main+0x44>
 80009e2:	bf00      	nop
 80009e4:	2000010c 	.word	0x2000010c
 80009e8:	200001cc 	.word	0x200001cc

080009ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b094      	sub	sp, #80	; 0x50
 80009f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f2:	f107 0320 	add.w	r3, r7, #32
 80009f6:	2230      	movs	r2, #48	; 0x30
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f007 ff22 	bl	8008844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a10:	2300      	movs	r3, #0
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	4b28      	ldr	r3, [pc, #160]	; (8000ab8 <SystemClock_Config+0xcc>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a18:	4a27      	ldr	r2, [pc, #156]	; (8000ab8 <SystemClock_Config+0xcc>)
 8000a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a20:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <SystemClock_Config+0xcc>)
 8000a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	4b22      	ldr	r3, [pc, #136]	; (8000abc <SystemClock_Config+0xd0>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a21      	ldr	r2, [pc, #132]	; (8000abc <SystemClock_Config+0xd0>)
 8000a36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a3a:	6013      	str	r3, [r2, #0]
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <SystemClock_Config+0xd0>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a52:	2302      	movs	r3, #2
 8000a54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a60:	23a8      	movs	r3, #168	; 0xa8
 8000a62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a64:	2302      	movs	r3, #2
 8000a66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a68:	2307      	movs	r3, #7
 8000a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a6c:	f107 0320 	add.w	r3, r7, #32
 8000a70:	4618      	mov	r0, r3
 8000a72:	f002 ffe1 	bl	8003a38 <HAL_RCC_OscConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a7c:	f000 f880 	bl	8000b80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a80:	230f      	movs	r3, #15
 8000a82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a84:	2302      	movs	r3, #2
 8000a86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a98:	f107 030c 	add.w	r3, r7, #12
 8000a9c:	2105      	movs	r1, #5
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f003 fa3a 	bl	8003f18 <HAL_RCC_ClockConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000aaa:	f000 f869 	bl	8000b80 <Error_Handler>
  }
}
 8000aae:	bf00      	nop
 8000ab0:	3750      	adds	r7, #80	; 0x50
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40007000 	.word	0x40007000

08000ac0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	2006      	movs	r0, #6
 8000aca:	f000 fe62 	bl	8001792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ace:	2006      	movs	r0, #6
 8000ad0:	f000 fe7b 	bl	80017ca <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	2037      	movs	r0, #55	; 0x37
 8000ada:	f000 fe5a 	bl	8001792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000ade:	2037      	movs	r0, #55	; 0x37
 8000ae0:	f000 fe73 	bl	80017ca <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	2026      	movs	r0, #38	; 0x26
 8000aea:	f000 fe52 	bl	8001792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000aee:	2026      	movs	r0, #38	; 0x26
 8000af0:	f000 fe6b 	bl	80017ca <HAL_NVIC_EnableIRQ>
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	static unsigned char cnt = 0;
	if(htim->Instance == TIM7)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a18      	ldr	r2, [pc, #96]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d12a      	bne.n	8000b60 <HAL_TIM_PeriodElapsedCallback+0x68>
	{
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (sinf(2 * 3.141592f * 50 * cnt / 1000.f) + 1) * 2047);
 8000b0a:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	ee07 3a90 	vmov	s15, r3
 8000b12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b16:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000b70 <HAL_TIM_PeriodElapsedCallback+0x78>
 8000b1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b1e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000b74 <HAL_TIM_PeriodElapsedCallback+0x7c>
 8000b22:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000b26:	eeb0 0a66 	vmov.f32	s0, s13
 8000b2a:	f007 ff4d 	bl	80089c8 <sinf>
 8000b2e:	eeb0 7a40 	vmov.f32	s14, s0
 8000b32:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b3a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000b78 <HAL_TIM_PeriodElapsedCallback+0x80>
 8000b3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b46:	ee17 3a90 	vmov	r3, s15
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	480b      	ldr	r0, [pc, #44]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000b50:	f000 ff2a 	bl	80019a8 <HAL_DAC_SetValue>
		cnt++;
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000b5e:	701a      	strb	r2, [r3, #0]
		if(cnt > 999)	cnt = 0;
	}

}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40001400 	.word	0x40001400
 8000b6c:	200000ac 	.word	0x200000ac
 8000b70:	439d1461 	.word	0x439d1461
 8000b74:	447a0000 	.word	0x447a0000
 8000b78:	44ffe000 	.word	0x44ffe000
 8000b7c:	2000010c 	.word	0x2000010c

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
	...

08000b90 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000b94:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000b96:	4a18      	ldr	r2, [pc, #96]	; (8000bf8 <MX_SPI1_Init+0x68>)
 8000b98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b9a:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000b9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ba0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ba2:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bd4:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000bdc:	220a      	movs	r2, #10
 8000bde:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000be0:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000be2:	f003 fb8b 	bl	80042fc <HAL_SPI_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bec:	f7ff ffc8 	bl	8000b80 <Error_Handler>
  }

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000174 	.word	0x20000174
 8000bf8:	40013000 	.word	0x40013000

08000bfc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_SPI_MspInit+0x84>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d12b      	bne.n	8000c76 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a10      	ldr	r2, [pc, #64]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c56:	23e0      	movs	r3, #224	; 0xe0
 8000c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c66:	2305      	movs	r3, #5
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <HAL_SPI_MspInit+0x8c>)
 8000c72:	f000 fee1 	bl	8001a38 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c76:	bf00      	nop
 8000c78:	3728      	adds	r7, #40	; 0x28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40013000 	.word	0x40013000
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020000 	.word	0x40020000

08000c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	4a0f      	ldr	r2, [pc, #60]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	4a08      	ldr	r2, [pc, #32]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cca:	2007      	movs	r0, #7
 8000ccc:	f000 fd56 	bl	800177c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40023800 	.word	0x40023800

08000cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <HardFault_Handler+0x4>

08000cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <MemManage_Handler+0x4>

08000cf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <BusFault_Handler+0x4>

08000cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <UsageFault_Handler+0x4>

08000d02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d30:	f000 f9b0 	bl	8001094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	f001 f82f 	bl	8001da0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d4c:	4802      	ldr	r0, [pc, #8]	; (8000d58 <USART2_IRQHandler+0x10>)
 8000d4e:	f003 fe37 	bl	80049c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	2000020c 	.word	0x2000020c

08000d5c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <TIM7_IRQHandler+0x10>)
 8000d62:	f003 fb7e 	bl	8004462 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200001cc 	.word	0x200001cc

08000d70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <OTG_FS_IRQHandler+0x10>)
 8000d76:	f001 fac5 	bl	8002304 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000628 	.word	0x20000628

08000d84 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <_sbrk+0x50>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d102      	bne.n	8000d9a <_sbrk+0x16>
		heap_end = &end;
 8000d94:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <_sbrk+0x50>)
 8000d96:	4a10      	ldr	r2, [pc, #64]	; (8000dd8 <_sbrk+0x54>)
 8000d98:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <_sbrk+0x50>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <_sbrk+0x50>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4413      	add	r3, r2
 8000da8:	466a      	mov	r2, sp
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d907      	bls.n	8000dbe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000dae:	f007 fd0f 	bl	80087d0 <__errno>
 8000db2:	4602      	mov	r2, r0
 8000db4:	230c      	movs	r3, #12
 8000db6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000db8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbc:	e006      	b.n	8000dcc <_sbrk+0x48>
	}

	heap_end += incr;
 8000dbe:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <_sbrk+0x50>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	4a03      	ldr	r2, [pc, #12]	; (8000dd4 <_sbrk+0x50>)
 8000dc8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000dca:	68fb      	ldr	r3, [r7, #12]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	200000b0 	.word	0x200000b0
 8000dd8:	200008f0 	.word	0x200008f0

08000ddc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <SystemInit+0x28>)
 8000de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000de6:	4a07      	ldr	r2, [pc, #28]	; (8000e04 <SystemInit+0x28>)
 8000de8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <SystemInit+0x28>)
 8000df2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000df6:	609a      	str	r2, [r3, #8]
#endif
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e0e:	463b      	mov	r3, r7
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <MX_TIM7_Init+0x64>)
 8000e18:	4a15      	ldr	r2, [pc, #84]	; (8000e70 <MX_TIM7_Init+0x68>)
 8000e1a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10-1;
 8000e1c:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <MX_TIM7_Init+0x64>)
 8000e1e:	2209      	movs	r2, #9
 8000e20:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e22:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <MX_TIM7_Init+0x64>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8400-1;
 8000e28:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <MX_TIM7_Init+0x64>)
 8000e2a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000e2e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e30:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <MX_TIM7_Init+0x64>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000e36:	480d      	ldr	r0, [pc, #52]	; (8000e6c <MX_TIM7_Init+0x64>)
 8000e38:	f003 fac4 	bl	80043c4 <HAL_TIM_Base_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000e42:	f7ff fe9d 	bl	8000b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e46:	2300      	movs	r3, #0
 8000e48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000e4e:	463b      	mov	r3, r7
 8000e50:	4619      	mov	r1, r3
 8000e52:	4806      	ldr	r0, [pc, #24]	; (8000e6c <MX_TIM7_Init+0x64>)
 8000e54:	f003 fcd6 	bl	8004804 <HAL_TIMEx_MasterConfigSynchronization>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000e5e:	f7ff fe8f 	bl	8000b80 <Error_Handler>
  }

}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	200001cc 	.word	0x200001cc
 8000e70:	40001400 	.word	0x40001400

08000e74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <HAL_TIM_Base_MspInit+0x3c>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d10d      	bne.n	8000ea2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <HAL_TIM_Base_MspInit+0x40>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	4a09      	ldr	r2, [pc, #36]	; (8000eb4 <HAL_TIM_Base_MspInit+0x40>)
 8000e90:	f043 0320 	orr.w	r3, r3, #32
 8000e94:	6413      	str	r3, [r2, #64]	; 0x40
 8000e96:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <HAL_TIM_Base_MspInit+0x40>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	f003 0320 	and.w	r3, r3, #32
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	3714      	adds	r7, #20
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	40001400 	.word	0x40001400
 8000eb4:	40023800 	.word	0x40023800

08000eb8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_USART2_UART_Init+0x4c>)
 8000ebe:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <MX_USART2_UART_Init+0x50>)
 8000ec0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <MX_USART2_UART_Init+0x4c>)
 8000ec4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ec8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <MX_USART2_UART_Init+0x4c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_USART2_UART_Init+0x4c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <MX_USART2_UART_Init+0x4c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_USART2_UART_Init+0x4c>)
 8000ede:	220c      	movs	r2, #12
 8000ee0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <MX_USART2_UART_Init+0x4c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <MX_USART2_UART_Init+0x4c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_USART2_UART_Init+0x4c>)
 8000ef0:	f003 fd18 	bl	8004924 <HAL_UART_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000efa:	f7ff fe41 	bl	8000b80 <Error_Handler>
  }

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	2000020c 	.word	0x2000020c
 8000f08:	40004400 	.word	0x40004400

08000f0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08a      	sub	sp, #40	; 0x28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a19      	ldr	r2, [pc, #100]	; (8000f90 <HAL_UART_MspInit+0x84>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d12b      	bne.n	8000f86 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <HAL_UART_MspInit+0x88>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	4a17      	ldr	r2, [pc, #92]	; (8000f94 <HAL_UART_MspInit+0x88>)
 8000f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <HAL_UART_MspInit+0x88>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <HAL_UART_MspInit+0x88>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a10      	ldr	r2, [pc, #64]	; (8000f94 <HAL_UART_MspInit+0x88>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <HAL_UART_MspInit+0x88>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f66:	230c      	movs	r3, #12
 8000f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f72:	2303      	movs	r3, #3
 8000f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f76:	2307      	movs	r3, #7
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <HAL_UART_MspInit+0x8c>)
 8000f82:	f000 fd59 	bl	8001a38 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f86:	bf00      	nop
 8000f88:	3728      	adds	r7, #40	; 0x28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40004400 	.word	0x40004400
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020000 	.word	0x40020000

08000f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fa0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fa2:	e003      	b.n	8000fac <LoopCopyDataInit>

08000fa4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fa6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fa8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000faa:	3104      	adds	r1, #4

08000fac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fac:	480b      	ldr	r0, [pc, #44]	; (8000fdc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fb0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fb2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fb4:	d3f6      	bcc.n	8000fa4 <CopyDataInit>
  ldr  r2, =_sbss
 8000fb6:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fb8:	e002      	b.n	8000fc0 <LoopFillZerobss>

08000fba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fbc:	f842 3b04 	str.w	r3, [r2], #4

08000fc0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fc0:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fc2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fc4:	d3f9      	bcc.n	8000fba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fc6:	f7ff ff09 	bl	8000ddc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fca:	f007 fc07 	bl	80087dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fce:	f7ff fce3 	bl	8000998 <main>
  bx  lr    
 8000fd2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fd4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000fd8:	08009874 	.word	0x08009874
  ldr  r0, =_sdata
 8000fdc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fe0:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000fe4:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000fe8:	200008f0 	.word	0x200008f0

08000fec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fec:	e7fe      	b.n	8000fec <ADC_IRQHandler>
	...

08000ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <HAL_Init+0x40>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	; (8001030 <HAL_Init+0x40>)
 8000ffa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ffe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <HAL_Init+0x40>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <HAL_Init+0x40>)
 8001006:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800100a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800100c:	4b08      	ldr	r3, [pc, #32]	; (8001030 <HAL_Init+0x40>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a07      	ldr	r2, [pc, #28]	; (8001030 <HAL_Init+0x40>)
 8001012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001016:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001018:	2003      	movs	r0, #3
 800101a:	f000 fbaf 	bl	800177c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800101e:	2000      	movs	r0, #0
 8001020:	f000 f808 	bl	8001034 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001024:	f7ff fe32 	bl	8000c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40023c00 	.word	0x40023c00

08001034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_InitTick+0x54>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_InitTick+0x58>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	4619      	mov	r1, r3
 8001046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104a:	fbb3 f3f1 	udiv	r3, r3, r1
 800104e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001052:	4618      	mov	r0, r3
 8001054:	f000 fbc7 	bl	80017e6 <HAL_SYSTICK_Config>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e00e      	b.n	8001080 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b0f      	cmp	r3, #15
 8001066:	d80a      	bhi.n	800107e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001068:	2200      	movs	r2, #0
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
 8001070:	f000 fb8f 	bl	8001792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001074:	4a06      	ldr	r2, [pc, #24]	; (8001090 <HAL_InitTick+0x5c>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	e000      	b.n	8001080 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000000 	.word	0x20000000
 800108c:	20000008 	.word	0x20000008
 8001090:	20000004 	.word	0x20000004

08001094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_IncTick+0x20>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_IncTick+0x24>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <HAL_IncTick+0x24>)
 80010a6:	6013      	str	r3, [r2, #0]
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	20000008 	.word	0x20000008
 80010b8:	2000024c 	.word	0x2000024c

080010bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return uwTick;
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <HAL_GetTick+0x14>)
 80010c2:	681b      	ldr	r3, [r3, #0]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	2000024c 	.word	0x2000024c

080010d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010dc:	f7ff ffee 	bl	80010bc <HAL_GetTick>
 80010e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ec:	d005      	beq.n	80010fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <HAL_Delay+0x40>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4413      	add	r3, r2
 80010f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010fa:	bf00      	nop
 80010fc:	f7ff ffde 	bl	80010bc <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	429a      	cmp	r2, r3
 800110a:	d8f7      	bhi.n	80010fc <HAL_Delay+0x28>
  {
  }
}
 800110c:	bf00      	nop
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000008 	.word	0x20000008

08001118 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001120:	2300      	movs	r3, #0
 8001122:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e033      	b.n	8001196 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	2b00      	cmp	r3, #0
 8001134:	d109      	bne.n	800114a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff fa18 	bl	800056c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f003 0310 	and.w	r3, r3, #16
 8001152:	2b00      	cmp	r3, #0
 8001154:	d118      	bne.n	8001188 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800115e:	f023 0302 	bic.w	r3, r3, #2
 8001162:	f043 0202 	orr.w	r2, r3, #2
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 f93a 	bl	80013e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f023 0303 	bic.w	r3, r3, #3
 800117e:	f043 0201 	orr.w	r2, r3, #1
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	641a      	str	r2, [r3, #64]	; 0x40
 8001186:	e001      	b.n	800118c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001194:	7bfb      	ldrb	r3, [r7, #15]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d101      	bne.n	80011bc <HAL_ADC_ConfigChannel+0x1c>
 80011b8:	2302      	movs	r3, #2
 80011ba:	e105      	b.n	80013c8 <HAL_ADC_ConfigChannel+0x228>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2201      	movs	r2, #1
 80011c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b09      	cmp	r3, #9
 80011ca:	d925      	bls.n	8001218 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	68d9      	ldr	r1, [r3, #12]
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	461a      	mov	r2, r3
 80011da:	4613      	mov	r3, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	4413      	add	r3, r2
 80011e0:	3b1e      	subs	r3, #30
 80011e2:	2207      	movs	r2, #7
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43da      	mvns	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	400a      	ands	r2, r1
 80011f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	68d9      	ldr	r1, [r3, #12]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	b29b      	uxth	r3, r3
 8001202:	4618      	mov	r0, r3
 8001204:	4603      	mov	r3, r0
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	4403      	add	r3, r0
 800120a:	3b1e      	subs	r3, #30
 800120c:	409a      	lsls	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	430a      	orrs	r2, r1
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	e022      	b.n	800125e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6919      	ldr	r1, [r3, #16]
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	b29b      	uxth	r3, r3
 8001224:	461a      	mov	r2, r3
 8001226:	4613      	mov	r3, r2
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	4413      	add	r3, r2
 800122c:	2207      	movs	r2, #7
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43da      	mvns	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	400a      	ands	r2, r1
 800123a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6919      	ldr	r1, [r3, #16]
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	b29b      	uxth	r3, r3
 800124c:	4618      	mov	r0, r3
 800124e:	4603      	mov	r3, r0
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4403      	add	r3, r0
 8001254:	409a      	lsls	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	430a      	orrs	r2, r1
 800125c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b06      	cmp	r3, #6
 8001264:	d824      	bhi.n	80012b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	4613      	mov	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	3b05      	subs	r3, #5
 8001278:	221f      	movs	r2, #31
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43da      	mvns	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	400a      	ands	r2, r1
 8001286:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	b29b      	uxth	r3, r3
 8001294:	4618      	mov	r0, r3
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	4613      	mov	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	3b05      	subs	r3, #5
 80012a2:	fa00 f203 	lsl.w	r2, r0, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	430a      	orrs	r2, r1
 80012ac:	635a      	str	r2, [r3, #52]	; 0x34
 80012ae:	e04c      	b.n	800134a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b0c      	cmp	r3, #12
 80012b6:	d824      	bhi.n	8001302 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	4613      	mov	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	3b23      	subs	r3, #35	; 0x23
 80012ca:	221f      	movs	r2, #31
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43da      	mvns	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	400a      	ands	r2, r1
 80012d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	4613      	mov	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	3b23      	subs	r3, #35	; 0x23
 80012f4:	fa00 f203 	lsl.w	r2, r0, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	430a      	orrs	r2, r1
 80012fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001300:	e023      	b.n	800134a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	3b41      	subs	r3, #65	; 0x41
 8001314:	221f      	movs	r2, #31
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43da      	mvns	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	400a      	ands	r2, r1
 8001322:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	b29b      	uxth	r3, r3
 8001330:	4618      	mov	r0, r3
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	3b41      	subs	r3, #65	; 0x41
 800133e:	fa00 f203 	lsl.w	r2, r0, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800134a:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <HAL_ADC_ConfigChannel+0x234>)
 800134c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a21      	ldr	r2, [pc, #132]	; (80013d8 <HAL_ADC_ConfigChannel+0x238>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d109      	bne.n	800136c <HAL_ADC_ConfigChannel+0x1cc>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b12      	cmp	r3, #18
 800135e:	d105      	bne.n	800136c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a19      	ldr	r2, [pc, #100]	; (80013d8 <HAL_ADC_ConfigChannel+0x238>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d123      	bne.n	80013be <HAL_ADC_ConfigChannel+0x21e>
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2b10      	cmp	r3, #16
 800137c:	d003      	beq.n	8001386 <HAL_ADC_ConfigChannel+0x1e6>
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b11      	cmp	r3, #17
 8001384:	d11b      	bne.n	80013be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2b10      	cmp	r3, #16
 8001398:	d111      	bne.n	80013be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <HAL_ADC_ConfigChannel+0x23c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a10      	ldr	r2, [pc, #64]	; (80013e0 <HAL_ADC_ConfigChannel+0x240>)
 80013a0:	fba2 2303 	umull	r2, r3, r2, r3
 80013a4:	0c9a      	lsrs	r2, r3, #18
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013b0:	e002      	b.n	80013b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	3b01      	subs	r3, #1
 80013b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f9      	bne.n	80013b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	40012300 	.word	0x40012300
 80013d8:	40012000 	.word	0x40012000
 80013dc:	20000000 	.word	0x20000000
 80013e0:	431bde83 	.word	0x431bde83

080013e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013ec:	4b79      	ldr	r3, [pc, #484]	; (80015d4 <ADC_Init+0x1f0>)
 80013ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	431a      	orrs	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001418:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6859      	ldr	r1, [r3, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	021a      	lsls	r2, r3, #8
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800143c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6859      	ldr	r1, [r3, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	430a      	orrs	r2, r1
 800144e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800145e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6899      	ldr	r1, [r3, #8]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	68da      	ldr	r2, [r3, #12]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	430a      	orrs	r2, r1
 8001470:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001476:	4a58      	ldr	r2, [pc, #352]	; (80015d8 <ADC_Init+0x1f4>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d022      	beq.n	80014c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800148a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6899      	ldr	r1, [r3, #8]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6899      	ldr	r1, [r3, #8]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	430a      	orrs	r2, r1
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	e00f      	b.n	80014e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 0202 	bic.w	r2, r2, #2
 80014f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6899      	ldr	r1, [r3, #8]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	7e1b      	ldrb	r3, [r3, #24]
 80014fc:	005a      	lsls	r2, r3, #1
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 3020 	ldrb.w	r3, [r3, #32]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d01b      	beq.n	8001548 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800151e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800152e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6859      	ldr	r1, [r3, #4]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	3b01      	subs	r3, #1
 800153c:	035a      	lsls	r2, r3, #13
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	430a      	orrs	r2, r1
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	e007      	b.n	8001558 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001556:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001566:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	3b01      	subs	r3, #1
 8001574:	051a      	lsls	r2, r3, #20
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800158c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6899      	ldr	r1, [r3, #8]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800159a:	025a      	lsls	r2, r3, #9
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6899      	ldr	r1, [r3, #8]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	029a      	lsls	r2, r3, #10
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	609a      	str	r2, [r3, #8]
}
 80015c8:	bf00      	nop
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	40012300 	.word	0x40012300
 80015d8:	0f000001 	.word	0x0f000001

080015dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015f8:	4013      	ands	r3, r2
 80015fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800160c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800160e:	4a04      	ldr	r2, [pc, #16]	; (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	60d3      	str	r3, [r2, #12]
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001628:	4b04      	ldr	r3, [pc, #16]	; (800163c <__NVIC_GetPriorityGrouping+0x18>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	0a1b      	lsrs	r3, r3, #8
 800162e:	f003 0307 	and.w	r3, r3, #7
}
 8001632:	4618      	mov	r0, r3
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	2b00      	cmp	r3, #0
 8001650:	db0b      	blt.n	800166a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	f003 021f 	and.w	r2, r3, #31
 8001658:	4907      	ldr	r1, [pc, #28]	; (8001678 <__NVIC_EnableIRQ+0x38>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	095b      	lsrs	r3, r3, #5
 8001660:	2001      	movs	r0, #1
 8001662:	fa00 f202 	lsl.w	r2, r0, r2
 8001666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000e100 	.word	0xe000e100

0800167c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	6039      	str	r1, [r7, #0]
 8001686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168c:	2b00      	cmp	r3, #0
 800168e:	db0a      	blt.n	80016a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	b2da      	uxtb	r2, r3
 8001694:	490c      	ldr	r1, [pc, #48]	; (80016c8 <__NVIC_SetPriority+0x4c>)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	0112      	lsls	r2, r2, #4
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	440b      	add	r3, r1
 80016a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a4:	e00a      	b.n	80016bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4908      	ldr	r1, [pc, #32]	; (80016cc <__NVIC_SetPriority+0x50>)
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	3b04      	subs	r3, #4
 80016b4:	0112      	lsls	r2, r2, #4
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	440b      	add	r3, r1
 80016ba:	761a      	strb	r2, [r3, #24]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000e100 	.word	0xe000e100
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b089      	sub	sp, #36	; 0x24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f1c3 0307 	rsb	r3, r3, #7
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	bf28      	it	cs
 80016ee:	2304      	movcs	r3, #4
 80016f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3304      	adds	r3, #4
 80016f6:	2b06      	cmp	r3, #6
 80016f8:	d902      	bls.n	8001700 <NVIC_EncodePriority+0x30>
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3b03      	subs	r3, #3
 80016fe:	e000      	b.n	8001702 <NVIC_EncodePriority+0x32>
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	f04f 32ff 	mov.w	r2, #4294967295
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43da      	mvns	r2, r3
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	401a      	ands	r2, r3
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001718:	f04f 31ff 	mov.w	r1, #4294967295
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	fa01 f303 	lsl.w	r3, r1, r3
 8001722:	43d9      	mvns	r1, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	4313      	orrs	r3, r2
         );
}
 800172a:	4618      	mov	r0, r3
 800172c:	3724      	adds	r7, #36	; 0x24
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001748:	d301      	bcc.n	800174e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800174a:	2301      	movs	r3, #1
 800174c:	e00f      	b.n	800176e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800174e:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <SysTick_Config+0x40>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3b01      	subs	r3, #1
 8001754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001756:	210f      	movs	r1, #15
 8001758:	f04f 30ff 	mov.w	r0, #4294967295
 800175c:	f7ff ff8e 	bl	800167c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <SysTick_Config+0x40>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001766:	4b04      	ldr	r3, [pc, #16]	; (8001778 <SysTick_Config+0x40>)
 8001768:	2207      	movs	r2, #7
 800176a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	e000e010 	.word	0xe000e010

0800177c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ff29 	bl	80015dc <__NVIC_SetPriorityGrouping>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001792:	b580      	push	{r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af00      	add	r7, sp, #0
 8001798:	4603      	mov	r3, r0
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
 800179e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a4:	f7ff ff3e 	bl	8001624 <__NVIC_GetPriorityGrouping>
 80017a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	68b9      	ldr	r1, [r7, #8]
 80017ae:	6978      	ldr	r0, [r7, #20]
 80017b0:	f7ff ff8e 	bl	80016d0 <NVIC_EncodePriority>
 80017b4:	4602      	mov	r2, r0
 80017b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ba:	4611      	mov	r1, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff5d 	bl	800167c <__NVIC_SetPriority>
}
 80017c2:	bf00      	nop
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff31 	bl	8001640 <__NVIC_EnableIRQ>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff ffa2 	bl	8001738 <SysTick_Config>
 80017f4:	4603      	mov	r3, r0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d101      	bne.n	8001810 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e014      	b.n	800183a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	791b      	ldrb	r3, [r3, #4]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d105      	bne.n	8001826 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7fe feef 	bl	8000604 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2202      	movs	r2, #2
 800182a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001842:	b480      	push	{r7}
 8001844:	b085      	sub	sp, #20
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	2300      	movs	r3, #0
 8001852:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	795b      	ldrb	r3, [r3, #5]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d101      	bne.n	8001860 <HAL_DAC_Start+0x1e>
 800185c:	2302      	movs	r3, #2
 800185e:	e050      	b.n	8001902 <HAL_DAC_Start+0xc0>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2202      	movs	r2, #2
 800186a:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6819      	ldr	r1, [r3, #0]
 8001872:	2201      	movs	r2, #1
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	409a      	lsls	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	430a      	orrs	r2, r1
 800187e:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d11a      	bne.n	80018bc <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800189c:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2b04      	cmp	r3, #4
 80018a2:	d127      	bne.n	80018f4 <HAL_DAC_Start+0xb2>
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	2b38      	cmp	r3, #56	; 0x38
 80018a8:	d124      	bne.n	80018f4 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f042 0201 	orr.w	r2, r2, #1
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	e01b      	b.n	80018f4 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018c6:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 80018d2:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80018da:	d10b      	bne.n	80018f4 <HAL_DAC_Start+0xb2>
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80018e2:	d107      	bne.n	80018f4 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 0202 	orr.w	r2, r2, #2
 80018f2:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800190e:	b480      	push	{r7}
 8001910:	b087      	sub	sp, #28
 8001912:	af00      	add	r7, sp, #0
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	795b      	ldrb	r3, [r3, #5]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d101      	bne.n	800192e <HAL_DAC_ConfigChannel+0x20>
 800192a:	2302      	movs	r3, #2
 800192c:	e036      	b.n	800199c <HAL_DAC_ConfigChannel+0x8e>
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2201      	movs	r2, #1
 8001932:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2202      	movs	r2, #2
 8001938:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001942:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	4013      	ands	r3, r2
 8001952:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	4313      	orrs	r3, r2
 800196c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6819      	ldr	r1, [r3, #0]
 800197c:	22c0      	movs	r2, #192	; 0xc0
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43da      	mvns	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	400a      	ands	r2, r1
 800198c:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2201      	movs	r2, #1
 8001992:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2200      	movs	r2, #0
 8001998:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	371c      	adds	r7, #28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80019a8:	b480      	push	{r7}
 80019aa:	b087      	sub	sp, #28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
 80019b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d105      	bne.n	80019d2 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4413      	add	r3, r2
 80019cc:	3308      	adds	r3, #8
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	e004      	b.n	80019dc <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4413      	add	r3, r2
 80019d8:	3314      	adds	r3, #20
 80019da:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	461a      	mov	r2, r3
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	371c      	adds	r7, #28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d004      	beq.n	8001a10 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2280      	movs	r2, #128	; 0x80
 8001a0a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e00c      	b.n	8001a2a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2205      	movs	r2, #5
 8001a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0201 	bic.w	r2, r2, #1
 8001a26:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
 8001a52:	e16b      	b.n	8001d2c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a54:	2201      	movs	r2, #1
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	f040 815a 	bne.w	8001d26 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d00b      	beq.n	8001a92 <HAL_GPIO_Init+0x5a>
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d007      	beq.n	8001a92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a86:	2b11      	cmp	r3, #17
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b12      	cmp	r3, #18
 8001a90:	d130      	bne.n	8001af4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac8:	2201      	movs	r2, #1
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	f003 0201 	and.w	r2, r3, #1
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	2203      	movs	r2, #3
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d003      	beq.n	8001b34 <HAL_GPIO_Init+0xfc>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b12      	cmp	r3, #18
 8001b32:	d123      	bne.n	8001b7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	08da      	lsrs	r2, r3, #3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3208      	adds	r2, #8
 8001b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	220f      	movs	r2, #15
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	691a      	ldr	r2, [r3, #16]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	08da      	lsrs	r2, r3, #3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3208      	adds	r2, #8
 8001b76:	69b9      	ldr	r1, [r7, #24]
 8001b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	2203      	movs	r2, #3
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0203 	and.w	r2, r3, #3
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 80b4 	beq.w	8001d26 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	4b5f      	ldr	r3, [pc, #380]	; (8001d40 <HAL_GPIO_Init+0x308>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	4a5e      	ldr	r2, [pc, #376]	; (8001d40 <HAL_GPIO_Init+0x308>)
 8001bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bce:	4b5c      	ldr	r3, [pc, #368]	; (8001d40 <HAL_GPIO_Init+0x308>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bda:	4a5a      	ldr	r2, [pc, #360]	; (8001d44 <HAL_GPIO_Init+0x30c>)
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	089b      	lsrs	r3, r3, #2
 8001be0:	3302      	adds	r3, #2
 8001be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	220f      	movs	r2, #15
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a51      	ldr	r2, [pc, #324]	; (8001d48 <HAL_GPIO_Init+0x310>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d02b      	beq.n	8001c5e <HAL_GPIO_Init+0x226>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a50      	ldr	r2, [pc, #320]	; (8001d4c <HAL_GPIO_Init+0x314>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d025      	beq.n	8001c5a <HAL_GPIO_Init+0x222>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a4f      	ldr	r2, [pc, #316]	; (8001d50 <HAL_GPIO_Init+0x318>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d01f      	beq.n	8001c56 <HAL_GPIO_Init+0x21e>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4e      	ldr	r2, [pc, #312]	; (8001d54 <HAL_GPIO_Init+0x31c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d019      	beq.n	8001c52 <HAL_GPIO_Init+0x21a>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a4d      	ldr	r2, [pc, #308]	; (8001d58 <HAL_GPIO_Init+0x320>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d013      	beq.n	8001c4e <HAL_GPIO_Init+0x216>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a4c      	ldr	r2, [pc, #304]	; (8001d5c <HAL_GPIO_Init+0x324>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d00d      	beq.n	8001c4a <HAL_GPIO_Init+0x212>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a4b      	ldr	r2, [pc, #300]	; (8001d60 <HAL_GPIO_Init+0x328>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d007      	beq.n	8001c46 <HAL_GPIO_Init+0x20e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a4a      	ldr	r2, [pc, #296]	; (8001d64 <HAL_GPIO_Init+0x32c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d101      	bne.n	8001c42 <HAL_GPIO_Init+0x20a>
 8001c3e:	2307      	movs	r3, #7
 8001c40:	e00e      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c42:	2308      	movs	r3, #8
 8001c44:	e00c      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c46:	2306      	movs	r3, #6
 8001c48:	e00a      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c4a:	2305      	movs	r3, #5
 8001c4c:	e008      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c4e:	2304      	movs	r3, #4
 8001c50:	e006      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c52:	2303      	movs	r3, #3
 8001c54:	e004      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e002      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c5e:	2300      	movs	r3, #0
 8001c60:	69fa      	ldr	r2, [r7, #28]
 8001c62:	f002 0203 	and.w	r2, r2, #3
 8001c66:	0092      	lsls	r2, r2, #2
 8001c68:	4093      	lsls	r3, r2
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c70:	4934      	ldr	r1, [pc, #208]	; (8001d44 <HAL_GPIO_Init+0x30c>)
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	089b      	lsrs	r3, r3, #2
 8001c76:	3302      	adds	r3, #2
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c7e:	4b3a      	ldr	r3, [pc, #232]	; (8001d68 <HAL_GPIO_Init+0x330>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ca2:	4a31      	ldr	r2, [pc, #196]	; (8001d68 <HAL_GPIO_Init+0x330>)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ca8:	4b2f      	ldr	r3, [pc, #188]	; (8001d68 <HAL_GPIO_Init+0x330>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ccc:	4a26      	ldr	r2, [pc, #152]	; (8001d68 <HAL_GPIO_Init+0x330>)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cd2:	4b25      	ldr	r3, [pc, #148]	; (8001d68 <HAL_GPIO_Init+0x330>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cf6:	4a1c      	ldr	r2, [pc, #112]	; (8001d68 <HAL_GPIO_Init+0x330>)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cfc:	4b1a      	ldr	r3, [pc, #104]	; (8001d68 <HAL_GPIO_Init+0x330>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d20:	4a11      	ldr	r2, [pc, #68]	; (8001d68 <HAL_GPIO_Init+0x330>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	61fb      	str	r3, [r7, #28]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	2b0f      	cmp	r3, #15
 8001d30:	f67f ae90 	bls.w	8001a54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d34:	bf00      	nop
 8001d36:	3724      	adds	r7, #36	; 0x24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40013800 	.word	0x40013800
 8001d48:	40020000 	.word	0x40020000
 8001d4c:	40020400 	.word	0x40020400
 8001d50:	40020800 	.word	0x40020800
 8001d54:	40020c00 	.word	0x40020c00
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40021400 	.word	0x40021400
 8001d60:	40021800 	.word	0x40021800
 8001d64:	40021c00 	.word	0x40021c00
 8001d68:	40013c00 	.word	0x40013c00

08001d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d7c:	787b      	ldrb	r3, [r7, #1]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d82:	887a      	ldrh	r2, [r7, #2]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d88:	e003      	b.n	8001d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d8a:	887b      	ldrh	r3, [r7, #2]
 8001d8c:	041a      	lsls	r2, r3, #16
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	619a      	str	r2, [r3, #24]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001daa:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dac:	695a      	ldr	r2, [r3, #20]
 8001dae:	88fb      	ldrh	r3, [r7, #6]
 8001db0:	4013      	ands	r3, r2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d006      	beq.n	8001dc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001db6:	4a05      	ldr	r2, [pc, #20]	; (8001dcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001db8:	88fb      	ldrh	r3, [r7, #6]
 8001dba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dbc:	88fb      	ldrh	r3, [r7, #6]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 f806 	bl	8001dd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40013c00 	.word	0x40013c00

08001dd0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001de6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001de8:	b08f      	sub	sp, #60	; 0x3c
 8001dea:	af0a      	add	r7, sp, #40	; 0x28
 8001dec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e054      	b.n	8001ea2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d106      	bne.n	8001e18 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f006 fa32 	bl	800827c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d102      	bne.n	8001e32 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f003 fbf0 	bl	800561c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	603b      	str	r3, [r7, #0]
 8001e42:	687e      	ldr	r6, [r7, #4]
 8001e44:	466d      	mov	r5, sp
 8001e46:	f106 0410 	add.w	r4, r6, #16
 8001e4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e56:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e5a:	1d33      	adds	r3, r6, #4
 8001e5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e5e:	6838      	ldr	r0, [r7, #0]
 8001e60:	f003 fb6a 	bl	8005538 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2101      	movs	r1, #1
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f003 fbe7 	bl	800563e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	603b      	str	r3, [r7, #0]
 8001e76:	687e      	ldr	r6, [r7, #4]
 8001e78:	466d      	mov	r5, sp
 8001e7a:	f106 0410 	add.w	r4, r6, #16
 8001e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e8e:	1d33      	adds	r3, r6, #4
 8001e90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e92:	6838      	ldr	r0, [r7, #0]
 8001e94:	f003 fcfa 	bl	800588c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001eaa <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001eaa:	b590      	push	{r4, r7, lr}
 8001eac:	b089      	sub	sp, #36	; 0x24
 8001eae:	af04      	add	r7, sp, #16
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	4608      	mov	r0, r1
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4603      	mov	r3, r0
 8001eba:	70fb      	strb	r3, [r7, #3]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	70bb      	strb	r3, [r7, #2]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_HCD_HC_Init+0x28>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e07f      	b.n	8001fd2 <HAL_HCD_HC_Init+0x128>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001eda:	78fa      	ldrb	r2, [r7, #3]
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	440b      	add	r3, r1
 8001ee8:	333d      	adds	r3, #61	; 0x3d
 8001eea:	2200      	movs	r2, #0
 8001eec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001eee:	78fa      	ldrb	r2, [r7, #3]
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	440b      	add	r3, r1
 8001efc:	3338      	adds	r3, #56	; 0x38
 8001efe:	787a      	ldrb	r2, [r7, #1]
 8001f00:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001f02:	78fa      	ldrb	r2, [r7, #3]
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	440b      	add	r3, r1
 8001f10:	3340      	adds	r3, #64	; 0x40
 8001f12:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f14:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f16:	78fa      	ldrb	r2, [r7, #3]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	440b      	add	r3, r1
 8001f24:	3339      	adds	r3, #57	; 0x39
 8001f26:	78fa      	ldrb	r2, [r7, #3]
 8001f28:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001f2a:	78fa      	ldrb	r2, [r7, #3]
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	440b      	add	r3, r1
 8001f38:	333f      	adds	r3, #63	; 0x3f
 8001f3a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001f3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001f40:	78fa      	ldrb	r2, [r7, #3]
 8001f42:	78bb      	ldrb	r3, [r7, #2]
 8001f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f48:	b2d8      	uxtb	r0, r3
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	440b      	add	r3, r1
 8001f56:	333a      	adds	r3, #58	; 0x3a
 8001f58:	4602      	mov	r2, r0
 8001f5a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001f5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	da0a      	bge.n	8001f7a <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001f64:	78fa      	ldrb	r2, [r7, #3]
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	440b      	add	r3, r1
 8001f72:	333b      	adds	r3, #59	; 0x3b
 8001f74:	2201      	movs	r2, #1
 8001f76:	701a      	strb	r2, [r3, #0]
 8001f78:	e009      	b.n	8001f8e <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001f7a:	78fa      	ldrb	r2, [r7, #3]
 8001f7c:	6879      	ldr	r1, [r7, #4]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	440b      	add	r3, r1
 8001f88:	333b      	adds	r3, #59	; 0x3b
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001f8e:	78fa      	ldrb	r2, [r7, #3]
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	440b      	add	r3, r1
 8001f9c:	333c      	adds	r3, #60	; 0x3c
 8001f9e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001fa2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	787c      	ldrb	r4, [r7, #1]
 8001faa:	78ba      	ldrb	r2, [r7, #2]
 8001fac:	78f9      	ldrb	r1, [r7, #3]
 8001fae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001fb0:	9302      	str	r3, [sp, #8]
 8001fb2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fb6:	9301      	str	r3, [sp, #4]
 8001fb8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	4623      	mov	r3, r4
 8001fc0:	f003 fde6 	bl	8005b90 <USB_HC_Init>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd90      	pop	{r4, r7, pc}

08001fda <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b084      	sub	sp, #16
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_HCD_HC_Halt+0x1e>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e00f      	b.n	8002018 <HAL_HCD_HC_Halt+0x3e>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	78fa      	ldrb	r2, [r7, #3]
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f004 f820 	bl	800604e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002016:	7bfb      	ldrb	r3, [r7, #15]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	4608      	mov	r0, r1
 800202a:	4611      	mov	r1, r2
 800202c:	461a      	mov	r2, r3
 800202e:	4603      	mov	r3, r0
 8002030:	70fb      	strb	r3, [r7, #3]
 8002032:	460b      	mov	r3, r1
 8002034:	70bb      	strb	r3, [r7, #2]
 8002036:	4613      	mov	r3, r2
 8002038:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800203a:	78fa      	ldrb	r2, [r7, #3]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	440b      	add	r3, r1
 8002048:	333b      	adds	r3, #59	; 0x3b
 800204a:	78ba      	ldrb	r2, [r7, #2]
 800204c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800204e:	78fa      	ldrb	r2, [r7, #3]
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	440b      	add	r3, r1
 800205c:	333f      	adds	r3, #63	; 0x3f
 800205e:	787a      	ldrb	r2, [r7, #1]
 8002060:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002062:	7c3b      	ldrb	r3, [r7, #16]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d114      	bne.n	8002092 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002068:	78fa      	ldrb	r2, [r7, #3]
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	440b      	add	r3, r1
 8002076:	3342      	adds	r3, #66	; 0x42
 8002078:	2203      	movs	r2, #3
 800207a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800207c:	78fa      	ldrb	r2, [r7, #3]
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	440b      	add	r3, r1
 800208a:	333d      	adds	r3, #61	; 0x3d
 800208c:	7f3a      	ldrb	r2, [r7, #28]
 800208e:	701a      	strb	r2, [r3, #0]
 8002090:	e009      	b.n	80020a6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002092:	78fa      	ldrb	r2, [r7, #3]
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	440b      	add	r3, r1
 80020a0:	3342      	adds	r3, #66	; 0x42
 80020a2:	2202      	movs	r2, #2
 80020a4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80020a6:	787b      	ldrb	r3, [r7, #1]
 80020a8:	2b03      	cmp	r3, #3
 80020aa:	f200 80d6 	bhi.w	800225a <HAL_HCD_HC_SubmitRequest+0x23a>
 80020ae:	a201      	add	r2, pc, #4	; (adr r2, 80020b4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80020b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b4:	080020c5 	.word	0x080020c5
 80020b8:	08002245 	.word	0x08002245
 80020bc:	08002131 	.word	0x08002131
 80020c0:	080021bb 	.word	0x080021bb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80020c4:	7c3b      	ldrb	r3, [r7, #16]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	f040 80c9 	bne.w	800225e <HAL_HCD_HC_SubmitRequest+0x23e>
 80020cc:	78bb      	ldrb	r3, [r7, #2]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f040 80c5 	bne.w	800225e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80020d4:	8b3b      	ldrh	r3, [r7, #24]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d109      	bne.n	80020ee <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80020da:	78fa      	ldrb	r2, [r7, #3]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	440b      	add	r3, r1
 80020e8:	3351      	adds	r3, #81	; 0x51
 80020ea:	2201      	movs	r2, #1
 80020ec:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020ee:	78fa      	ldrb	r2, [r7, #3]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	440b      	add	r3, r1
 80020fc:	3351      	adds	r3, #81	; 0x51
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10a      	bne.n	800211a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002104:	78fa      	ldrb	r2, [r7, #3]
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	440b      	add	r3, r1
 8002112:	3342      	adds	r3, #66	; 0x42
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002118:	e0a1      	b.n	800225e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800211a:	78fa      	ldrb	r2, [r7, #3]
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	440b      	add	r3, r1
 8002128:	3342      	adds	r3, #66	; 0x42
 800212a:	2202      	movs	r2, #2
 800212c:	701a      	strb	r2, [r3, #0]
      break;
 800212e:	e096      	b.n	800225e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002130:	78bb      	ldrb	r3, [r7, #2]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d120      	bne.n	8002178 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002136:	78fa      	ldrb	r2, [r7, #3]
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	440b      	add	r3, r1
 8002144:	3351      	adds	r3, #81	; 0x51
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10a      	bne.n	8002162 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800214c:	78fa      	ldrb	r2, [r7, #3]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	440b      	add	r3, r1
 800215a:	3342      	adds	r3, #66	; 0x42
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002160:	e07e      	b.n	8002260 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002162:	78fa      	ldrb	r2, [r7, #3]
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	440b      	add	r3, r1
 8002170:	3342      	adds	r3, #66	; 0x42
 8002172:	2202      	movs	r2, #2
 8002174:	701a      	strb	r2, [r3, #0]
      break;
 8002176:	e073      	b.n	8002260 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002178:	78fa      	ldrb	r2, [r7, #3]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	440b      	add	r3, r1
 8002186:	3350      	adds	r3, #80	; 0x50
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10a      	bne.n	80021a4 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	440b      	add	r3, r1
 800219c:	3342      	adds	r3, #66	; 0x42
 800219e:	2200      	movs	r2, #0
 80021a0:	701a      	strb	r2, [r3, #0]
      break;
 80021a2:	e05d      	b.n	8002260 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021a4:	78fa      	ldrb	r2, [r7, #3]
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	440b      	add	r3, r1
 80021b2:	3342      	adds	r3, #66	; 0x42
 80021b4:	2202      	movs	r2, #2
 80021b6:	701a      	strb	r2, [r3, #0]
      break;
 80021b8:	e052      	b.n	8002260 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80021ba:	78bb      	ldrb	r3, [r7, #2]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d120      	bne.n	8002202 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021c0:	78fa      	ldrb	r2, [r7, #3]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	440b      	add	r3, r1
 80021ce:	3351      	adds	r3, #81	; 0x51
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10a      	bne.n	80021ec <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021d6:	78fa      	ldrb	r2, [r7, #3]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	440b      	add	r3, r1
 80021e4:	3342      	adds	r3, #66	; 0x42
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80021ea:	e039      	b.n	8002260 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021ec:	78fa      	ldrb	r2, [r7, #3]
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	440b      	add	r3, r1
 80021fa:	3342      	adds	r3, #66	; 0x42
 80021fc:	2202      	movs	r2, #2
 80021fe:	701a      	strb	r2, [r3, #0]
      break;
 8002200:	e02e      	b.n	8002260 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002202:	78fa      	ldrb	r2, [r7, #3]
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	440b      	add	r3, r1
 8002210:	3350      	adds	r3, #80	; 0x50
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10a      	bne.n	800222e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002218:	78fa      	ldrb	r2, [r7, #3]
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	440b      	add	r3, r1
 8002226:	3342      	adds	r3, #66	; 0x42
 8002228:	2200      	movs	r2, #0
 800222a:	701a      	strb	r2, [r3, #0]
      break;
 800222c:	e018      	b.n	8002260 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800222e:	78fa      	ldrb	r2, [r7, #3]
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	440b      	add	r3, r1
 800223c:	3342      	adds	r3, #66	; 0x42
 800223e:	2202      	movs	r2, #2
 8002240:	701a      	strb	r2, [r3, #0]
      break;
 8002242:	e00d      	b.n	8002260 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002244:	78fa      	ldrb	r2, [r7, #3]
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	440b      	add	r3, r1
 8002252:	3342      	adds	r3, #66	; 0x42
 8002254:	2200      	movs	r2, #0
 8002256:	701a      	strb	r2, [r3, #0]
      break;
 8002258:	e002      	b.n	8002260 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800225a:	bf00      	nop
 800225c:	e000      	b.n	8002260 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800225e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002260:	78fa      	ldrb	r2, [r7, #3]
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	440b      	add	r3, r1
 800226e:	3344      	adds	r3, #68	; 0x44
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002274:	78fa      	ldrb	r2, [r7, #3]
 8002276:	8b39      	ldrh	r1, [r7, #24]
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	4403      	add	r3, r0
 8002284:	3348      	adds	r3, #72	; 0x48
 8002286:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002288:	78fa      	ldrb	r2, [r7, #3]
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	4613      	mov	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	440b      	add	r3, r1
 8002296:	335c      	adds	r3, #92	; 0x5c
 8002298:	2200      	movs	r2, #0
 800229a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800229c:	78fa      	ldrb	r2, [r7, #3]
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	440b      	add	r3, r1
 80022aa:	334c      	adds	r3, #76	; 0x4c
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80022b0:	78fa      	ldrb	r2, [r7, #3]
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	440b      	add	r3, r1
 80022be:	3339      	adds	r3, #57	; 0x39
 80022c0:	78fa      	ldrb	r2, [r7, #3]
 80022c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	440b      	add	r3, r1
 80022d2:	335d      	adds	r3, #93	; 0x5d
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6818      	ldr	r0, [r3, #0]
 80022dc:	78fa      	ldrb	r2, [r7, #3]
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	3338      	adds	r3, #56	; 0x38
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	18d1      	adds	r1, r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	461a      	mov	r2, r3
 80022f4:	f003 fd56 	bl	8005da4 <USB_HC_StartXfer>
 80022f8:	4603      	mov	r3, r0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop

08002304 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f003 fa73 	bl	8005806 <USB_GetMode>
 8002320:	4603      	mov	r3, r0
 8002322:	2b01      	cmp	r3, #1
 8002324:	f040 80ef 	bne.w	8002506 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f003 fa57 	bl	80057e0 <USB_ReadInterrupts>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 80e5 	beq.w	8002504 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f003 fa4e 	bl	80057e0 <USB_ReadInterrupts>
 8002344:	4603      	mov	r3, r0
 8002346:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800234a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800234e:	d104      	bne.n	800235a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002358:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f003 fa3e 	bl	80057e0 <USB_ReadInterrupts>
 8002364:	4603      	mov	r3, r0
 8002366:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800236a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800236e:	d104      	bne.n	800237a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002378:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f003 fa2e 	bl	80057e0 <USB_ReadInterrupts>
 8002384:	4603      	mov	r3, r0
 8002386:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800238a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800238e:	d104      	bne.n	800239a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002398:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f003 fa1e 	bl	80057e0 <USB_ReadInterrupts>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d103      	bne.n	80023b6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2202      	movs	r2, #2
 80023b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f003 fa10 	bl	80057e0 <USB_ReadInterrupts>
 80023c0:	4603      	mov	r3, r0
 80023c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023ca:	d115      	bne.n	80023f8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80023d4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d108      	bne.n	80023f8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f005 ffc6 	bl	8008378 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2101      	movs	r1, #1
 80023f2:	4618      	mov	r0, r3
 80023f4:	f003 fb06 	bl	8005a04 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f003 f9ef 	bl	80057e0 <USB_ReadInterrupts>
 8002402:	4603      	mov	r3, r0
 8002404:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800240c:	d102      	bne.n	8002414 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f001 f966 	bl	80036e0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f003 f9e1 	bl	80057e0 <USB_ReadInterrupts>
 800241e:	4603      	mov	r3, r0
 8002420:	f003 0308 	and.w	r3, r3, #8
 8002424:	2b08      	cmp	r3, #8
 8002426:	d106      	bne.n	8002436 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f005 ff89 	bl	8008340 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2208      	movs	r2, #8
 8002434:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f003 f9d0 	bl	80057e0 <USB_ReadInterrupts>
 8002440:	4603      	mov	r3, r0
 8002442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002446:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800244a:	d138      	bne.n	80024be <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f003 fdeb 	bl	800602c <USB_HC_ReadInterrupt>
 8002456:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
 800245c:	e025      	b.n	80024aa <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f003 030f 	and.w	r3, r3, #15
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	fa22 f303 	lsr.w	r3, r2, r3
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d018      	beq.n	80024a4 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	015a      	lsls	r2, r3, #5
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4413      	add	r3, r2
 800247a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002488:	d106      	bne.n	8002498 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	4619      	mov	r1, r3
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f8cf 	bl	8002634 <HCD_HC_IN_IRQHandler>
 8002496:	e005      	b.n	80024a4 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	4619      	mov	r1, r3
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 fcfd 	bl	8002e9e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	3301      	adds	r3, #1
 80024a8:	617b      	str	r3, [r7, #20]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d3d4      	bcc.n	800245e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f003 f98c 	bl	80057e0 <USB_ReadInterrupts>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b10      	cmp	r3, #16
 80024d0:	d101      	bne.n	80024d6 <HAL_HCD_IRQHandler+0x1d2>
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <HAL_HCD_IRQHandler+0x1d4>
 80024d6:	2300      	movs	r3, #0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d014      	beq.n	8002506 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	699a      	ldr	r2, [r3, #24]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0210 	bic.w	r2, r2, #16
 80024ea:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f001 f84b 	bl	8003588 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	699a      	ldr	r2, [r3, #24]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0210 	orr.w	r2, r2, #16
 8002500:	619a      	str	r2, [r3, #24]
 8002502:	e000      	b.n	8002506 <HAL_HCD_IRQHandler+0x202>
      return;
 8002504:	bf00      	nop
    }
  }
}
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_HCD_Start+0x16>
 800251e:	2302      	movs	r3, #2
 8002520:	e013      	b.n	800254a <HAL_HCD_Start+0x3e>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f003 f863 	bl	80055fa <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2101      	movs	r1, #1
 800253a:	4618      	mov	r0, r3
 800253c:	f003 fac6 	bl	8005acc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002560:	2b01      	cmp	r3, #1
 8002562:	d101      	bne.n	8002568 <HAL_HCD_Stop+0x16>
 8002564:	2302      	movs	r3, #2
 8002566:	e00d      	b.n	8002584 <HAL_HCD_Stop+0x32>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f003 fea5 	bl	80062c4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f003 fa6d 	bl	8005a78 <USB_ResetPort>
 800259e:	4603      	mov	r3, r0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80025b4:	78fa      	ldrb	r2, [r7, #3]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	440b      	add	r3, r1
 80025c2:	335c      	adds	r3, #92	; 0x5c
 80025c4:	781b      	ldrb	r3, [r3, #0]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	460b      	mov	r3, r1
 80025dc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80025de:	78fa      	ldrb	r2, [r7, #3]
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	4613      	mov	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	440b      	add	r3, r1
 80025ec:	334c      	adds	r3, #76	; 0x4c
 80025ee:	681b      	ldr	r3, [r3, #0]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f003 faaf 	bl	8005b6c <USB_GetCurrentFrame>
 800260e:	4603      	mov	r3, r0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f003 fa8a 	bl	8005b3e <USB_GetHostSpeed>
 800262a:	4603      	mov	r3, r0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800264a:	78fb      	ldrb	r3, [r7, #3]
 800264c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4413      	add	r3, r2
 8002656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b04      	cmp	r3, #4
 8002662:	d119      	bne.n	8002698 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4413      	add	r3, r2
 800266c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002670:	461a      	mov	r2, r3
 8002672:	2304      	movs	r3, #4
 8002674:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4413      	add	r3, r2
 800267e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	0151      	lsls	r1, r2, #5
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	440a      	add	r2, r1
 800268c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002690:	f043 0302 	orr.w	r3, r3, #2
 8002694:	60d3      	str	r3, [r2, #12]
 8002696:	e0ce      	b.n	8002836 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ae:	d12c      	bne.n	800270a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026bc:	461a      	mov	r2, r3
 80026be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	440b      	add	r3, r1
 80026d2:	335d      	adds	r3, #93	; 0x5d
 80026d4:	2207      	movs	r2, #7
 80026d6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	0151      	lsls	r1, r2, #5
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	440a      	add	r2, r1
 80026ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026f2:	f043 0302 	orr.w	r3, r3, #2
 80026f6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	4611      	mov	r1, r2
 8002702:	4618      	mov	r0, r3
 8002704:	f003 fca3 	bl	800604e <USB_HC_Halt>
 8002708:	e095      	b.n	8002836 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4413      	add	r3, r2
 8002712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 0320 	and.w	r3, r3, #32
 800271c:	2b20      	cmp	r3, #32
 800271e:	d109      	bne.n	8002734 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	015a      	lsls	r2, r3, #5
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4413      	add	r3, r2
 8002728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272c:	461a      	mov	r2, r3
 800272e:	2320      	movs	r3, #32
 8002730:	6093      	str	r3, [r2, #8]
 8002732:	e080      	b.n	8002836 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4413      	add	r3, r2
 800273c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b08      	cmp	r3, #8
 8002748:	d134      	bne.n	80027b4 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4413      	add	r3, r2
 8002752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	0151      	lsls	r1, r2, #5
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	440a      	add	r2, r1
 8002760:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002764:	f043 0302 	orr.w	r3, r3, #2
 8002768:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	4613      	mov	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	440b      	add	r3, r1
 8002778:	335d      	adds	r3, #93	; 0x5d
 800277a:	2205      	movs	r2, #5
 800277c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4413      	add	r3, r2
 8002786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278a:	461a      	mov	r2, r3
 800278c:	2310      	movs	r3, #16
 800278e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4413      	add	r3, r2
 8002798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279c:	461a      	mov	r2, r3
 800279e:	2308      	movs	r3, #8
 80027a0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	4611      	mov	r1, r2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f003 fc4e 	bl	800604e <USB_HC_Halt>
 80027b2:	e040      	b.n	8002836 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ca:	d134      	bne.n	8002836 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	015a      	lsls	r2, r3, #5
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4413      	add	r3, r2
 80027d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	0151      	lsls	r1, r2, #5
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	440a      	add	r2, r1
 80027e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027e6:	f043 0302 	orr.w	r3, r3, #2
 80027ea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	4611      	mov	r1, r2
 80027f6:	4618      	mov	r0, r3
 80027f8:	f003 fc29 	bl	800604e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	015a      	lsls	r2, r3, #5
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4413      	add	r3, r2
 8002804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002808:	461a      	mov	r2, r3
 800280a:	2310      	movs	r3, #16
 800280c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	440b      	add	r3, r1
 800281c:	335d      	adds	r3, #93	; 0x5d
 800281e:	2208      	movs	r2, #8
 8002820:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	015a      	lsls	r2, r3, #5
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	4413      	add	r3, r2
 800282a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282e:	461a      	mov	r2, r3
 8002830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002834:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	015a      	lsls	r2, r3, #5
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4413      	add	r3, r2
 800283e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800284c:	d122      	bne.n	8002894 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	4413      	add	r3, r2
 8002856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	0151      	lsls	r1, r2, #5
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	440a      	add	r2, r1
 8002864:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002868:	f043 0302 	orr.w	r3, r3, #2
 800286c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	4611      	mov	r1, r2
 8002878:	4618      	mov	r0, r3
 800287a:	f003 fbe8 	bl	800604e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	015a      	lsls	r2, r3, #5
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4413      	add	r3, r2
 8002886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288a:	461a      	mov	r2, r3
 800288c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002890:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002892:	e300      	b.n	8002e96 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	015a      	lsls	r2, r3, #5
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4413      	add	r3, r2
 800289c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	f040 80fd 	bne.w	8002aa6 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d01b      	beq.n	80028ec <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	440b      	add	r3, r1
 80028c2:	3348      	adds	r3, #72	; 0x48
 80028c4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	0159      	lsls	r1, r3, #5
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	440b      	add	r3, r1
 80028ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80028d8:	1ad1      	subs	r1, r2, r3
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	4403      	add	r3, r0
 80028e8:	334c      	adds	r3, #76	; 0x4c
 80028ea:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	4613      	mov	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	440b      	add	r3, r1
 80028fa:	335d      	adds	r3, #93	; 0x5d
 80028fc:	2201      	movs	r2, #1
 80028fe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	440b      	add	r3, r1
 800290e:	3358      	adds	r3, #88	; 0x58
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	015a      	lsls	r2, r3, #5
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4413      	add	r3, r2
 800291c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002920:	461a      	mov	r2, r3
 8002922:	2301      	movs	r3, #1
 8002924:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	440b      	add	r3, r1
 8002934:	333f      	adds	r3, #63	; 0x3f
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	440b      	add	r3, r1
 800294a:	333f      	adds	r3, #63	; 0x3f
 800294c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800294e:	2b02      	cmp	r3, #2
 8002950:	d121      	bne.n	8002996 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	015a      	lsls	r2, r3, #5
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4413      	add	r3, r2
 800295a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	0151      	lsls	r1, r2, #5
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	440a      	add	r2, r1
 8002968:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800296c:	f043 0302 	orr.w	r3, r3, #2
 8002970:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	4611      	mov	r1, r2
 800297c:	4618      	mov	r0, r3
 800297e:	f003 fb66 	bl	800604e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	015a      	lsls	r2, r3, #5
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4413      	add	r3, r2
 800298a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298e:	461a      	mov	r2, r3
 8002990:	2310      	movs	r3, #16
 8002992:	6093      	str	r3, [r2, #8]
 8002994:	e070      	b.n	8002a78 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	440b      	add	r3, r1
 80029a4:	333f      	adds	r3, #63	; 0x3f
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b03      	cmp	r3, #3
 80029aa:	d12a      	bne.n	8002a02 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	0151      	lsls	r1, r2, #5
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	440a      	add	r2, r1
 80029c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80029ca:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4613      	mov	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	440b      	add	r3, r1
 80029da:	335c      	adds	r3, #92	; 0x5c
 80029dc:	2201      	movs	r2, #1
 80029de:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	b2d8      	uxtb	r0, r3
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	4613      	mov	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	440b      	add	r3, r1
 80029f2:	335c      	adds	r3, #92	; 0x5c
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	4601      	mov	r1, r0
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f005 fcca 	bl	8008394 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a00:	e03a      	b.n	8002a78 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4613      	mov	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	440b      	add	r3, r1
 8002a10:	333f      	adds	r3, #63	; 0x3f
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d12f      	bne.n	8002a78 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	440b      	add	r3, r1
 8002a26:	335c      	adds	r3, #92	; 0x5c
 8002a28:	2201      	movs	r2, #1
 8002a2a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	440b      	add	r3, r1
 8002a3a:	3350      	adds	r3, #80	; 0x50
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	f083 0301 	eor.w	r3, r3, #1
 8002a42:	b2d8      	uxtb	r0, r3
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	440b      	add	r3, r1
 8002a52:	3350      	adds	r3, #80	; 0x50
 8002a54:	4602      	mov	r2, r0
 8002a56:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	b2d8      	uxtb	r0, r3
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	440b      	add	r3, r1
 8002a6a:	335c      	adds	r3, #92	; 0x5c
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	4601      	mov	r1, r0
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f005 fc8e 	bl	8008394 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	440b      	add	r3, r1
 8002a86:	3350      	adds	r3, #80	; 0x50
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	f083 0301 	eor.w	r3, r3, #1
 8002a8e:	b2d8      	uxtb	r0, r3
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	4613      	mov	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	440b      	add	r3, r1
 8002a9e:	3350      	adds	r3, #80	; 0x50
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	701a      	strb	r2, [r3, #0]
}
 8002aa4:	e1f7      	b.n	8002e96 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	015a      	lsls	r2, r3, #5
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4413      	add	r3, r2
 8002aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	f040 811a 	bne.w	8002cf2 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	0151      	lsls	r1, r2, #5
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	440a      	add	r2, r1
 8002ad4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ad8:	f023 0302 	bic.w	r3, r3, #2
 8002adc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	440b      	add	r3, r1
 8002aec:	335d      	adds	r3, #93	; 0x5d
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d10a      	bne.n	8002b0a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	440b      	add	r3, r1
 8002b02:	335c      	adds	r3, #92	; 0x5c
 8002b04:	2201      	movs	r2, #1
 8002b06:	701a      	strb	r2, [r3, #0]
 8002b08:	e0d9      	b.n	8002cbe <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	440b      	add	r3, r1
 8002b18:	335d      	adds	r3, #93	; 0x5d
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b05      	cmp	r3, #5
 8002b1e:	d10a      	bne.n	8002b36 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	440b      	add	r3, r1
 8002b2e:	335c      	adds	r3, #92	; 0x5c
 8002b30:	2205      	movs	r2, #5
 8002b32:	701a      	strb	r2, [r3, #0]
 8002b34:	e0c3      	b.n	8002cbe <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	440b      	add	r3, r1
 8002b44:	335d      	adds	r3, #93	; 0x5d
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b06      	cmp	r3, #6
 8002b4a:	d00a      	beq.n	8002b62 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	4613      	mov	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	440b      	add	r3, r1
 8002b5a:	335d      	adds	r3, #93	; 0x5d
 8002b5c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d156      	bne.n	8002c10 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	440b      	add	r3, r1
 8002b70:	3358      	adds	r3, #88	; 0x58
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	1c59      	adds	r1, r3, #1
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	4403      	add	r3, r0
 8002b84:	3358      	adds	r3, #88	; 0x58
 8002b86:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	440b      	add	r3, r1
 8002b96:	3358      	adds	r3, #88	; 0x58
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2b03      	cmp	r3, #3
 8002b9c:	d914      	bls.n	8002bc8 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	440b      	add	r3, r1
 8002bac:	3358      	adds	r3, #88	; 0x58
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	440b      	add	r3, r1
 8002bc0:	335c      	adds	r3, #92	; 0x5c
 8002bc2:	2204      	movs	r2, #4
 8002bc4:	701a      	strb	r2, [r3, #0]
 8002bc6:	e009      	b.n	8002bdc <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	440b      	add	r3, r1
 8002bd6:	335c      	adds	r3, #92	; 0x5c
 8002bd8:	2202      	movs	r2, #2
 8002bda:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	015a      	lsls	r2, r3, #5
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bf2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bfa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	015a      	lsls	r2, r3, #5
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	4413      	add	r3, r2
 8002c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c08:	461a      	mov	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	e056      	b.n	8002cbe <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	440b      	add	r3, r1
 8002c1e:	335d      	adds	r3, #93	; 0x5d
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	d123      	bne.n	8002c6e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	440b      	add	r3, r1
 8002c34:	335c      	adds	r3, #92	; 0x5c
 8002c36:	2202      	movs	r2, #2
 8002c38:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	015a      	lsls	r2, r3, #5
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4413      	add	r3, r2
 8002c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c50:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c58:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c66:	461a      	mov	r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	e027      	b.n	8002cbe <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	440b      	add	r3, r1
 8002c7c:	335d      	adds	r3, #93	; 0x5d
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b07      	cmp	r3, #7
 8002c82:	d11c      	bne.n	8002cbe <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	440b      	add	r3, r1
 8002c92:	3358      	adds	r3, #88	; 0x58
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	1c59      	adds	r1, r3, #1
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4403      	add	r3, r0
 8002ca6:	3358      	adds	r3, #88	; 0x58
 8002ca8:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	440b      	add	r3, r1
 8002cb8:	335c      	adds	r3, #92	; 0x5c
 8002cba:	2204      	movs	r2, #4
 8002cbc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	015a      	lsls	r2, r3, #5
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cca:	461a      	mov	r2, r3
 8002ccc:	2302      	movs	r3, #2
 8002cce:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	b2d8      	uxtb	r0, r3
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	440b      	add	r3, r1
 8002ce2:	335c      	adds	r3, #92	; 0x5c
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	4601      	mov	r1, r0
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f005 fb52 	bl	8008394 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002cf0:	e0d1      	b.n	8002e96 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	015a      	lsls	r2, r3, #5
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d04:	2b80      	cmp	r3, #128	; 0x80
 8002d06:	d13e      	bne.n	8002d86 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	0151      	lsls	r1, r2, #5
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	440a      	add	r2, r1
 8002d1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d22:	f043 0302 	orr.w	r3, r3, #2
 8002d26:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	440b      	add	r3, r1
 8002d36:	3358      	adds	r3, #88	; 0x58
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	1c59      	adds	r1, r3, #1
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4403      	add	r3, r0
 8002d4a:	3358      	adds	r3, #88	; 0x58
 8002d4c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	440b      	add	r3, r1
 8002d5c:	335d      	adds	r3, #93	; 0x5d
 8002d5e:	2206      	movs	r2, #6
 8002d60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f003 f96e 	bl	800604e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	015a      	lsls	r2, r3, #5
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d7e:	461a      	mov	r2, r3
 8002d80:	2380      	movs	r3, #128	; 0x80
 8002d82:	6093      	str	r3, [r2, #8]
}
 8002d84:	e087      	b.n	8002e96 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 0310 	and.w	r3, r3, #16
 8002d98:	2b10      	cmp	r3, #16
 8002d9a:	d17c      	bne.n	8002e96 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	440b      	add	r3, r1
 8002daa:	333f      	adds	r3, #63	; 0x3f
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	d122      	bne.n	8002df8 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	440b      	add	r3, r1
 8002dc0:	3358      	adds	r3, #88	; 0x58
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	015a      	lsls	r2, r3, #5
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4413      	add	r3, r2
 8002dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	0151      	lsls	r1, r2, #5
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	440a      	add	r2, r1
 8002ddc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002de0:	f043 0302 	orr.w	r3, r3, #2
 8002de4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	4611      	mov	r1, r2
 8002df0:	4618      	mov	r0, r3
 8002df2:	f003 f92c 	bl	800604e <USB_HC_Halt>
 8002df6:	e045      	b.n	8002e84 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	440b      	add	r3, r1
 8002e06:	333f      	adds	r3, #63	; 0x3f
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00a      	beq.n	8002e24 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	440b      	add	r3, r1
 8002e1c:	333f      	adds	r3, #63	; 0x3f
 8002e1e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d12f      	bne.n	8002e84 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	440b      	add	r3, r1
 8002e32:	3358      	adds	r3, #88	; 0x58
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d121      	bne.n	8002e84 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	440b      	add	r3, r1
 8002e4e:	335d      	adds	r3, #93	; 0x5d
 8002e50:	2203      	movs	r2, #3
 8002e52:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	0151      	lsls	r1, r2, #5
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	440a      	add	r2, r1
 8002e6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e6e:	f043 0302 	orr.w	r3, r3, #2
 8002e72:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	4611      	mov	r1, r2
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f003 f8e5 	bl	800604e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e90:	461a      	mov	r2, r3
 8002e92:	2310      	movs	r3, #16
 8002e94:	6093      	str	r3, [r2, #8]
}
 8002e96:	bf00      	nop
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b086      	sub	sp, #24
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002eb4:	78fb      	ldrb	r3, [r7, #3]
 8002eb6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	015a      	lsls	r2, r3, #5
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d119      	bne.n	8002f02 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	015a      	lsls	r2, r3, #5
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eda:	461a      	mov	r2, r3
 8002edc:	2304      	movs	r3, #4
 8002ede:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	015a      	lsls	r2, r3, #5
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	0151      	lsls	r1, r2, #5
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	440a      	add	r2, r1
 8002ef6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002efa:	f043 0302 	orr.w	r3, r3, #2
 8002efe:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002f00:	e33e      	b.n	8003580 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	015a      	lsls	r2, r3, #5
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 0320 	and.w	r3, r3, #32
 8002f14:	2b20      	cmp	r3, #32
 8002f16:	d141      	bne.n	8002f9c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f24:	461a      	mov	r2, r3
 8002f26:	2320      	movs	r3, #32
 8002f28:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	440b      	add	r3, r1
 8002f38:	333d      	adds	r3, #61	; 0x3d
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	f040 831f 	bne.w	8003580 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	440b      	add	r3, r1
 8002f50:	333d      	adds	r3, #61	; 0x3d
 8002f52:	2200      	movs	r2, #0
 8002f54:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	440b      	add	r3, r1
 8002f64:	335c      	adds	r3, #92	; 0x5c
 8002f66:	2202      	movs	r2, #2
 8002f68:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	0151      	lsls	r1, r2, #5
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	440a      	add	r2, r1
 8002f80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f84:	f043 0302 	orr.w	r3, r3, #2
 8002f88:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	4611      	mov	r1, r2
 8002f94:	4618      	mov	r0, r3
 8002f96:	f003 f85a 	bl	800604e <USB_HC_Halt>
}
 8002f9a:	e2f1      	b.n	8003580 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	015a      	lsls	r2, r3, #5
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fae:	2b40      	cmp	r3, #64	; 0x40
 8002fb0:	d13f      	bne.n	8003032 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	440b      	add	r3, r1
 8002fc0:	335d      	adds	r3, #93	; 0x5d
 8002fc2:	2204      	movs	r2, #4
 8002fc4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	440b      	add	r3, r1
 8002fd4:	333d      	adds	r3, #61	; 0x3d
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	440b      	add	r3, r1
 8002fe8:	3358      	adds	r3, #88	; 0x58
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	015a      	lsls	r2, r3, #5
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	0151      	lsls	r1, r2, #5
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	440a      	add	r2, r1
 8003004:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003008:	f043 0302 	orr.w	r3, r3, #2
 800300c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	4611      	mov	r1, r2
 8003018:	4618      	mov	r0, r3
 800301a:	f003 f818 	bl	800604e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4413      	add	r3, r2
 8003026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302a:	461a      	mov	r2, r3
 800302c:	2340      	movs	r3, #64	; 0x40
 800302e:	6093      	str	r3, [r2, #8]
}
 8003030:	e2a6      	b.n	8003580 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4413      	add	r3, r2
 800303a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003048:	d122      	bne.n	8003090 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	015a      	lsls	r2, r3, #5
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	4413      	add	r3, r2
 8003052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	0151      	lsls	r1, r2, #5
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	440a      	add	r2, r1
 8003060:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003064:	f043 0302 	orr.w	r3, r3, #2
 8003068:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	4611      	mov	r1, r2
 8003074:	4618      	mov	r0, r3
 8003076:	f002 ffea 	bl	800604e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	015a      	lsls	r2, r3, #5
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	4413      	add	r3, r2
 8003082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003086:	461a      	mov	r2, r3
 8003088:	f44f 7300 	mov.w	r3, #512	; 0x200
 800308c:	6093      	str	r3, [r2, #8]
}
 800308e:	e277      	b.n	8003580 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	015a      	lsls	r2, r3, #5
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	4413      	add	r3, r2
 8003098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d135      	bne.n	8003112 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	440b      	add	r3, r1
 80030b4:	3358      	adds	r3, #88	; 0x58
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	015a      	lsls	r2, r3, #5
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	4413      	add	r3, r2
 80030c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	0151      	lsls	r1, r2, #5
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	440a      	add	r2, r1
 80030d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030d4:	f043 0302 	orr.w	r3, r3, #2
 80030d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	4611      	mov	r1, r2
 80030e4:	4618      	mov	r0, r3
 80030e6:	f002 ffb2 	bl	800604e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f6:	461a      	mov	r2, r3
 80030f8:	2301      	movs	r3, #1
 80030fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	440b      	add	r3, r1
 800310a:	335d      	adds	r3, #93	; 0x5d
 800310c:	2201      	movs	r2, #1
 800310e:	701a      	strb	r2, [r3, #0]
}
 8003110:	e236      	b.n	8003580 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	015a      	lsls	r2, r3, #5
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	4413      	add	r3, r2
 800311a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 0308 	and.w	r3, r3, #8
 8003124:	2b08      	cmp	r3, #8
 8003126:	d12b      	bne.n	8003180 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	015a      	lsls	r2, r3, #5
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	4413      	add	r3, r2
 8003130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003134:	461a      	mov	r2, r3
 8003136:	2308      	movs	r3, #8
 8003138:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	015a      	lsls	r2, r3, #5
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	4413      	add	r3, r2
 8003142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	0151      	lsls	r1, r2, #5
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	440a      	add	r2, r1
 8003150:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003154:	f043 0302 	orr.w	r3, r3, #2
 8003158:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	4611      	mov	r1, r2
 8003164:	4618      	mov	r0, r3
 8003166:	f002 ff72 	bl	800604e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	4613      	mov	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	440b      	add	r3, r1
 8003178:	335d      	adds	r3, #93	; 0x5d
 800317a:	2205      	movs	r2, #5
 800317c:	701a      	strb	r2, [r3, #0]
}
 800317e:	e1ff      	b.n	8003580 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	015a      	lsls	r2, r3, #5
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	4413      	add	r3, r2
 8003188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 0310 	and.w	r3, r3, #16
 8003192:	2b10      	cmp	r3, #16
 8003194:	d155      	bne.n	8003242 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	440b      	add	r3, r1
 80031a4:	3358      	adds	r3, #88	; 0x58
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	4613      	mov	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	440b      	add	r3, r1
 80031b8:	335d      	adds	r3, #93	; 0x5d
 80031ba:	2203      	movs	r2, #3
 80031bc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4613      	mov	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	440b      	add	r3, r1
 80031cc:	333d      	adds	r3, #61	; 0x3d
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d114      	bne.n	80031fe <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	4613      	mov	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	440b      	add	r3, r1
 80031e2:	333c      	adds	r3, #60	; 0x3c
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d109      	bne.n	80031fe <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	440b      	add	r3, r1
 80031f8:	333d      	adds	r3, #61	; 0x3d
 80031fa:	2201      	movs	r2, #1
 80031fc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	015a      	lsls	r2, r3, #5
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4413      	add	r3, r2
 8003206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	0151      	lsls	r1, r2, #5
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	440a      	add	r2, r1
 8003214:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003218:	f043 0302 	orr.w	r3, r3, #2
 800321c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	4611      	mov	r1, r2
 8003228:	4618      	mov	r0, r3
 800322a:	f002 ff10 	bl	800604e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	015a      	lsls	r2, r3, #5
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	4413      	add	r3, r2
 8003236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323a:	461a      	mov	r2, r3
 800323c:	2310      	movs	r3, #16
 800323e:	6093      	str	r3, [r2, #8]
}
 8003240:	e19e      	b.n	8003580 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	015a      	lsls	r2, r3, #5
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	4413      	add	r3, r2
 800324a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003254:	2b80      	cmp	r3, #128	; 0x80
 8003256:	d12b      	bne.n	80032b0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	015a      	lsls	r2, r3, #5
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4413      	add	r3, r2
 8003260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	0151      	lsls	r1, r2, #5
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	440a      	add	r2, r1
 800326e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003272:	f043 0302 	orr.w	r3, r3, #2
 8003276:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	4611      	mov	r1, r2
 8003282:	4618      	mov	r0, r3
 8003284:	f002 fee3 	bl	800604e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	440b      	add	r3, r1
 8003296:	335d      	adds	r3, #93	; 0x5d
 8003298:	2206      	movs	r2, #6
 800329a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a8:	461a      	mov	r2, r3
 80032aa:	2380      	movs	r3, #128	; 0x80
 80032ac:	6093      	str	r3, [r2, #8]
}
 80032ae:	e167      	b.n	8003580 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	015a      	lsls	r2, r3, #5
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c6:	d135      	bne.n	8003334 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	0151      	lsls	r1, r2, #5
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	440a      	add	r2, r1
 80032de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032e2:	f043 0302 	orr.w	r3, r3, #2
 80032e6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	4611      	mov	r1, r2
 80032f2:	4618      	mov	r0, r3
 80032f4:	f002 feab 	bl	800604e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	015a      	lsls	r2, r3, #5
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4413      	add	r3, r2
 8003300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003304:	461a      	mov	r2, r3
 8003306:	2310      	movs	r3, #16
 8003308:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	015a      	lsls	r2, r3, #5
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	4413      	add	r3, r2
 8003312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003316:	461a      	mov	r2, r3
 8003318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800331c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	440b      	add	r3, r1
 800332c:	335d      	adds	r3, #93	; 0x5d
 800332e:	2208      	movs	r2, #8
 8003330:	701a      	strb	r2, [r3, #0]
}
 8003332:	e125      	b.n	8003580 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	4413      	add	r3, r2
 800333c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b02      	cmp	r3, #2
 8003348:	f040 811a 	bne.w	8003580 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	4413      	add	r3, r2
 8003354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	0151      	lsls	r1, r2, #5
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	440a      	add	r2, r1
 8003362:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003366:	f023 0302 	bic.w	r3, r3, #2
 800336a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	4613      	mov	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	440b      	add	r3, r1
 800337a:	335d      	adds	r3, #93	; 0x5d
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d137      	bne.n	80033f2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	4613      	mov	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	440b      	add	r3, r1
 8003390:	335c      	adds	r3, #92	; 0x5c
 8003392:	2201      	movs	r2, #1
 8003394:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	440b      	add	r3, r1
 80033a4:	333f      	adds	r3, #63	; 0x3f
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d00b      	beq.n	80033c4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4613      	mov	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	440b      	add	r3, r1
 80033ba:	333f      	adds	r3, #63	; 0x3f
 80033bc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80033be:	2b03      	cmp	r3, #3
 80033c0:	f040 80c5 	bne.w	800354e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	440b      	add	r3, r1
 80033d2:	3351      	adds	r3, #81	; 0x51
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	f083 0301 	eor.w	r3, r3, #1
 80033da:	b2d8      	uxtb	r0, r3
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	440b      	add	r3, r1
 80033ea:	3351      	adds	r3, #81	; 0x51
 80033ec:	4602      	mov	r2, r0
 80033ee:	701a      	strb	r2, [r3, #0]
 80033f0:	e0ad      	b.n	800354e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	440b      	add	r3, r1
 8003400:	335d      	adds	r3, #93	; 0x5d
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b03      	cmp	r3, #3
 8003406:	d10a      	bne.n	800341e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	440b      	add	r3, r1
 8003416:	335c      	adds	r3, #92	; 0x5c
 8003418:	2202      	movs	r2, #2
 800341a:	701a      	strb	r2, [r3, #0]
 800341c:	e097      	b.n	800354e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	4613      	mov	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	440b      	add	r3, r1
 800342c:	335d      	adds	r3, #93	; 0x5d
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b04      	cmp	r3, #4
 8003432:	d10a      	bne.n	800344a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4613      	mov	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	440b      	add	r3, r1
 8003442:	335c      	adds	r3, #92	; 0x5c
 8003444:	2202      	movs	r2, #2
 8003446:	701a      	strb	r2, [r3, #0]
 8003448:	e081      	b.n	800354e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	4613      	mov	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	440b      	add	r3, r1
 8003458:	335d      	adds	r3, #93	; 0x5d
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b05      	cmp	r3, #5
 800345e:	d10a      	bne.n	8003476 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	4613      	mov	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	440b      	add	r3, r1
 800346e:	335c      	adds	r3, #92	; 0x5c
 8003470:	2205      	movs	r2, #5
 8003472:	701a      	strb	r2, [r3, #0]
 8003474:	e06b      	b.n	800354e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	4613      	mov	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	440b      	add	r3, r1
 8003484:	335d      	adds	r3, #93	; 0x5d
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b06      	cmp	r3, #6
 800348a:	d00a      	beq.n	80034a2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	4613      	mov	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	440b      	add	r3, r1
 800349a:	335d      	adds	r3, #93	; 0x5d
 800349c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d155      	bne.n	800354e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	440b      	add	r3, r1
 80034b0:	3358      	adds	r3, #88	; 0x58
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	1c59      	adds	r1, r3, #1
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	4613      	mov	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4403      	add	r3, r0
 80034c4:	3358      	adds	r3, #88	; 0x58
 80034c6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	440b      	add	r3, r1
 80034d6:	3358      	adds	r3, #88	; 0x58
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2b03      	cmp	r3, #3
 80034dc:	d914      	bls.n	8003508 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4613      	mov	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	440b      	add	r3, r1
 80034ec:	3358      	adds	r3, #88	; 0x58
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	440b      	add	r3, r1
 8003500:	335c      	adds	r3, #92	; 0x5c
 8003502:	2204      	movs	r2, #4
 8003504:	701a      	strb	r2, [r3, #0]
 8003506:	e009      	b.n	800351c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	440b      	add	r3, r1
 8003516:	335c      	adds	r3, #92	; 0x5c
 8003518:	2202      	movs	r2, #2
 800351a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	4413      	add	r3, r2
 8003524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003532:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800353a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	015a      	lsls	r2, r3, #5
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	4413      	add	r3, r2
 8003544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003548:	461a      	mov	r2, r3
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	015a      	lsls	r2, r3, #5
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	4413      	add	r3, r2
 8003556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355a:	461a      	mov	r2, r3
 800355c:	2302      	movs	r3, #2
 800355e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	b2d8      	uxtb	r0, r3
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	4613      	mov	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	440b      	add	r3, r1
 8003572:	335c      	adds	r3, #92	; 0x5c
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	4601      	mov	r1, r0
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f004 ff0a 	bl	8008394 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003580:	bf00      	nop
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08a      	sub	sp, #40	; 0x28
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	f003 030f 	and.w	r3, r3, #15
 80035a8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	0c5b      	lsrs	r3, r3, #17
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	091b      	lsrs	r3, r3, #4
 80035b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035bc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d003      	beq.n	80035cc <HCD_RXQLVL_IRQHandler+0x44>
 80035c4:	2b05      	cmp	r3, #5
 80035c6:	f000 8082 	beq.w	80036ce <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80035ca:	e083      	b.n	80036d4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d07f      	beq.n	80036d2 <HCD_RXQLVL_IRQHandler+0x14a>
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4613      	mov	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	440b      	add	r3, r1
 80035e0:	3344      	adds	r3, #68	; 0x44
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d074      	beq.n	80036d2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6818      	ldr	r0, [r3, #0]
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4613      	mov	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	440b      	add	r3, r1
 80035fa:	3344      	adds	r3, #68	; 0x44
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	b292      	uxth	r2, r2
 8003602:	4619      	mov	r1, r3
 8003604:	f002 f8c3 	bl	800578e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003608:	6879      	ldr	r1, [r7, #4]
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	440b      	add	r3, r1
 8003616:	3344      	adds	r3, #68	; 0x44
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	18d1      	adds	r1, r2, r3
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4613      	mov	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	4403      	add	r3, r0
 800362c:	3344      	adds	r3, #68	; 0x44
 800362e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	440b      	add	r3, r1
 800363e:	334c      	adds	r3, #76	; 0x4c
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	18d1      	adds	r1, r2, r3
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	4403      	add	r3, r0
 8003654:	334c      	adds	r3, #76	; 0x4c
 8003656:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	4413      	add	r3, r2
 8003660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003664:	691a      	ldr	r2, [r3, #16]
 8003666:	4b1d      	ldr	r3, [pc, #116]	; (80036dc <HCD_RXQLVL_IRQHandler+0x154>)
 8003668:	4013      	ands	r3, r2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d031      	beq.n	80036d2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	015a      	lsls	r2, r3, #5
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	4413      	add	r3, r2
 8003676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003684:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800368c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	015a      	lsls	r2, r3, #5
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	4413      	add	r3, r2
 8003696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800369a:	461a      	mov	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	440b      	add	r3, r1
 80036ae:	3350      	adds	r3, #80	; 0x50
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	f083 0301 	eor.w	r3, r3, #1
 80036b6:	b2d8      	uxtb	r0, r3
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4613      	mov	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	440b      	add	r3, r1
 80036c6:	3350      	adds	r3, #80	; 0x50
 80036c8:	4602      	mov	r2, r0
 80036ca:	701a      	strb	r2, [r3, #0]
      break;
 80036cc:	e001      	b.n	80036d2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80036ce:	bf00      	nop
 80036d0:	e000      	b.n	80036d4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80036d2:	bf00      	nop
  }
}
 80036d4:	bf00      	nop
 80036d6:	3728      	adds	r7, #40	; 0x28
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	1ff80000 	.word	0x1ff80000

080036e0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800370c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b02      	cmp	r3, #2
 8003716:	d10b      	bne.n	8003730 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b01      	cmp	r3, #1
 8003720:	d102      	bne.n	8003728 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f004 fe1a 	bl	800835c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	f043 0302 	orr.w	r3, r3, #2
 800372e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b08      	cmp	r3, #8
 8003738:	d132      	bne.n	80037a0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f043 0308 	orr.w	r3, r3, #8
 8003740:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b04      	cmp	r3, #4
 800374a:	d126      	bne.n	800379a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	2b02      	cmp	r3, #2
 8003752:	d113      	bne.n	800377c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800375a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800375e:	d106      	bne.n	800376e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2102      	movs	r1, #2
 8003766:	4618      	mov	r0, r3
 8003768:	f002 f94c 	bl	8005a04 <USB_InitFSLSPClkSel>
 800376c:	e011      	b.n	8003792 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2101      	movs	r1, #1
 8003774:	4618      	mov	r0, r3
 8003776:	f002 f945 	bl	8005a04 <USB_InitFSLSPClkSel>
 800377a:	e00a      	b.n	8003792 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d106      	bne.n	8003792 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800378a:	461a      	mov	r2, r3
 800378c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003790:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f004 fe0c 	bl	80083b0 <HAL_HCD_PortEnabled_Callback>
 8003798:	e002      	b.n	80037a0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f004 fe16 	bl	80083cc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f003 0320 	and.w	r3, r3, #32
 80037a6:	2b20      	cmp	r3, #32
 80037a8:	d103      	bne.n	80037b2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	f043 0320 	orr.w	r3, r3, #32
 80037b0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037b8:	461a      	mov	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	6013      	str	r3, [r2, #0]
}
 80037be:	bf00      	nop
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e11f      	b.n	8003a1a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d106      	bne.n	80037f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7fd f88a 	bl	8000908 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2224      	movs	r2, #36	; 0x24
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0201 	bic.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800381a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800382a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800382c:	f000 fd3e 	bl	80042ac <HAL_RCC_GetPCLK1Freq>
 8003830:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	4a7b      	ldr	r2, [pc, #492]	; (8003a24 <HAL_I2C_Init+0x25c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d807      	bhi.n	800384c <HAL_I2C_Init+0x84>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4a7a      	ldr	r2, [pc, #488]	; (8003a28 <HAL_I2C_Init+0x260>)
 8003840:	4293      	cmp	r3, r2
 8003842:	bf94      	ite	ls
 8003844:	2301      	movls	r3, #1
 8003846:	2300      	movhi	r3, #0
 8003848:	b2db      	uxtb	r3, r3
 800384a:	e006      	b.n	800385a <HAL_I2C_Init+0x92>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4a77      	ldr	r2, [pc, #476]	; (8003a2c <HAL_I2C_Init+0x264>)
 8003850:	4293      	cmp	r3, r2
 8003852:	bf94      	ite	ls
 8003854:	2301      	movls	r3, #1
 8003856:	2300      	movhi	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e0db      	b.n	8003a1a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4a72      	ldr	r2, [pc, #456]	; (8003a30 <HAL_I2C_Init+0x268>)
 8003866:	fba2 2303 	umull	r2, r3, r2, r3
 800386a:	0c9b      	lsrs	r3, r3, #18
 800386c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	430a      	orrs	r2, r1
 8003880:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	4a64      	ldr	r2, [pc, #400]	; (8003a24 <HAL_I2C_Init+0x25c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d802      	bhi.n	800389c <HAL_I2C_Init+0xd4>
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	3301      	adds	r3, #1
 800389a:	e009      	b.n	80038b0 <HAL_I2C_Init+0xe8>
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038a2:	fb02 f303 	mul.w	r3, r2, r3
 80038a6:	4a63      	ldr	r2, [pc, #396]	; (8003a34 <HAL_I2C_Init+0x26c>)
 80038a8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ac:	099b      	lsrs	r3, r3, #6
 80038ae:	3301      	adds	r3, #1
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	430b      	orrs	r3, r1
 80038b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80038c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	4956      	ldr	r1, [pc, #344]	; (8003a24 <HAL_I2C_Init+0x25c>)
 80038cc:	428b      	cmp	r3, r1
 80038ce:	d80d      	bhi.n	80038ec <HAL_I2C_Init+0x124>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	1e59      	subs	r1, r3, #1
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	fbb1 f3f3 	udiv	r3, r1, r3
 80038de:	3301      	adds	r3, #1
 80038e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	bf38      	it	cc
 80038e8:	2304      	movcc	r3, #4
 80038ea:	e04f      	b.n	800398c <HAL_I2C_Init+0x1c4>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d111      	bne.n	8003918 <HAL_I2C_Init+0x150>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	1e58      	subs	r0, r3, #1
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6859      	ldr	r1, [r3, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	440b      	add	r3, r1
 8003902:	fbb0 f3f3 	udiv	r3, r0, r3
 8003906:	3301      	adds	r3, #1
 8003908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800390c:	2b00      	cmp	r3, #0
 800390e:	bf0c      	ite	eq
 8003910:	2301      	moveq	r3, #1
 8003912:	2300      	movne	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	e012      	b.n	800393e <HAL_I2C_Init+0x176>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	1e58      	subs	r0, r3, #1
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6859      	ldr	r1, [r3, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	0099      	lsls	r1, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	fbb0 f3f3 	udiv	r3, r0, r3
 800392e:	3301      	adds	r3, #1
 8003930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003934:	2b00      	cmp	r3, #0
 8003936:	bf0c      	ite	eq
 8003938:	2301      	moveq	r3, #1
 800393a:	2300      	movne	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <HAL_I2C_Init+0x17e>
 8003942:	2301      	movs	r3, #1
 8003944:	e022      	b.n	800398c <HAL_I2C_Init+0x1c4>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10e      	bne.n	800396c <HAL_I2C_Init+0x1a4>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	1e58      	subs	r0, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6859      	ldr	r1, [r3, #4]
 8003956:	460b      	mov	r3, r1
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	440b      	add	r3, r1
 800395c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003960:	3301      	adds	r3, #1
 8003962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800396a:	e00f      	b.n	800398c <HAL_I2C_Init+0x1c4>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	1e58      	subs	r0, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6859      	ldr	r1, [r3, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	0099      	lsls	r1, r3, #2
 800397c:	440b      	add	r3, r1
 800397e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003982:	3301      	adds	r3, #1
 8003984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003988:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	6809      	ldr	r1, [r1, #0]
 8003990:	4313      	orrs	r3, r2
 8003992:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69da      	ldr	r2, [r3, #28]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80039ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6911      	ldr	r1, [r2, #16]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	68d2      	ldr	r2, [r2, #12]
 80039c6:	4311      	orrs	r1, r2
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6812      	ldr	r2, [r2, #0]
 80039cc:	430b      	orrs	r3, r1
 80039ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695a      	ldr	r2, [r3, #20]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2220      	movs	r2, #32
 8003a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	000186a0 	.word	0x000186a0
 8003a28:	001e847f 	.word	0x001e847f
 8003a2c:	003d08ff 	.word	0x003d08ff
 8003a30:	431bde83 	.word	0x431bde83
 8003a34:	10624dd3 	.word	0x10624dd3

08003a38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e25b      	b.n	8003f02 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d075      	beq.n	8003b42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a56:	4ba3      	ldr	r3, [pc, #652]	; (8003ce4 <HAL_RCC_OscConfig+0x2ac>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 030c 	and.w	r3, r3, #12
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d00c      	beq.n	8003a7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a62:	4ba0      	ldr	r3, [pc, #640]	; (8003ce4 <HAL_RCC_OscConfig+0x2ac>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a6a:	2b08      	cmp	r3, #8
 8003a6c:	d112      	bne.n	8003a94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a6e:	4b9d      	ldr	r3, [pc, #628]	; (8003ce4 <HAL_RCC_OscConfig+0x2ac>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a7a:	d10b      	bne.n	8003a94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a7c:	4b99      	ldr	r3, [pc, #612]	; (8003ce4 <HAL_RCC_OscConfig+0x2ac>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d05b      	beq.n	8003b40 <HAL_RCC_OscConfig+0x108>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d157      	bne.n	8003b40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e236      	b.n	8003f02 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a9c:	d106      	bne.n	8003aac <HAL_RCC_OscConfig+0x74>
 8003a9e:	4b91      	ldr	r3, [pc, #580]	; (8003ce4 <HAL_RCC_OscConfig+0x2ac>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a90      	ldr	r2, [pc, #576]	; (8003ce4 <HAL_RCC_OscConfig+0x2ac>)
 8003aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	e01d      	b.n	8003ae8 <HAL_RCC_OscConfig+0xb0>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ab4:	d10c      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x98>
 8003ab6:	4b8b      	ldr	r3, [pc, #556]	; (8003ce4 <HAL_RCC_OscConfig+0x2ac>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a8a      	ldr	r2, [pc, #552]	; (8003ce4 <HAL_RCC_OscConfig+0x2ac>)
 8003abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	4b88      	ldr	r3, [pc, #544]	; (8003ce4 <HAL_RCC_OscConfig+0x2ac>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a87      	ldr	r2, [pc, #540]	; (8003ce4 <HAL_RCC_OscConfig+0x2ac>)
 8003ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	e00b      	b.n	8003ae8 <HAL_RCC_OscConfig+0xb0>
 8003ad0:	4b84      	ldr	r3, [pc, #528]	; (8003ce4 <HAL_RCC_OscConfig+0x2ac>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a83      	ldr	r2, [pc, #524]	; (8003ce4 <HAL_RCC_OscConfig+0x2ac>)
 8003ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	4b81      	ldr	r3, [pc, #516]	; (8003ce4 <HAL_RCC_OscConfig+0x2ac>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a80      	ldr	r2, [pc, #512]	; (8003ce4 <HAL_RCC_OscConfig+0x2ac>)
 8003ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d013      	beq.n	8003b18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af0:	f7fd fae4 	bl	80010bc <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003af8:	f7fd fae0 	bl	80010bc <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b64      	cmp	r3, #100	; 0x64
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e1fb      	b.n	8003f02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0a:	4b76      	ldr	r3, [pc, #472]	; (8003ce4 <HAL_RCC_OscConfig+0x2ac>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0f0      	beq.n	8003af8 <HAL_RCC_OscConfig+0xc0>
 8003b16:	e014      	b.n	8003b42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b18:	f7fd fad0 	bl	80010bc <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b20:	f7fd facc 	bl	80010bc <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b64      	cmp	r3, #100	; 0x64
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e1e7      	b.n	8003f02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b32:	4b6c      	ldr	r3, [pc, #432]	; (8003ce4 <HAL_RCC_OscConfig+0x2ac>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f0      	bne.n	8003b20 <HAL_RCC_OscConfig+0xe8>
 8003b3e:	e000      	b.n	8003b42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d063      	beq.n	8003c16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b4e:	4b65      	ldr	r3, [pc, #404]	; (8003ce4 <HAL_RCC_OscConfig+0x2ac>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 030c 	and.w	r3, r3, #12
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00b      	beq.n	8003b72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b5a:	4b62      	ldr	r3, [pc, #392]	; (8003ce4 <HAL_RCC_OscConfig+0x2ac>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b62:	2b08      	cmp	r3, #8
 8003b64:	d11c      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b66:	4b5f      	ldr	r3, [pc, #380]	; (8003ce4 <HAL_RCC_OscConfig+0x2ac>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d116      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b72:	4b5c      	ldr	r3, [pc, #368]	; (8003ce4 <HAL_RCC_OscConfig+0x2ac>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d005      	beq.n	8003b8a <HAL_RCC_OscConfig+0x152>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d001      	beq.n	8003b8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e1bb      	b.n	8003f02 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b8a:	4b56      	ldr	r3, [pc, #344]	; (8003ce4 <HAL_RCC_OscConfig+0x2ac>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	4952      	ldr	r1, [pc, #328]	; (8003ce4 <HAL_RCC_OscConfig+0x2ac>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b9e:	e03a      	b.n	8003c16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d020      	beq.n	8003bea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ba8:	4b4f      	ldr	r3, [pc, #316]	; (8003ce8 <HAL_RCC_OscConfig+0x2b0>)
 8003baa:	2201      	movs	r2, #1
 8003bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bae:	f7fd fa85 	bl	80010bc <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bb6:	f7fd fa81 	bl	80010bc <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e19c      	b.n	8003f02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc8:	4b46      	ldr	r3, [pc, #280]	; (8003ce4 <HAL_RCC_OscConfig+0x2ac>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0f0      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd4:	4b43      	ldr	r3, [pc, #268]	; (8003ce4 <HAL_RCC_OscConfig+0x2ac>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	4940      	ldr	r1, [pc, #256]	; (8003ce4 <HAL_RCC_OscConfig+0x2ac>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	600b      	str	r3, [r1, #0]
 8003be8:	e015      	b.n	8003c16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bea:	4b3f      	ldr	r3, [pc, #252]	; (8003ce8 <HAL_RCC_OscConfig+0x2b0>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf0:	f7fd fa64 	bl	80010bc <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bf8:	f7fd fa60 	bl	80010bc <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e17b      	b.n	8003f02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c0a:	4b36      	ldr	r3, [pc, #216]	; (8003ce4 <HAL_RCC_OscConfig+0x2ac>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f0      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d030      	beq.n	8003c84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d016      	beq.n	8003c58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c2a:	4b30      	ldr	r3, [pc, #192]	; (8003cec <HAL_RCC_OscConfig+0x2b4>)
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c30:	f7fd fa44 	bl	80010bc <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c38:	f7fd fa40 	bl	80010bc <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e15b      	b.n	8003f02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c4a:	4b26      	ldr	r3, [pc, #152]	; (8003ce4 <HAL_RCC_OscConfig+0x2ac>)
 8003c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0f0      	beq.n	8003c38 <HAL_RCC_OscConfig+0x200>
 8003c56:	e015      	b.n	8003c84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c58:	4b24      	ldr	r3, [pc, #144]	; (8003cec <HAL_RCC_OscConfig+0x2b4>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c5e:	f7fd fa2d 	bl	80010bc <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c66:	f7fd fa29 	bl	80010bc <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e144      	b.n	8003f02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c78:	4b1a      	ldr	r3, [pc, #104]	; (8003ce4 <HAL_RCC_OscConfig+0x2ac>)
 8003c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1f0      	bne.n	8003c66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 80a0 	beq.w	8003dd2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c92:	2300      	movs	r3, #0
 8003c94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c96:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <HAL_RCC_OscConfig+0x2ac>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10f      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60bb      	str	r3, [r7, #8]
 8003ca6:	4b0f      	ldr	r3, [pc, #60]	; (8003ce4 <HAL_RCC_OscConfig+0x2ac>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	4a0e      	ldr	r2, [pc, #56]	; (8003ce4 <HAL_RCC_OscConfig+0x2ac>)
 8003cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <HAL_RCC_OscConfig+0x2ac>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cba:	60bb      	str	r3, [r7, #8]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc2:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <HAL_RCC_OscConfig+0x2b8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d121      	bne.n	8003d12 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cce:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <HAL_RCC_OscConfig+0x2b8>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a07      	ldr	r2, [pc, #28]	; (8003cf0 <HAL_RCC_OscConfig+0x2b8>)
 8003cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cda:	f7fd f9ef 	bl	80010bc <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce0:	e011      	b.n	8003d06 <HAL_RCC_OscConfig+0x2ce>
 8003ce2:	bf00      	nop
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	42470000 	.word	0x42470000
 8003cec:	42470e80 	.word	0x42470e80
 8003cf0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cf4:	f7fd f9e2 	bl	80010bc <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e0fd      	b.n	8003f02 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d06:	4b81      	ldr	r3, [pc, #516]	; (8003f0c <HAL_RCC_OscConfig+0x4d4>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d0f0      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d106      	bne.n	8003d28 <HAL_RCC_OscConfig+0x2f0>
 8003d1a:	4b7d      	ldr	r3, [pc, #500]	; (8003f10 <HAL_RCC_OscConfig+0x4d8>)
 8003d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1e:	4a7c      	ldr	r2, [pc, #496]	; (8003f10 <HAL_RCC_OscConfig+0x4d8>)
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	6713      	str	r3, [r2, #112]	; 0x70
 8003d26:	e01c      	b.n	8003d62 <HAL_RCC_OscConfig+0x32a>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	2b05      	cmp	r3, #5
 8003d2e:	d10c      	bne.n	8003d4a <HAL_RCC_OscConfig+0x312>
 8003d30:	4b77      	ldr	r3, [pc, #476]	; (8003f10 <HAL_RCC_OscConfig+0x4d8>)
 8003d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d34:	4a76      	ldr	r2, [pc, #472]	; (8003f10 <HAL_RCC_OscConfig+0x4d8>)
 8003d36:	f043 0304 	orr.w	r3, r3, #4
 8003d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d3c:	4b74      	ldr	r3, [pc, #464]	; (8003f10 <HAL_RCC_OscConfig+0x4d8>)
 8003d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d40:	4a73      	ldr	r2, [pc, #460]	; (8003f10 <HAL_RCC_OscConfig+0x4d8>)
 8003d42:	f043 0301 	orr.w	r3, r3, #1
 8003d46:	6713      	str	r3, [r2, #112]	; 0x70
 8003d48:	e00b      	b.n	8003d62 <HAL_RCC_OscConfig+0x32a>
 8003d4a:	4b71      	ldr	r3, [pc, #452]	; (8003f10 <HAL_RCC_OscConfig+0x4d8>)
 8003d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4e:	4a70      	ldr	r2, [pc, #448]	; (8003f10 <HAL_RCC_OscConfig+0x4d8>)
 8003d50:	f023 0301 	bic.w	r3, r3, #1
 8003d54:	6713      	str	r3, [r2, #112]	; 0x70
 8003d56:	4b6e      	ldr	r3, [pc, #440]	; (8003f10 <HAL_RCC_OscConfig+0x4d8>)
 8003d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5a:	4a6d      	ldr	r2, [pc, #436]	; (8003f10 <HAL_RCC_OscConfig+0x4d8>)
 8003d5c:	f023 0304 	bic.w	r3, r3, #4
 8003d60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d015      	beq.n	8003d96 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6a:	f7fd f9a7 	bl	80010bc <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d70:	e00a      	b.n	8003d88 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d72:	f7fd f9a3 	bl	80010bc <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e0bc      	b.n	8003f02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d88:	4b61      	ldr	r3, [pc, #388]	; (8003f10 <HAL_RCC_OscConfig+0x4d8>)
 8003d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0ee      	beq.n	8003d72 <HAL_RCC_OscConfig+0x33a>
 8003d94:	e014      	b.n	8003dc0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d96:	f7fd f991 	bl	80010bc <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d9c:	e00a      	b.n	8003db4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d9e:	f7fd f98d 	bl	80010bc <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e0a6      	b.n	8003f02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003db4:	4b56      	ldr	r3, [pc, #344]	; (8003f10 <HAL_RCC_OscConfig+0x4d8>)
 8003db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1ee      	bne.n	8003d9e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dc0:	7dfb      	ldrb	r3, [r7, #23]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d105      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc6:	4b52      	ldr	r3, [pc, #328]	; (8003f10 <HAL_RCC_OscConfig+0x4d8>)
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	4a51      	ldr	r2, [pc, #324]	; (8003f10 <HAL_RCC_OscConfig+0x4d8>)
 8003dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dd0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 8092 	beq.w	8003f00 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ddc:	4b4c      	ldr	r3, [pc, #304]	; (8003f10 <HAL_RCC_OscConfig+0x4d8>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 030c 	and.w	r3, r3, #12
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d05c      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d141      	bne.n	8003e74 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df0:	4b48      	ldr	r3, [pc, #288]	; (8003f14 <HAL_RCC_OscConfig+0x4dc>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df6:	f7fd f961 	bl	80010bc <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfc:	e008      	b.n	8003e10 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dfe:	f7fd f95d 	bl	80010bc <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e078      	b.n	8003f02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e10:	4b3f      	ldr	r3, [pc, #252]	; (8003f10 <HAL_RCC_OscConfig+0x4d8>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1f0      	bne.n	8003dfe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	69da      	ldr	r2, [r3, #28]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	019b      	lsls	r3, r3, #6
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e32:	085b      	lsrs	r3, r3, #1
 8003e34:	3b01      	subs	r3, #1
 8003e36:	041b      	lsls	r3, r3, #16
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3e:	061b      	lsls	r3, r3, #24
 8003e40:	4933      	ldr	r1, [pc, #204]	; (8003f10 <HAL_RCC_OscConfig+0x4d8>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e46:	4b33      	ldr	r3, [pc, #204]	; (8003f14 <HAL_RCC_OscConfig+0x4dc>)
 8003e48:	2201      	movs	r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4c:	f7fd f936 	bl	80010bc <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e54:	f7fd f932 	bl	80010bc <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e04d      	b.n	8003f02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e66:	4b2a      	ldr	r3, [pc, #168]	; (8003f10 <HAL_RCC_OscConfig+0x4d8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f0      	beq.n	8003e54 <HAL_RCC_OscConfig+0x41c>
 8003e72:	e045      	b.n	8003f00 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e74:	4b27      	ldr	r3, [pc, #156]	; (8003f14 <HAL_RCC_OscConfig+0x4dc>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7a:	f7fd f91f 	bl	80010bc <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e82:	f7fd f91b 	bl	80010bc <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e036      	b.n	8003f02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e94:	4b1e      	ldr	r3, [pc, #120]	; (8003f10 <HAL_RCC_OscConfig+0x4d8>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1f0      	bne.n	8003e82 <HAL_RCC_OscConfig+0x44a>
 8003ea0:	e02e      	b.n	8003f00 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d101      	bne.n	8003eae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e029      	b.n	8003f02 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003eae:	4b18      	ldr	r3, [pc, #96]	; (8003f10 <HAL_RCC_OscConfig+0x4d8>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d11c      	bne.n	8003efc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d115      	bne.n	8003efc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d10d      	bne.n	8003efc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d106      	bne.n	8003efc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d001      	beq.n	8003f00 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40007000 	.word	0x40007000
 8003f10:	40023800 	.word	0x40023800
 8003f14:	42470060 	.word	0x42470060

08003f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e0cc      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f2c:	4b68      	ldr	r3, [pc, #416]	; (80040d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 030f 	and.w	r3, r3, #15
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d90c      	bls.n	8003f54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f3a:	4b65      	ldr	r3, [pc, #404]	; (80040d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f42:	4b63      	ldr	r3, [pc, #396]	; (80040d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d001      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e0b8      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d020      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f6c:	4b59      	ldr	r3, [pc, #356]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	4a58      	ldr	r2, [pc, #352]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d005      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f84:	4b53      	ldr	r3, [pc, #332]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	4a52      	ldr	r2, [pc, #328]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f90:	4b50      	ldr	r3, [pc, #320]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	494d      	ldr	r1, [pc, #308]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d044      	beq.n	8004038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d107      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fb6:	4b47      	ldr	r3, [pc, #284]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d119      	bne.n	8003ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e07f      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d003      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fd2:	2b03      	cmp	r3, #3
 8003fd4:	d107      	bne.n	8003fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd6:	4b3f      	ldr	r3, [pc, #252]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d109      	bne.n	8003ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e06f      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe6:	4b3b      	ldr	r3, [pc, #236]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e067      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ff6:	4b37      	ldr	r3, [pc, #220]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f023 0203 	bic.w	r2, r3, #3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	4934      	ldr	r1, [pc, #208]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004004:	4313      	orrs	r3, r2
 8004006:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004008:	f7fd f858 	bl	80010bc <HAL_GetTick>
 800400c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800400e:	e00a      	b.n	8004026 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004010:	f7fd f854 	bl	80010bc <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	f241 3288 	movw	r2, #5000	; 0x1388
 800401e:	4293      	cmp	r3, r2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e04f      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004026:	4b2b      	ldr	r3, [pc, #172]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 020c 	and.w	r2, r3, #12
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	429a      	cmp	r2, r3
 8004036:	d1eb      	bne.n	8004010 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004038:	4b25      	ldr	r3, [pc, #148]	; (80040d0 <HAL_RCC_ClockConfig+0x1b8>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 030f 	and.w	r3, r3, #15
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	429a      	cmp	r2, r3
 8004044:	d20c      	bcs.n	8004060 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004046:	4b22      	ldr	r3, [pc, #136]	; (80040d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800404e:	4b20      	ldr	r3, [pc, #128]	; (80040d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 030f 	and.w	r3, r3, #15
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	429a      	cmp	r2, r3
 800405a:	d001      	beq.n	8004060 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e032      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b00      	cmp	r3, #0
 800406a:	d008      	beq.n	800407e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800406c:	4b19      	ldr	r3, [pc, #100]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	4916      	ldr	r1, [pc, #88]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	4313      	orrs	r3, r2
 800407c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0308 	and.w	r3, r3, #8
 8004086:	2b00      	cmp	r3, #0
 8004088:	d009      	beq.n	800409e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800408a:	4b12      	ldr	r3, [pc, #72]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	490e      	ldr	r1, [pc, #56]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	4313      	orrs	r3, r2
 800409c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800409e:	f000 f821 	bl	80040e4 <HAL_RCC_GetSysClockFreq>
 80040a2:	4601      	mov	r1, r0
 80040a4:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	091b      	lsrs	r3, r3, #4
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	4a0a      	ldr	r2, [pc, #40]	; (80040d8 <HAL_RCC_ClockConfig+0x1c0>)
 80040b0:	5cd3      	ldrb	r3, [r2, r3]
 80040b2:	fa21 f303 	lsr.w	r3, r1, r3
 80040b6:	4a09      	ldr	r2, [pc, #36]	; (80040dc <HAL_RCC_ClockConfig+0x1c4>)
 80040b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040ba:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <HAL_RCC_ClockConfig+0x1c8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fc ffb8 	bl	8001034 <HAL_InitTick>

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	40023c00 	.word	0x40023c00
 80040d4:	40023800 	.word	0x40023800
 80040d8:	0800947c 	.word	0x0800947c
 80040dc:	20000000 	.word	0x20000000
 80040e0:	20000004 	.word	0x20000004

080040e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	607b      	str	r3, [r7, #4]
 80040ee:	2300      	movs	r3, #0
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	2300      	movs	r3, #0
 80040f4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040fa:	4b63      	ldr	r3, [pc, #396]	; (8004288 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 030c 	and.w	r3, r3, #12
 8004102:	2b04      	cmp	r3, #4
 8004104:	d007      	beq.n	8004116 <HAL_RCC_GetSysClockFreq+0x32>
 8004106:	2b08      	cmp	r3, #8
 8004108:	d008      	beq.n	800411c <HAL_RCC_GetSysClockFreq+0x38>
 800410a:	2b00      	cmp	r3, #0
 800410c:	f040 80b4 	bne.w	8004278 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004110:	4b5e      	ldr	r3, [pc, #376]	; (800428c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004112:	60bb      	str	r3, [r7, #8]
       break;
 8004114:	e0b3      	b.n	800427e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004116:	4b5e      	ldr	r3, [pc, #376]	; (8004290 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004118:	60bb      	str	r3, [r7, #8]
      break;
 800411a:	e0b0      	b.n	800427e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800411c:	4b5a      	ldr	r3, [pc, #360]	; (8004288 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004124:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004126:	4b58      	ldr	r3, [pc, #352]	; (8004288 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d04a      	beq.n	80041c8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004132:	4b55      	ldr	r3, [pc, #340]	; (8004288 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	099b      	lsrs	r3, r3, #6
 8004138:	f04f 0400 	mov.w	r4, #0
 800413c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	ea03 0501 	and.w	r5, r3, r1
 8004148:	ea04 0602 	and.w	r6, r4, r2
 800414c:	4629      	mov	r1, r5
 800414e:	4632      	mov	r2, r6
 8004150:	f04f 0300 	mov.w	r3, #0
 8004154:	f04f 0400 	mov.w	r4, #0
 8004158:	0154      	lsls	r4, r2, #5
 800415a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800415e:	014b      	lsls	r3, r1, #5
 8004160:	4619      	mov	r1, r3
 8004162:	4622      	mov	r2, r4
 8004164:	1b49      	subs	r1, r1, r5
 8004166:	eb62 0206 	sbc.w	r2, r2, r6
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	f04f 0400 	mov.w	r4, #0
 8004172:	0194      	lsls	r4, r2, #6
 8004174:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004178:	018b      	lsls	r3, r1, #6
 800417a:	1a5b      	subs	r3, r3, r1
 800417c:	eb64 0402 	sbc.w	r4, r4, r2
 8004180:	f04f 0100 	mov.w	r1, #0
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	00e2      	lsls	r2, r4, #3
 800418a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800418e:	00d9      	lsls	r1, r3, #3
 8004190:	460b      	mov	r3, r1
 8004192:	4614      	mov	r4, r2
 8004194:	195b      	adds	r3, r3, r5
 8004196:	eb44 0406 	adc.w	r4, r4, r6
 800419a:	f04f 0100 	mov.w	r1, #0
 800419e:	f04f 0200 	mov.w	r2, #0
 80041a2:	0262      	lsls	r2, r4, #9
 80041a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80041a8:	0259      	lsls	r1, r3, #9
 80041aa:	460b      	mov	r3, r1
 80041ac:	4614      	mov	r4, r2
 80041ae:	4618      	mov	r0, r3
 80041b0:	4621      	mov	r1, r4
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f04f 0400 	mov.w	r4, #0
 80041b8:	461a      	mov	r2, r3
 80041ba:	4623      	mov	r3, r4
 80041bc:	f7fc f804 	bl	80001c8 <__aeabi_uldivmod>
 80041c0:	4603      	mov	r3, r0
 80041c2:	460c      	mov	r4, r1
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	e049      	b.n	800425c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c8:	4b2f      	ldr	r3, [pc, #188]	; (8004288 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	099b      	lsrs	r3, r3, #6
 80041ce:	f04f 0400 	mov.w	r4, #0
 80041d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041d6:	f04f 0200 	mov.w	r2, #0
 80041da:	ea03 0501 	and.w	r5, r3, r1
 80041de:	ea04 0602 	and.w	r6, r4, r2
 80041e2:	4629      	mov	r1, r5
 80041e4:	4632      	mov	r2, r6
 80041e6:	f04f 0300 	mov.w	r3, #0
 80041ea:	f04f 0400 	mov.w	r4, #0
 80041ee:	0154      	lsls	r4, r2, #5
 80041f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80041f4:	014b      	lsls	r3, r1, #5
 80041f6:	4619      	mov	r1, r3
 80041f8:	4622      	mov	r2, r4
 80041fa:	1b49      	subs	r1, r1, r5
 80041fc:	eb62 0206 	sbc.w	r2, r2, r6
 8004200:	f04f 0300 	mov.w	r3, #0
 8004204:	f04f 0400 	mov.w	r4, #0
 8004208:	0194      	lsls	r4, r2, #6
 800420a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800420e:	018b      	lsls	r3, r1, #6
 8004210:	1a5b      	subs	r3, r3, r1
 8004212:	eb64 0402 	sbc.w	r4, r4, r2
 8004216:	f04f 0100 	mov.w	r1, #0
 800421a:	f04f 0200 	mov.w	r2, #0
 800421e:	00e2      	lsls	r2, r4, #3
 8004220:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004224:	00d9      	lsls	r1, r3, #3
 8004226:	460b      	mov	r3, r1
 8004228:	4614      	mov	r4, r2
 800422a:	195b      	adds	r3, r3, r5
 800422c:	eb44 0406 	adc.w	r4, r4, r6
 8004230:	f04f 0100 	mov.w	r1, #0
 8004234:	f04f 0200 	mov.w	r2, #0
 8004238:	02a2      	lsls	r2, r4, #10
 800423a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800423e:	0299      	lsls	r1, r3, #10
 8004240:	460b      	mov	r3, r1
 8004242:	4614      	mov	r4, r2
 8004244:	4618      	mov	r0, r3
 8004246:	4621      	mov	r1, r4
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f04f 0400 	mov.w	r4, #0
 800424e:	461a      	mov	r2, r3
 8004250:	4623      	mov	r3, r4
 8004252:	f7fb ffb9 	bl	80001c8 <__aeabi_uldivmod>
 8004256:	4603      	mov	r3, r0
 8004258:	460c      	mov	r4, r1
 800425a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800425c:	4b0a      	ldr	r3, [pc, #40]	; (8004288 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	0c1b      	lsrs	r3, r3, #16
 8004262:	f003 0303 	and.w	r3, r3, #3
 8004266:	3301      	adds	r3, #1
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	fbb2 f3f3 	udiv	r3, r2, r3
 8004274:	60bb      	str	r3, [r7, #8]
      break;
 8004276:	e002      	b.n	800427e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004278:	4b04      	ldr	r3, [pc, #16]	; (800428c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800427a:	60bb      	str	r3, [r7, #8]
      break;
 800427c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800427e:	68bb      	ldr	r3, [r7, #8]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004288:	40023800 	.word	0x40023800
 800428c:	00f42400 	.word	0x00f42400
 8004290:	007a1200 	.word	0x007a1200

08004294 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004298:	4b03      	ldr	r3, [pc, #12]	; (80042a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800429a:	681b      	ldr	r3, [r3, #0]
}
 800429c:	4618      	mov	r0, r3
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	20000000 	.word	0x20000000

080042ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042b0:	f7ff fff0 	bl	8004294 <HAL_RCC_GetHCLKFreq>
 80042b4:	4601      	mov	r1, r0
 80042b6:	4b05      	ldr	r3, [pc, #20]	; (80042cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	0a9b      	lsrs	r3, r3, #10
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	4a03      	ldr	r2, [pc, #12]	; (80042d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042c2:	5cd3      	ldrb	r3, [r2, r3]
 80042c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	40023800 	.word	0x40023800
 80042d0:	0800948c 	.word	0x0800948c

080042d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042d8:	f7ff ffdc 	bl	8004294 <HAL_RCC_GetHCLKFreq>
 80042dc:	4601      	mov	r1, r0
 80042de:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	0b5b      	lsrs	r3, r3, #13
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	4a03      	ldr	r2, [pc, #12]	; (80042f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ea:	5cd3      	ldrb	r3, [r2, r3]
 80042ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40023800 	.word	0x40023800
 80042f8:	0800948c 	.word	0x0800948c

080042fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e056      	b.n	80043bc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d106      	bne.n	800432e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7fc fc67 	bl	8000bfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2202      	movs	r2, #2
 8004332:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004344:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	431a      	orrs	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	431a      	orrs	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	69db      	ldr	r3, [r3, #28]
 8004370:	431a      	orrs	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	ea42 0103 	orr.w	r1, r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	0c1b      	lsrs	r3, r3, #16
 800438c:	f003 0104 	and.w	r1, r3, #4
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	69da      	ldr	r2, [r3, #28]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e01d      	b.n	8004412 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d106      	bne.n	80043f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7fc fd42 	bl	8000e74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2202      	movs	r2, #2
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3304      	adds	r3, #4
 8004400:	4619      	mov	r1, r3
 8004402:	4610      	mov	r0, r2
 8004404:	f000 f95e 	bl	80046c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800441a:	b480      	push	{r7}
 800441c:	b085      	sub	sp, #20
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f042 0201 	orr.w	r2, r2, #1
 8004430:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2b06      	cmp	r3, #6
 8004442:	d007      	beq.n	8004454 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0201 	orr.w	r2, r2, #1
 8004452:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b082      	sub	sp, #8
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b02      	cmp	r3, #2
 8004476:	d122      	bne.n	80044be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b02      	cmp	r3, #2
 8004484:	d11b      	bne.n	80044be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f06f 0202 	mvn.w	r2, #2
 800448e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	f003 0303 	and.w	r3, r3, #3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f8ee 	bl	8004686 <HAL_TIM_IC_CaptureCallback>
 80044aa:	e005      	b.n	80044b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 f8e0 	bl	8004672 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f8f1 	bl	800469a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b04      	cmp	r3, #4
 80044ca:	d122      	bne.n	8004512 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f003 0304 	and.w	r3, r3, #4
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	d11b      	bne.n	8004512 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f06f 0204 	mvn.w	r2, #4
 80044e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f8c4 	bl	8004686 <HAL_TIM_IC_CaptureCallback>
 80044fe:	e005      	b.n	800450c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f8b6 	bl	8004672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f8c7 	bl	800469a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	f003 0308 	and.w	r3, r3, #8
 800451c:	2b08      	cmp	r3, #8
 800451e:	d122      	bne.n	8004566 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b08      	cmp	r3, #8
 800452c:	d11b      	bne.n	8004566 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f06f 0208 	mvn.w	r2, #8
 8004536:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2204      	movs	r2, #4
 800453c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	f003 0303 	and.w	r3, r3, #3
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f89a 	bl	8004686 <HAL_TIM_IC_CaptureCallback>
 8004552:	e005      	b.n	8004560 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f88c 	bl	8004672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f89d 	bl	800469a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f003 0310 	and.w	r3, r3, #16
 8004570:	2b10      	cmp	r3, #16
 8004572:	d122      	bne.n	80045ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f003 0310 	and.w	r3, r3, #16
 800457e:	2b10      	cmp	r3, #16
 8004580:	d11b      	bne.n	80045ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f06f 0210 	mvn.w	r2, #16
 800458a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2208      	movs	r2, #8
 8004590:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f870 	bl	8004686 <HAL_TIM_IC_CaptureCallback>
 80045a6:	e005      	b.n	80045b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f862 	bl	8004672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f873 	bl	800469a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d10e      	bne.n	80045e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d107      	bne.n	80045e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f06f 0201 	mvn.w	r2, #1
 80045de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f7fc fa89 	bl	8000af8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f0:	2b80      	cmp	r3, #128	; 0x80
 80045f2:	d10e      	bne.n	8004612 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fe:	2b80      	cmp	r3, #128	; 0x80
 8004600:	d107      	bne.n	8004612 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800460a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 f97f 	bl	8004910 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461c:	2b40      	cmp	r3, #64	; 0x40
 800461e:	d10e      	bne.n	800463e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462a:	2b40      	cmp	r3, #64	; 0x40
 800462c:	d107      	bne.n	800463e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f838 	bl	80046ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	f003 0320 	and.w	r3, r3, #32
 8004648:	2b20      	cmp	r3, #32
 800464a:	d10e      	bne.n	800466a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f003 0320 	and.w	r3, r3, #32
 8004656:	2b20      	cmp	r3, #32
 8004658:	d107      	bne.n	800466a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f06f 0220 	mvn.w	r2, #32
 8004662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f949 	bl	80048fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800466a:	bf00      	nop
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
	...

080046c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a40      	ldr	r2, [pc, #256]	; (80047d8 <TIM_Base_SetConfig+0x114>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d013      	beq.n	8004704 <TIM_Base_SetConfig+0x40>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e2:	d00f      	beq.n	8004704 <TIM_Base_SetConfig+0x40>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a3d      	ldr	r2, [pc, #244]	; (80047dc <TIM_Base_SetConfig+0x118>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d00b      	beq.n	8004704 <TIM_Base_SetConfig+0x40>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a3c      	ldr	r2, [pc, #240]	; (80047e0 <TIM_Base_SetConfig+0x11c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d007      	beq.n	8004704 <TIM_Base_SetConfig+0x40>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a3b      	ldr	r2, [pc, #236]	; (80047e4 <TIM_Base_SetConfig+0x120>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d003      	beq.n	8004704 <TIM_Base_SetConfig+0x40>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a3a      	ldr	r2, [pc, #232]	; (80047e8 <TIM_Base_SetConfig+0x124>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d108      	bne.n	8004716 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	4313      	orrs	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a2f      	ldr	r2, [pc, #188]	; (80047d8 <TIM_Base_SetConfig+0x114>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d02b      	beq.n	8004776 <TIM_Base_SetConfig+0xb2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004724:	d027      	beq.n	8004776 <TIM_Base_SetConfig+0xb2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a2c      	ldr	r2, [pc, #176]	; (80047dc <TIM_Base_SetConfig+0x118>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d023      	beq.n	8004776 <TIM_Base_SetConfig+0xb2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a2b      	ldr	r2, [pc, #172]	; (80047e0 <TIM_Base_SetConfig+0x11c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d01f      	beq.n	8004776 <TIM_Base_SetConfig+0xb2>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a2a      	ldr	r2, [pc, #168]	; (80047e4 <TIM_Base_SetConfig+0x120>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d01b      	beq.n	8004776 <TIM_Base_SetConfig+0xb2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a29      	ldr	r2, [pc, #164]	; (80047e8 <TIM_Base_SetConfig+0x124>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d017      	beq.n	8004776 <TIM_Base_SetConfig+0xb2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a28      	ldr	r2, [pc, #160]	; (80047ec <TIM_Base_SetConfig+0x128>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d013      	beq.n	8004776 <TIM_Base_SetConfig+0xb2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a27      	ldr	r2, [pc, #156]	; (80047f0 <TIM_Base_SetConfig+0x12c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00f      	beq.n	8004776 <TIM_Base_SetConfig+0xb2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a26      	ldr	r2, [pc, #152]	; (80047f4 <TIM_Base_SetConfig+0x130>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00b      	beq.n	8004776 <TIM_Base_SetConfig+0xb2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a25      	ldr	r2, [pc, #148]	; (80047f8 <TIM_Base_SetConfig+0x134>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d007      	beq.n	8004776 <TIM_Base_SetConfig+0xb2>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a24      	ldr	r2, [pc, #144]	; (80047fc <TIM_Base_SetConfig+0x138>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d003      	beq.n	8004776 <TIM_Base_SetConfig+0xb2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a23      	ldr	r2, [pc, #140]	; (8004800 <TIM_Base_SetConfig+0x13c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d108      	bne.n	8004788 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800477c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	4313      	orrs	r3, r2
 8004786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a0a      	ldr	r2, [pc, #40]	; (80047d8 <TIM_Base_SetConfig+0x114>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d003      	beq.n	80047bc <TIM_Base_SetConfig+0xf8>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a0c      	ldr	r2, [pc, #48]	; (80047e8 <TIM_Base_SetConfig+0x124>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d103      	bne.n	80047c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	691a      	ldr	r2, [r3, #16]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	615a      	str	r2, [r3, #20]
}
 80047ca:	bf00      	nop
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	40010000 	.word	0x40010000
 80047dc:	40000400 	.word	0x40000400
 80047e0:	40000800 	.word	0x40000800
 80047e4:	40000c00 	.word	0x40000c00
 80047e8:	40010400 	.word	0x40010400
 80047ec:	40014000 	.word	0x40014000
 80047f0:	40014400 	.word	0x40014400
 80047f4:	40014800 	.word	0x40014800
 80047f8:	40001800 	.word	0x40001800
 80047fc:	40001c00 	.word	0x40001c00
 8004800:	40002000 	.word	0x40002000

08004804 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004818:	2302      	movs	r3, #2
 800481a:	e05a      	b.n	80048d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004842:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	4313      	orrs	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a21      	ldr	r2, [pc, #132]	; (80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d022      	beq.n	80048a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004868:	d01d      	beq.n	80048a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a1d      	ldr	r2, [pc, #116]	; (80048e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d018      	beq.n	80048a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a1b      	ldr	r2, [pc, #108]	; (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d013      	beq.n	80048a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a1a      	ldr	r2, [pc, #104]	; (80048ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d00e      	beq.n	80048a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a18      	ldr	r2, [pc, #96]	; (80048f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d009      	beq.n	80048a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a17      	ldr	r2, [pc, #92]	; (80048f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d004      	beq.n	80048a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a15      	ldr	r2, [pc, #84]	; (80048f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d10c      	bne.n	80048c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	40010000 	.word	0x40010000
 80048e4:	40000400 	.word	0x40000400
 80048e8:	40000800 	.word	0x40000800
 80048ec:	40000c00 	.word	0x40000c00
 80048f0:	40010400 	.word	0x40010400
 80048f4:	40014000 	.word	0x40014000
 80048f8:	40001800 	.word	0x40001800

080048fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e03f      	b.n	80049b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d106      	bne.n	8004950 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7fc fade 	bl	8000f0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2224      	movs	r2, #36	; 0x24
 8004954:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004966:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 fa69 	bl	8004e40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	691a      	ldr	r2, [r3, #16]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800497c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	695a      	ldr	r2, [r3, #20]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800498c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68da      	ldr	r2, [r3, #12]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800499c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
	...

080049c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b088      	sub	sp, #32
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f003 030f 	and.w	r3, r3, #15
 80049ee:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10d      	bne.n	8004a12 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	f003 0320 	and.w	r3, r3, #32
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d008      	beq.n	8004a12 <HAL_UART_IRQHandler+0x52>
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	f003 0320 	and.w	r3, r3, #32
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f996 	bl	8004d3c <UART_Receive_IT>
      return;
 8004a10:	e0d1      	b.n	8004bb6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 80b0 	beq.w	8004b7a <HAL_UART_IRQHandler+0x1ba>
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d105      	bne.n	8004a30 <HAL_UART_IRQHandler+0x70>
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 80a5 	beq.w	8004b7a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <HAL_UART_IRQHandler+0x90>
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d005      	beq.n	8004a50 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a48:	f043 0201 	orr.w	r2, r3, #1
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <HAL_UART_IRQHandler+0xb0>
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f003 0301 	and.w	r3, r3, #1
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d005      	beq.n	8004a70 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a68:	f043 0202 	orr.w	r2, r3, #2
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00a      	beq.n	8004a90 <HAL_UART_IRQHandler+0xd0>
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d005      	beq.n	8004a90 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a88:	f043 0204 	orr.w	r2, r3, #4
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	f003 0308 	and.w	r3, r3, #8
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00f      	beq.n	8004aba <HAL_UART_IRQHandler+0xfa>
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	f003 0320 	and.w	r3, r3, #32
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d104      	bne.n	8004aae <HAL_UART_IRQHandler+0xee>
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d005      	beq.n	8004aba <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab2:	f043 0208 	orr.w	r2, r3, #8
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d078      	beq.n	8004bb4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	f003 0320 	and.w	r3, r3, #32
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d007      	beq.n	8004adc <HAL_UART_IRQHandler+0x11c>
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	f003 0320 	and.w	r3, r3, #32
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d002      	beq.n	8004adc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f930 	bl	8004d3c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae6:	2b40      	cmp	r3, #64	; 0x40
 8004ae8:	bf0c      	ite	eq
 8004aea:	2301      	moveq	r3, #1
 8004aec:	2300      	movne	r3, #0
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d102      	bne.n	8004b04 <HAL_UART_IRQHandler+0x144>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d031      	beq.n	8004b68 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f879 	bl	8004bfc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b14:	2b40      	cmp	r3, #64	; 0x40
 8004b16:	d123      	bne.n	8004b60 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	695a      	ldr	r2, [r3, #20]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b26:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d013      	beq.n	8004b58 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b34:	4a21      	ldr	r2, [pc, #132]	; (8004bbc <HAL_UART_IRQHandler+0x1fc>)
 8004b36:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7fc ff58 	bl	80019f2 <HAL_DMA_Abort_IT>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d016      	beq.n	8004b76 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b52:	4610      	mov	r0, r2
 8004b54:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b56:	e00e      	b.n	8004b76 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f845 	bl	8004be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b5e:	e00a      	b.n	8004b76 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f841 	bl	8004be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b66:	e006      	b.n	8004b76 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f83d 	bl	8004be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004b74:	e01e      	b.n	8004bb4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b76:	bf00      	nop
    return;
 8004b78:	e01c      	b.n	8004bb4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d008      	beq.n	8004b96 <HAL_UART_IRQHandler+0x1d6>
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f866 	bl	8004c60 <UART_Transmit_IT>
    return;
 8004b94:	e00f      	b.n	8004bb6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00a      	beq.n	8004bb6 <HAL_UART_IRQHandler+0x1f6>
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d005      	beq.n	8004bb6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f8ae 	bl	8004d0c <UART_EndTransmit_IT>
    return;
 8004bb0:	bf00      	nop
 8004bb2:	e000      	b.n	8004bb6 <HAL_UART_IRQHandler+0x1f6>
    return;
 8004bb4:	bf00      	nop
  }
}
 8004bb6:	3720      	adds	r7, #32
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	08004c39 	.word	0x08004c39

08004bc0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c12:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695a      	ldr	r2, [r3, #20]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0201 	bic.w	r2, r2, #1
 8004c22:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f7ff ffc8 	bl	8004be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c58:	bf00      	nop
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b21      	cmp	r3, #33	; 0x21
 8004c72:	d144      	bne.n	8004cfe <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c7c:	d11a      	bne.n	8004cb4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c92:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d105      	bne.n	8004ca8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	1c9a      	adds	r2, r3, #2
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	621a      	str	r2, [r3, #32]
 8004ca6:	e00e      	b.n	8004cc6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	621a      	str	r2, [r3, #32]
 8004cb2:	e008      	b.n	8004cc6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	1c59      	adds	r1, r3, #1
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6211      	str	r1, [r2, #32]
 8004cbe:	781a      	ldrb	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10f      	bne.n	8004cfa <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ce8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68da      	ldr	r2, [r3, #12]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cf8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	e000      	b.n	8004d00 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004cfe:	2302      	movs	r3, #2
  }
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68da      	ldr	r2, [r3, #12]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d22:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2220      	movs	r2, #32
 8004d28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7ff ff47 	bl	8004bc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b22      	cmp	r3, #34	; 0x22
 8004d4e:	d171      	bne.n	8004e34 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d58:	d123      	bne.n	8004da2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10e      	bne.n	8004d86 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7e:	1c9a      	adds	r2, r3, #2
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	629a      	str	r2, [r3, #40]	; 0x28
 8004d84:	e029      	b.n	8004dda <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	629a      	str	r2, [r3, #40]	; 0x28
 8004da0:	e01b      	b.n	8004dda <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10a      	bne.n	8004dc0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6858      	ldr	r0, [r3, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db4:	1c59      	adds	r1, r3, #1
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6291      	str	r1, [r2, #40]	; 0x28
 8004dba:	b2c2      	uxtb	r2, r0
 8004dbc:	701a      	strb	r2, [r3, #0]
 8004dbe:	e00c      	b.n	8004dda <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dcc:	1c58      	adds	r0, r3, #1
 8004dce:	6879      	ldr	r1, [r7, #4]
 8004dd0:	6288      	str	r0, [r1, #40]	; 0x28
 8004dd2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	3b01      	subs	r3, #1
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	4619      	mov	r1, r3
 8004de8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d120      	bne.n	8004e30 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 0220 	bic.w	r2, r2, #32
 8004dfc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68da      	ldr	r2, [r3, #12]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	695a      	ldr	r2, [r3, #20]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0201 	bic.w	r2, r2, #1
 8004e1c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2220      	movs	r2, #32
 8004e22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7ff fed4 	bl	8004bd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	e002      	b.n	8004e36 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	e000      	b.n	8004e36 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004e34:	2302      	movs	r3, #2
  }
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
	...

08004e40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e44:	b085      	sub	sp, #20
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68da      	ldr	r2, [r3, #12]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004e82:	f023 030c 	bic.w	r3, r3, #12
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	6812      	ldr	r2, [r2, #0]
 8004e8a:	68f9      	ldr	r1, [r7, #12]
 8004e8c:	430b      	orrs	r3, r1
 8004e8e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	699a      	ldr	r2, [r3, #24]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eae:	f040 818b 	bne.w	80051c8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4ac1      	ldr	r2, [pc, #772]	; (80051bc <UART_SetConfig+0x37c>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d005      	beq.n	8004ec8 <UART_SetConfig+0x88>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4abf      	ldr	r2, [pc, #764]	; (80051c0 <UART_SetConfig+0x380>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	f040 80bd 	bne.w	8005042 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ec8:	f7ff fa04 	bl	80042d4 <HAL_RCC_GetPCLK2Freq>
 8004ecc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	461d      	mov	r5, r3
 8004ed2:	f04f 0600 	mov.w	r6, #0
 8004ed6:	46a8      	mov	r8, r5
 8004ed8:	46b1      	mov	r9, r6
 8004eda:	eb18 0308 	adds.w	r3, r8, r8
 8004ede:	eb49 0409 	adc.w	r4, r9, r9
 8004ee2:	4698      	mov	r8, r3
 8004ee4:	46a1      	mov	r9, r4
 8004ee6:	eb18 0805 	adds.w	r8, r8, r5
 8004eea:	eb49 0906 	adc.w	r9, r9, r6
 8004eee:	f04f 0100 	mov.w	r1, #0
 8004ef2:	f04f 0200 	mov.w	r2, #0
 8004ef6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004efa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004efe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004f02:	4688      	mov	r8, r1
 8004f04:	4691      	mov	r9, r2
 8004f06:	eb18 0005 	adds.w	r0, r8, r5
 8004f0a:	eb49 0106 	adc.w	r1, r9, r6
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	461d      	mov	r5, r3
 8004f14:	f04f 0600 	mov.w	r6, #0
 8004f18:	196b      	adds	r3, r5, r5
 8004f1a:	eb46 0406 	adc.w	r4, r6, r6
 8004f1e:	461a      	mov	r2, r3
 8004f20:	4623      	mov	r3, r4
 8004f22:	f7fb f951 	bl	80001c8 <__aeabi_uldivmod>
 8004f26:	4603      	mov	r3, r0
 8004f28:	460c      	mov	r4, r1
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	4ba5      	ldr	r3, [pc, #660]	; (80051c4 <UART_SetConfig+0x384>)
 8004f2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f32:	095b      	lsrs	r3, r3, #5
 8004f34:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	461d      	mov	r5, r3
 8004f3c:	f04f 0600 	mov.w	r6, #0
 8004f40:	46a9      	mov	r9, r5
 8004f42:	46b2      	mov	sl, r6
 8004f44:	eb19 0309 	adds.w	r3, r9, r9
 8004f48:	eb4a 040a 	adc.w	r4, sl, sl
 8004f4c:	4699      	mov	r9, r3
 8004f4e:	46a2      	mov	sl, r4
 8004f50:	eb19 0905 	adds.w	r9, r9, r5
 8004f54:	eb4a 0a06 	adc.w	sl, sl, r6
 8004f58:	f04f 0100 	mov.w	r1, #0
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f64:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f68:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f6c:	4689      	mov	r9, r1
 8004f6e:	4692      	mov	sl, r2
 8004f70:	eb19 0005 	adds.w	r0, r9, r5
 8004f74:	eb4a 0106 	adc.w	r1, sl, r6
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	461d      	mov	r5, r3
 8004f7e:	f04f 0600 	mov.w	r6, #0
 8004f82:	196b      	adds	r3, r5, r5
 8004f84:	eb46 0406 	adc.w	r4, r6, r6
 8004f88:	461a      	mov	r2, r3
 8004f8a:	4623      	mov	r3, r4
 8004f8c:	f7fb f91c 	bl	80001c8 <__aeabi_uldivmod>
 8004f90:	4603      	mov	r3, r0
 8004f92:	460c      	mov	r4, r1
 8004f94:	461a      	mov	r2, r3
 8004f96:	4b8b      	ldr	r3, [pc, #556]	; (80051c4 <UART_SetConfig+0x384>)
 8004f98:	fba3 1302 	umull	r1, r3, r3, r2
 8004f9c:	095b      	lsrs	r3, r3, #5
 8004f9e:	2164      	movs	r1, #100	; 0x64
 8004fa0:	fb01 f303 	mul.w	r3, r1, r3
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	3332      	adds	r3, #50	; 0x32
 8004faa:	4a86      	ldr	r2, [pc, #536]	; (80051c4 <UART_SetConfig+0x384>)
 8004fac:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb0:	095b      	lsrs	r3, r3, #5
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fb8:	4498      	add	r8, r3
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	461d      	mov	r5, r3
 8004fbe:	f04f 0600 	mov.w	r6, #0
 8004fc2:	46a9      	mov	r9, r5
 8004fc4:	46b2      	mov	sl, r6
 8004fc6:	eb19 0309 	adds.w	r3, r9, r9
 8004fca:	eb4a 040a 	adc.w	r4, sl, sl
 8004fce:	4699      	mov	r9, r3
 8004fd0:	46a2      	mov	sl, r4
 8004fd2:	eb19 0905 	adds.w	r9, r9, r5
 8004fd6:	eb4a 0a06 	adc.w	sl, sl, r6
 8004fda:	f04f 0100 	mov.w	r1, #0
 8004fde:	f04f 0200 	mov.w	r2, #0
 8004fe2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fe6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004fea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fee:	4689      	mov	r9, r1
 8004ff0:	4692      	mov	sl, r2
 8004ff2:	eb19 0005 	adds.w	r0, r9, r5
 8004ff6:	eb4a 0106 	adc.w	r1, sl, r6
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	461d      	mov	r5, r3
 8005000:	f04f 0600 	mov.w	r6, #0
 8005004:	196b      	adds	r3, r5, r5
 8005006:	eb46 0406 	adc.w	r4, r6, r6
 800500a:	461a      	mov	r2, r3
 800500c:	4623      	mov	r3, r4
 800500e:	f7fb f8db 	bl	80001c8 <__aeabi_uldivmod>
 8005012:	4603      	mov	r3, r0
 8005014:	460c      	mov	r4, r1
 8005016:	461a      	mov	r2, r3
 8005018:	4b6a      	ldr	r3, [pc, #424]	; (80051c4 <UART_SetConfig+0x384>)
 800501a:	fba3 1302 	umull	r1, r3, r3, r2
 800501e:	095b      	lsrs	r3, r3, #5
 8005020:	2164      	movs	r1, #100	; 0x64
 8005022:	fb01 f303 	mul.w	r3, r1, r3
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	3332      	adds	r3, #50	; 0x32
 800502c:	4a65      	ldr	r2, [pc, #404]	; (80051c4 <UART_SetConfig+0x384>)
 800502e:	fba2 2303 	umull	r2, r3, r2, r3
 8005032:	095b      	lsrs	r3, r3, #5
 8005034:	f003 0207 	and.w	r2, r3, #7
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4442      	add	r2, r8
 800503e:	609a      	str	r2, [r3, #8]
 8005040:	e26f      	b.n	8005522 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005042:	f7ff f933 	bl	80042ac <HAL_RCC_GetPCLK1Freq>
 8005046:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	461d      	mov	r5, r3
 800504c:	f04f 0600 	mov.w	r6, #0
 8005050:	46a8      	mov	r8, r5
 8005052:	46b1      	mov	r9, r6
 8005054:	eb18 0308 	adds.w	r3, r8, r8
 8005058:	eb49 0409 	adc.w	r4, r9, r9
 800505c:	4698      	mov	r8, r3
 800505e:	46a1      	mov	r9, r4
 8005060:	eb18 0805 	adds.w	r8, r8, r5
 8005064:	eb49 0906 	adc.w	r9, r9, r6
 8005068:	f04f 0100 	mov.w	r1, #0
 800506c:	f04f 0200 	mov.w	r2, #0
 8005070:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005074:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005078:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800507c:	4688      	mov	r8, r1
 800507e:	4691      	mov	r9, r2
 8005080:	eb18 0005 	adds.w	r0, r8, r5
 8005084:	eb49 0106 	adc.w	r1, r9, r6
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	461d      	mov	r5, r3
 800508e:	f04f 0600 	mov.w	r6, #0
 8005092:	196b      	adds	r3, r5, r5
 8005094:	eb46 0406 	adc.w	r4, r6, r6
 8005098:	461a      	mov	r2, r3
 800509a:	4623      	mov	r3, r4
 800509c:	f7fb f894 	bl	80001c8 <__aeabi_uldivmod>
 80050a0:	4603      	mov	r3, r0
 80050a2:	460c      	mov	r4, r1
 80050a4:	461a      	mov	r2, r3
 80050a6:	4b47      	ldr	r3, [pc, #284]	; (80051c4 <UART_SetConfig+0x384>)
 80050a8:	fba3 2302 	umull	r2, r3, r3, r2
 80050ac:	095b      	lsrs	r3, r3, #5
 80050ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	461d      	mov	r5, r3
 80050b6:	f04f 0600 	mov.w	r6, #0
 80050ba:	46a9      	mov	r9, r5
 80050bc:	46b2      	mov	sl, r6
 80050be:	eb19 0309 	adds.w	r3, r9, r9
 80050c2:	eb4a 040a 	adc.w	r4, sl, sl
 80050c6:	4699      	mov	r9, r3
 80050c8:	46a2      	mov	sl, r4
 80050ca:	eb19 0905 	adds.w	r9, r9, r5
 80050ce:	eb4a 0a06 	adc.w	sl, sl, r6
 80050d2:	f04f 0100 	mov.w	r1, #0
 80050d6:	f04f 0200 	mov.w	r2, #0
 80050da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80050e6:	4689      	mov	r9, r1
 80050e8:	4692      	mov	sl, r2
 80050ea:	eb19 0005 	adds.w	r0, r9, r5
 80050ee:	eb4a 0106 	adc.w	r1, sl, r6
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	461d      	mov	r5, r3
 80050f8:	f04f 0600 	mov.w	r6, #0
 80050fc:	196b      	adds	r3, r5, r5
 80050fe:	eb46 0406 	adc.w	r4, r6, r6
 8005102:	461a      	mov	r2, r3
 8005104:	4623      	mov	r3, r4
 8005106:	f7fb f85f 	bl	80001c8 <__aeabi_uldivmod>
 800510a:	4603      	mov	r3, r0
 800510c:	460c      	mov	r4, r1
 800510e:	461a      	mov	r2, r3
 8005110:	4b2c      	ldr	r3, [pc, #176]	; (80051c4 <UART_SetConfig+0x384>)
 8005112:	fba3 1302 	umull	r1, r3, r3, r2
 8005116:	095b      	lsrs	r3, r3, #5
 8005118:	2164      	movs	r1, #100	; 0x64
 800511a:	fb01 f303 	mul.w	r3, r1, r3
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	3332      	adds	r3, #50	; 0x32
 8005124:	4a27      	ldr	r2, [pc, #156]	; (80051c4 <UART_SetConfig+0x384>)
 8005126:	fba2 2303 	umull	r2, r3, r2, r3
 800512a:	095b      	lsrs	r3, r3, #5
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005132:	4498      	add	r8, r3
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	461d      	mov	r5, r3
 8005138:	f04f 0600 	mov.w	r6, #0
 800513c:	46a9      	mov	r9, r5
 800513e:	46b2      	mov	sl, r6
 8005140:	eb19 0309 	adds.w	r3, r9, r9
 8005144:	eb4a 040a 	adc.w	r4, sl, sl
 8005148:	4699      	mov	r9, r3
 800514a:	46a2      	mov	sl, r4
 800514c:	eb19 0905 	adds.w	r9, r9, r5
 8005150:	eb4a 0a06 	adc.w	sl, sl, r6
 8005154:	f04f 0100 	mov.w	r1, #0
 8005158:	f04f 0200 	mov.w	r2, #0
 800515c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005160:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005164:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005168:	4689      	mov	r9, r1
 800516a:	4692      	mov	sl, r2
 800516c:	eb19 0005 	adds.w	r0, r9, r5
 8005170:	eb4a 0106 	adc.w	r1, sl, r6
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	461d      	mov	r5, r3
 800517a:	f04f 0600 	mov.w	r6, #0
 800517e:	196b      	adds	r3, r5, r5
 8005180:	eb46 0406 	adc.w	r4, r6, r6
 8005184:	461a      	mov	r2, r3
 8005186:	4623      	mov	r3, r4
 8005188:	f7fb f81e 	bl	80001c8 <__aeabi_uldivmod>
 800518c:	4603      	mov	r3, r0
 800518e:	460c      	mov	r4, r1
 8005190:	461a      	mov	r2, r3
 8005192:	4b0c      	ldr	r3, [pc, #48]	; (80051c4 <UART_SetConfig+0x384>)
 8005194:	fba3 1302 	umull	r1, r3, r3, r2
 8005198:	095b      	lsrs	r3, r3, #5
 800519a:	2164      	movs	r1, #100	; 0x64
 800519c:	fb01 f303 	mul.w	r3, r1, r3
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	00db      	lsls	r3, r3, #3
 80051a4:	3332      	adds	r3, #50	; 0x32
 80051a6:	4a07      	ldr	r2, [pc, #28]	; (80051c4 <UART_SetConfig+0x384>)
 80051a8:	fba2 2303 	umull	r2, r3, r2, r3
 80051ac:	095b      	lsrs	r3, r3, #5
 80051ae:	f003 0207 	and.w	r2, r3, #7
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4442      	add	r2, r8
 80051b8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80051ba:	e1b2      	b.n	8005522 <UART_SetConfig+0x6e2>
 80051bc:	40011000 	.word	0x40011000
 80051c0:	40011400 	.word	0x40011400
 80051c4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4ad7      	ldr	r2, [pc, #860]	; (800552c <UART_SetConfig+0x6ec>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d005      	beq.n	80051de <UART_SetConfig+0x39e>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4ad6      	ldr	r2, [pc, #856]	; (8005530 <UART_SetConfig+0x6f0>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	f040 80d1 	bne.w	8005380 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80051de:	f7ff f879 	bl	80042d4 <HAL_RCC_GetPCLK2Freq>
 80051e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	469a      	mov	sl, r3
 80051e8:	f04f 0b00 	mov.w	fp, #0
 80051ec:	46d0      	mov	r8, sl
 80051ee:	46d9      	mov	r9, fp
 80051f0:	eb18 0308 	adds.w	r3, r8, r8
 80051f4:	eb49 0409 	adc.w	r4, r9, r9
 80051f8:	4698      	mov	r8, r3
 80051fa:	46a1      	mov	r9, r4
 80051fc:	eb18 080a 	adds.w	r8, r8, sl
 8005200:	eb49 090b 	adc.w	r9, r9, fp
 8005204:	f04f 0100 	mov.w	r1, #0
 8005208:	f04f 0200 	mov.w	r2, #0
 800520c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005210:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005214:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005218:	4688      	mov	r8, r1
 800521a:	4691      	mov	r9, r2
 800521c:	eb1a 0508 	adds.w	r5, sl, r8
 8005220:	eb4b 0609 	adc.w	r6, fp, r9
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	4619      	mov	r1, r3
 800522a:	f04f 0200 	mov.w	r2, #0
 800522e:	f04f 0300 	mov.w	r3, #0
 8005232:	f04f 0400 	mov.w	r4, #0
 8005236:	0094      	lsls	r4, r2, #2
 8005238:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800523c:	008b      	lsls	r3, r1, #2
 800523e:	461a      	mov	r2, r3
 8005240:	4623      	mov	r3, r4
 8005242:	4628      	mov	r0, r5
 8005244:	4631      	mov	r1, r6
 8005246:	f7fa ffbf 	bl	80001c8 <__aeabi_uldivmod>
 800524a:	4603      	mov	r3, r0
 800524c:	460c      	mov	r4, r1
 800524e:	461a      	mov	r2, r3
 8005250:	4bb8      	ldr	r3, [pc, #736]	; (8005534 <UART_SetConfig+0x6f4>)
 8005252:	fba3 2302 	umull	r2, r3, r3, r2
 8005256:	095b      	lsrs	r3, r3, #5
 8005258:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	469b      	mov	fp, r3
 8005260:	f04f 0c00 	mov.w	ip, #0
 8005264:	46d9      	mov	r9, fp
 8005266:	46e2      	mov	sl, ip
 8005268:	eb19 0309 	adds.w	r3, r9, r9
 800526c:	eb4a 040a 	adc.w	r4, sl, sl
 8005270:	4699      	mov	r9, r3
 8005272:	46a2      	mov	sl, r4
 8005274:	eb19 090b 	adds.w	r9, r9, fp
 8005278:	eb4a 0a0c 	adc.w	sl, sl, ip
 800527c:	f04f 0100 	mov.w	r1, #0
 8005280:	f04f 0200 	mov.w	r2, #0
 8005284:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005288:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800528c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005290:	4689      	mov	r9, r1
 8005292:	4692      	mov	sl, r2
 8005294:	eb1b 0509 	adds.w	r5, fp, r9
 8005298:	eb4c 060a 	adc.w	r6, ip, sl
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	4619      	mov	r1, r3
 80052a2:	f04f 0200 	mov.w	r2, #0
 80052a6:	f04f 0300 	mov.w	r3, #0
 80052aa:	f04f 0400 	mov.w	r4, #0
 80052ae:	0094      	lsls	r4, r2, #2
 80052b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80052b4:	008b      	lsls	r3, r1, #2
 80052b6:	461a      	mov	r2, r3
 80052b8:	4623      	mov	r3, r4
 80052ba:	4628      	mov	r0, r5
 80052bc:	4631      	mov	r1, r6
 80052be:	f7fa ff83 	bl	80001c8 <__aeabi_uldivmod>
 80052c2:	4603      	mov	r3, r0
 80052c4:	460c      	mov	r4, r1
 80052c6:	461a      	mov	r2, r3
 80052c8:	4b9a      	ldr	r3, [pc, #616]	; (8005534 <UART_SetConfig+0x6f4>)
 80052ca:	fba3 1302 	umull	r1, r3, r3, r2
 80052ce:	095b      	lsrs	r3, r3, #5
 80052d0:	2164      	movs	r1, #100	; 0x64
 80052d2:	fb01 f303 	mul.w	r3, r1, r3
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	3332      	adds	r3, #50	; 0x32
 80052dc:	4a95      	ldr	r2, [pc, #596]	; (8005534 <UART_SetConfig+0x6f4>)
 80052de:	fba2 2303 	umull	r2, r3, r2, r3
 80052e2:	095b      	lsrs	r3, r3, #5
 80052e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052e8:	4498      	add	r8, r3
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	469b      	mov	fp, r3
 80052ee:	f04f 0c00 	mov.w	ip, #0
 80052f2:	46d9      	mov	r9, fp
 80052f4:	46e2      	mov	sl, ip
 80052f6:	eb19 0309 	adds.w	r3, r9, r9
 80052fa:	eb4a 040a 	adc.w	r4, sl, sl
 80052fe:	4699      	mov	r9, r3
 8005300:	46a2      	mov	sl, r4
 8005302:	eb19 090b 	adds.w	r9, r9, fp
 8005306:	eb4a 0a0c 	adc.w	sl, sl, ip
 800530a:	f04f 0100 	mov.w	r1, #0
 800530e:	f04f 0200 	mov.w	r2, #0
 8005312:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005316:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800531a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800531e:	4689      	mov	r9, r1
 8005320:	4692      	mov	sl, r2
 8005322:	eb1b 0509 	adds.w	r5, fp, r9
 8005326:	eb4c 060a 	adc.w	r6, ip, sl
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	4619      	mov	r1, r3
 8005330:	f04f 0200 	mov.w	r2, #0
 8005334:	f04f 0300 	mov.w	r3, #0
 8005338:	f04f 0400 	mov.w	r4, #0
 800533c:	0094      	lsls	r4, r2, #2
 800533e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005342:	008b      	lsls	r3, r1, #2
 8005344:	461a      	mov	r2, r3
 8005346:	4623      	mov	r3, r4
 8005348:	4628      	mov	r0, r5
 800534a:	4631      	mov	r1, r6
 800534c:	f7fa ff3c 	bl	80001c8 <__aeabi_uldivmod>
 8005350:	4603      	mov	r3, r0
 8005352:	460c      	mov	r4, r1
 8005354:	461a      	mov	r2, r3
 8005356:	4b77      	ldr	r3, [pc, #476]	; (8005534 <UART_SetConfig+0x6f4>)
 8005358:	fba3 1302 	umull	r1, r3, r3, r2
 800535c:	095b      	lsrs	r3, r3, #5
 800535e:	2164      	movs	r1, #100	; 0x64
 8005360:	fb01 f303 	mul.w	r3, r1, r3
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	011b      	lsls	r3, r3, #4
 8005368:	3332      	adds	r3, #50	; 0x32
 800536a:	4a72      	ldr	r2, [pc, #456]	; (8005534 <UART_SetConfig+0x6f4>)
 800536c:	fba2 2303 	umull	r2, r3, r2, r3
 8005370:	095b      	lsrs	r3, r3, #5
 8005372:	f003 020f 	and.w	r2, r3, #15
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4442      	add	r2, r8
 800537c:	609a      	str	r2, [r3, #8]
 800537e:	e0d0      	b.n	8005522 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005380:	f7fe ff94 	bl	80042ac <HAL_RCC_GetPCLK1Freq>
 8005384:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	469a      	mov	sl, r3
 800538a:	f04f 0b00 	mov.w	fp, #0
 800538e:	46d0      	mov	r8, sl
 8005390:	46d9      	mov	r9, fp
 8005392:	eb18 0308 	adds.w	r3, r8, r8
 8005396:	eb49 0409 	adc.w	r4, r9, r9
 800539a:	4698      	mov	r8, r3
 800539c:	46a1      	mov	r9, r4
 800539e:	eb18 080a 	adds.w	r8, r8, sl
 80053a2:	eb49 090b 	adc.w	r9, r9, fp
 80053a6:	f04f 0100 	mov.w	r1, #0
 80053aa:	f04f 0200 	mov.w	r2, #0
 80053ae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80053b2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80053b6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80053ba:	4688      	mov	r8, r1
 80053bc:	4691      	mov	r9, r2
 80053be:	eb1a 0508 	adds.w	r5, sl, r8
 80053c2:	eb4b 0609 	adc.w	r6, fp, r9
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	4619      	mov	r1, r3
 80053cc:	f04f 0200 	mov.w	r2, #0
 80053d0:	f04f 0300 	mov.w	r3, #0
 80053d4:	f04f 0400 	mov.w	r4, #0
 80053d8:	0094      	lsls	r4, r2, #2
 80053da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80053de:	008b      	lsls	r3, r1, #2
 80053e0:	461a      	mov	r2, r3
 80053e2:	4623      	mov	r3, r4
 80053e4:	4628      	mov	r0, r5
 80053e6:	4631      	mov	r1, r6
 80053e8:	f7fa feee 	bl	80001c8 <__aeabi_uldivmod>
 80053ec:	4603      	mov	r3, r0
 80053ee:	460c      	mov	r4, r1
 80053f0:	461a      	mov	r2, r3
 80053f2:	4b50      	ldr	r3, [pc, #320]	; (8005534 <UART_SetConfig+0x6f4>)
 80053f4:	fba3 2302 	umull	r2, r3, r3, r2
 80053f8:	095b      	lsrs	r3, r3, #5
 80053fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	469b      	mov	fp, r3
 8005402:	f04f 0c00 	mov.w	ip, #0
 8005406:	46d9      	mov	r9, fp
 8005408:	46e2      	mov	sl, ip
 800540a:	eb19 0309 	adds.w	r3, r9, r9
 800540e:	eb4a 040a 	adc.w	r4, sl, sl
 8005412:	4699      	mov	r9, r3
 8005414:	46a2      	mov	sl, r4
 8005416:	eb19 090b 	adds.w	r9, r9, fp
 800541a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800541e:	f04f 0100 	mov.w	r1, #0
 8005422:	f04f 0200 	mov.w	r2, #0
 8005426:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800542a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800542e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005432:	4689      	mov	r9, r1
 8005434:	4692      	mov	sl, r2
 8005436:	eb1b 0509 	adds.w	r5, fp, r9
 800543a:	eb4c 060a 	adc.w	r6, ip, sl
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	4619      	mov	r1, r3
 8005444:	f04f 0200 	mov.w	r2, #0
 8005448:	f04f 0300 	mov.w	r3, #0
 800544c:	f04f 0400 	mov.w	r4, #0
 8005450:	0094      	lsls	r4, r2, #2
 8005452:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005456:	008b      	lsls	r3, r1, #2
 8005458:	461a      	mov	r2, r3
 800545a:	4623      	mov	r3, r4
 800545c:	4628      	mov	r0, r5
 800545e:	4631      	mov	r1, r6
 8005460:	f7fa feb2 	bl	80001c8 <__aeabi_uldivmod>
 8005464:	4603      	mov	r3, r0
 8005466:	460c      	mov	r4, r1
 8005468:	461a      	mov	r2, r3
 800546a:	4b32      	ldr	r3, [pc, #200]	; (8005534 <UART_SetConfig+0x6f4>)
 800546c:	fba3 1302 	umull	r1, r3, r3, r2
 8005470:	095b      	lsrs	r3, r3, #5
 8005472:	2164      	movs	r1, #100	; 0x64
 8005474:	fb01 f303 	mul.w	r3, r1, r3
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	011b      	lsls	r3, r3, #4
 800547c:	3332      	adds	r3, #50	; 0x32
 800547e:	4a2d      	ldr	r2, [pc, #180]	; (8005534 <UART_SetConfig+0x6f4>)
 8005480:	fba2 2303 	umull	r2, r3, r2, r3
 8005484:	095b      	lsrs	r3, r3, #5
 8005486:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800548a:	4498      	add	r8, r3
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	469b      	mov	fp, r3
 8005490:	f04f 0c00 	mov.w	ip, #0
 8005494:	46d9      	mov	r9, fp
 8005496:	46e2      	mov	sl, ip
 8005498:	eb19 0309 	adds.w	r3, r9, r9
 800549c:	eb4a 040a 	adc.w	r4, sl, sl
 80054a0:	4699      	mov	r9, r3
 80054a2:	46a2      	mov	sl, r4
 80054a4:	eb19 090b 	adds.w	r9, r9, fp
 80054a8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80054ac:	f04f 0100 	mov.w	r1, #0
 80054b0:	f04f 0200 	mov.w	r2, #0
 80054b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054c0:	4689      	mov	r9, r1
 80054c2:	4692      	mov	sl, r2
 80054c4:	eb1b 0509 	adds.w	r5, fp, r9
 80054c8:	eb4c 060a 	adc.w	r6, ip, sl
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	4619      	mov	r1, r3
 80054d2:	f04f 0200 	mov.w	r2, #0
 80054d6:	f04f 0300 	mov.w	r3, #0
 80054da:	f04f 0400 	mov.w	r4, #0
 80054de:	0094      	lsls	r4, r2, #2
 80054e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80054e4:	008b      	lsls	r3, r1, #2
 80054e6:	461a      	mov	r2, r3
 80054e8:	4623      	mov	r3, r4
 80054ea:	4628      	mov	r0, r5
 80054ec:	4631      	mov	r1, r6
 80054ee:	f7fa fe6b 	bl	80001c8 <__aeabi_uldivmod>
 80054f2:	4603      	mov	r3, r0
 80054f4:	460c      	mov	r4, r1
 80054f6:	461a      	mov	r2, r3
 80054f8:	4b0e      	ldr	r3, [pc, #56]	; (8005534 <UART_SetConfig+0x6f4>)
 80054fa:	fba3 1302 	umull	r1, r3, r3, r2
 80054fe:	095b      	lsrs	r3, r3, #5
 8005500:	2164      	movs	r1, #100	; 0x64
 8005502:	fb01 f303 	mul.w	r3, r1, r3
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	011b      	lsls	r3, r3, #4
 800550a:	3332      	adds	r3, #50	; 0x32
 800550c:	4a09      	ldr	r2, [pc, #36]	; (8005534 <UART_SetConfig+0x6f4>)
 800550e:	fba2 2303 	umull	r2, r3, r2, r3
 8005512:	095b      	lsrs	r3, r3, #5
 8005514:	f003 020f 	and.w	r2, r3, #15
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4442      	add	r2, r8
 800551e:	609a      	str	r2, [r3, #8]
}
 8005520:	e7ff      	b.n	8005522 <UART_SetConfig+0x6e2>
 8005522:	bf00      	nop
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800552c:	40011000 	.word	0x40011000
 8005530:	40011400 	.word	0x40011400
 8005534:	51eb851f 	.word	0x51eb851f

08005538 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005538:	b084      	sub	sp, #16
 800553a:	b580      	push	{r7, lr}
 800553c:	b084      	sub	sp, #16
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	f107 001c 	add.w	r0, r7, #28
 8005546:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800554a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554c:	2b01      	cmp	r3, #1
 800554e:	d122      	bne.n	8005596 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005554:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800557a:	2b01      	cmp	r3, #1
 800557c:	d105      	bne.n	800558a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f94a 	bl	8005824 <USB_CoreReset>
 8005590:	4603      	mov	r3, r0
 8005592:	73fb      	strb	r3, [r7, #15]
 8005594:	e01a      	b.n	80055cc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f93e 	bl	8005824 <USB_CoreReset>
 80055a8:	4603      	mov	r3, r0
 80055aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80055ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d106      	bne.n	80055c0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	639a      	str	r2, [r3, #56]	; 0x38
 80055be:	e005      	b.n	80055cc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80055cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d10b      	bne.n	80055ea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f043 0206 	orr.w	r2, r3, #6
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f043 0220 	orr.w	r2, r3, #32
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80055ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055f6:	b004      	add	sp, #16
 80055f8:	4770      	bx	lr

080055fa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b083      	sub	sp, #12
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f043 0201 	orr.w	r2, r3, #1
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f023 0201 	bic.w	r2, r3, #1
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b082      	sub	sp, #8
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
 8005646:	460b      	mov	r3, r1
 8005648:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005656:	78fb      	ldrb	r3, [r7, #3]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d106      	bne.n	800566a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	60da      	str	r2, [r3, #12]
 8005668:	e00b      	b.n	8005682 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800566a:	78fb      	ldrb	r3, [r7, #3]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d106      	bne.n	800567e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	60da      	str	r2, [r3, #12]
 800567c:	e001      	b.n	8005682 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e003      	b.n	800568a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005682:	2032      	movs	r0, #50	; 0x32
 8005684:	f7fb fd26 	bl	80010d4 <HAL_Delay>

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
	...

08005694 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	019b      	lsls	r3, r3, #6
 80056a6:	f043 0220 	orr.w	r2, r3, #32
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	3301      	adds	r3, #1
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4a09      	ldr	r2, [pc, #36]	; (80056dc <USB_FlushTxFifo+0x48>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d901      	bls.n	80056c0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e006      	b.n	80056ce <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	f003 0320 	and.w	r3, r3, #32
 80056c8:	2b20      	cmp	r3, #32
 80056ca:	d0f0      	beq.n	80056ae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	00030d40 	.word	0x00030d40

080056e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80056e8:	2300      	movs	r3, #0
 80056ea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2210      	movs	r2, #16
 80056f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	3301      	adds	r3, #1
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4a09      	ldr	r2, [pc, #36]	; (8005720 <USB_FlushRxFifo+0x40>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d901      	bls.n	8005704 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e006      	b.n	8005712 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	f003 0310 	and.w	r3, r3, #16
 800570c:	2b10      	cmp	r3, #16
 800570e:	d0f0      	beq.n	80056f2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	00030d40 	.word	0x00030d40

08005724 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005724:	b480      	push	{r7}
 8005726:	b089      	sub	sp, #36	; 0x24
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	4611      	mov	r1, r2
 8005730:	461a      	mov	r2, r3
 8005732:	460b      	mov	r3, r1
 8005734:	71fb      	strb	r3, [r7, #7]
 8005736:	4613      	mov	r3, r2
 8005738:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005742:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005746:	2b00      	cmp	r3, #0
 8005748:	d11a      	bne.n	8005780 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800574a:	88bb      	ldrh	r3, [r7, #4]
 800574c:	3303      	adds	r3, #3
 800574e:	089b      	lsrs	r3, r3, #2
 8005750:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005752:	2300      	movs	r3, #0
 8005754:	61bb      	str	r3, [r7, #24]
 8005756:	e00f      	b.n	8005778 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005758:	79fb      	ldrb	r3, [r7, #7]
 800575a:	031a      	lsls	r2, r3, #12
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	4413      	add	r3, r2
 8005760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005764:	461a      	mov	r2, r3
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	3304      	adds	r3, #4
 8005770:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	3301      	adds	r3, #1
 8005776:	61bb      	str	r3, [r7, #24]
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	429a      	cmp	r2, r3
 800577e:	d3eb      	bcc.n	8005758 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3724      	adds	r7, #36	; 0x24
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800578e:	b480      	push	{r7}
 8005790:	b089      	sub	sp, #36	; 0x24
 8005792:	af00      	add	r7, sp, #0
 8005794:	60f8      	str	r0, [r7, #12]
 8005796:	60b9      	str	r1, [r7, #8]
 8005798:	4613      	mov	r3, r2
 800579a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80057a4:	88fb      	ldrh	r3, [r7, #6]
 80057a6:	3303      	adds	r3, #3
 80057a8:	089b      	lsrs	r3, r3, #2
 80057aa:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80057ac:	2300      	movs	r3, #0
 80057ae:	61bb      	str	r3, [r7, #24]
 80057b0:	e00b      	b.n	80057ca <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	601a      	str	r2, [r3, #0]
    pDest++;
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	3304      	adds	r3, #4
 80057c2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	3301      	adds	r3, #1
 80057c8:	61bb      	str	r3, [r7, #24]
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d3ef      	bcc.n	80057b2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80057d2:	69fb      	ldr	r3, [r7, #28]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3724      	adds	r7, #36	; 0x24
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	4013      	ands	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80057f8:	68fb      	ldr	r3, [r7, #12]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005806:	b480      	push	{r7}
 8005808:	b083      	sub	sp, #12
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	f003 0301 	and.w	r3, r3, #1
}
 8005816:	4618      	mov	r0, r3
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
	...

08005824 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800582c:	2300      	movs	r3, #0
 800582e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	3301      	adds	r3, #1
 8005834:	60fb      	str	r3, [r7, #12]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4a13      	ldr	r2, [pc, #76]	; (8005888 <USB_CoreReset+0x64>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d901      	bls.n	8005842 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e01b      	b.n	800587a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	2b00      	cmp	r3, #0
 8005848:	daf2      	bge.n	8005830 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800584a:	2300      	movs	r3, #0
 800584c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	f043 0201 	orr.w	r2, r3, #1
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	3301      	adds	r3, #1
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	4a09      	ldr	r2, [pc, #36]	; (8005888 <USB_CoreReset+0x64>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d901      	bls.n	800586c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e006      	b.n	800587a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b01      	cmp	r3, #1
 8005876:	d0f0      	beq.n	800585a <USB_CoreReset+0x36>

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	00030d40 	.word	0x00030d40

0800588c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800588c:	b084      	sub	sp, #16
 800588e:	b580      	push	{r7, lr}
 8005890:	b084      	sub	sp, #16
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
 8005896:	f107 001c 	add.w	r0, r7, #28
 800589a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058a8:	461a      	mov	r2, r3
 80058aa:	2300      	movs	r3, #0
 80058ac:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058be:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ca:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d018      	beq.n	8005910 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80058de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d10a      	bne.n	80058fa <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058f2:	f043 0304 	orr.w	r3, r3, #4
 80058f6:	6013      	str	r3, [r2, #0]
 80058f8:	e014      	b.n	8005924 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005908:	f023 0304 	bic.w	r3, r3, #4
 800590c:	6013      	str	r3, [r2, #0]
 800590e:	e009      	b.n	8005924 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800591e:	f023 0304 	bic.w	r3, r3, #4
 8005922:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005924:	2110      	movs	r1, #16
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7ff feb4 	bl	8005694 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f7ff fed7 	bl	80056e0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005932:	2300      	movs	r3, #0
 8005934:	60fb      	str	r3, [r7, #12]
 8005936:	e015      	b.n	8005964 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	4413      	add	r3, r2
 8005940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005944:	461a      	mov	r2, r3
 8005946:	f04f 33ff 	mov.w	r3, #4294967295
 800594a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	4413      	add	r3, r2
 8005954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005958:	461a      	mov	r2, r3
 800595a:	2300      	movs	r3, #0
 800595c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	3301      	adds	r3, #1
 8005962:	60fb      	str	r3, [r7, #12]
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	429a      	cmp	r2, r3
 800596a:	d3e5      	bcc.n	8005938 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800596c:	2101      	movs	r1, #1
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f8ac 	bl	8005acc <USB_DriveVbus>

  HAL_Delay(200U);
 8005974:	20c8      	movs	r0, #200	; 0xc8
 8005976:	f7fb fbad 	bl	80010d4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f04f 32ff 	mov.w	r2, #4294967295
 8005986:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800598c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00b      	beq.n	80059ac <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f44f 7200 	mov.w	r2, #512	; 0x200
 800599a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a14      	ldr	r2, [pc, #80]	; (80059f0 <USB_HostInit+0x164>)
 80059a0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a13      	ldr	r2, [pc, #76]	; (80059f4 <USB_HostInit+0x168>)
 80059a6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80059aa:	e009      	b.n	80059c0 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2280      	movs	r2, #128	; 0x80
 80059b0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a10      	ldr	r2, [pc, #64]	; (80059f8 <USB_HostInit+0x16c>)
 80059b6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a10      	ldr	r2, [pc, #64]	; (80059fc <USB_HostInit+0x170>)
 80059bc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80059c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d105      	bne.n	80059d2 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	f043 0210 	orr.w	r2, r3, #16
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	699a      	ldr	r2, [r3, #24]
 80059d6:	4b0a      	ldr	r3, [pc, #40]	; (8005a00 <USB_HostInit+0x174>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059ea:	b004      	add	sp, #16
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	01000200 	.word	0x01000200
 80059f4:	00e00300 	.word	0x00e00300
 80059f8:	00600080 	.word	0x00600080
 80059fc:	004000e0 	.word	0x004000e0
 8005a00:	a3200008 	.word	0xa3200008

08005a04 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a22:	f023 0303 	bic.w	r3, r3, #3
 8005a26:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	78fb      	ldrb	r3, [r7, #3]
 8005a32:	f003 0303 	and.w	r3, r3, #3
 8005a36:	68f9      	ldr	r1, [r7, #12]
 8005a38:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d107      	bne.n	8005a56 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005a52:	6053      	str	r3, [r2, #4]
 8005a54:	e009      	b.n	8005a6a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005a56:	78fb      	ldrb	r3, [r7, #3]
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d106      	bne.n	8005a6a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a62:	461a      	mov	r2, r3
 8005a64:	f241 7370 	movw	r3, #6000	; 0x1770
 8005a68:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005a98:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aa6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005aa8:	2064      	movs	r0, #100	; 0x64
 8005aaa:	f7fb fb13 	bl	80010d4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ab6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aba:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005abc:	200a      	movs	r0, #10
 8005abe:	f7fb fb09 	bl	80010d4 <HAL_Delay>

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005adc:	2300      	movs	r3, #0
 8005ade:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005af0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d109      	bne.n	8005b10 <USB_DriveVbus+0x44>
 8005afc:	78fb      	ldrb	r3, [r7, #3]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d106      	bne.n	8005b10 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b0e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b1a:	d109      	bne.n	8005b30 <USB_DriveVbus+0x64>
 8005b1c:	78fb      	ldrb	r3, [r7, #3]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d106      	bne.n	8005b30 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b2e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b085      	sub	sp, #20
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	0c5b      	lsrs	r3, r3, #17
 8005b5c:	f003 0303 	and.w	r3, r3, #3
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	b29b      	uxth	r3, r3
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3714      	adds	r7, #20
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
	...

08005b90 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	4608      	mov	r0, r1
 8005b9a:	4611      	mov	r1, r2
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	70fb      	strb	r3, [r7, #3]
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	70bb      	strb	r3, [r7, #2]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005baa:	2300      	movs	r3, #0
 8005bac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005bb2:	78fb      	ldrb	r3, [r7, #3]
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8005bc4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005bc6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d87e      	bhi.n	8005ccc <USB_HC_Init+0x13c>
 8005bce:	a201      	add	r2, pc, #4	; (adr r2, 8005bd4 <USB_HC_Init+0x44>)
 8005bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd4:	08005be5 	.word	0x08005be5
 8005bd8:	08005c8f 	.word	0x08005c8f
 8005bdc:	08005be5 	.word	0x08005be5
 8005be0:	08005c51 	.word	0x08005c51
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005be4:	78fb      	ldrb	r3, [r7, #3]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	f240 439d 	movw	r3, #1181	; 0x49d
 8005bf6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005bf8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	da10      	bge.n	8005c22 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005c00:	78fb      	ldrb	r3, [r7, #3]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	78fa      	ldrb	r2, [r7, #3]
 8005c10:	0151      	lsls	r1, r2, #5
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	440a      	add	r2, r1
 8005c16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c1e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005c20:	e057      	b.n	8005cd2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d051      	beq.n	8005cd2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005c2e:	78fb      	ldrb	r3, [r7, #3]
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	78fa      	ldrb	r2, [r7, #3]
 8005c3e:	0151      	lsls	r1, r2, #5
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	440a      	add	r2, r1
 8005c44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c48:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005c4c:	60d3      	str	r3, [r2, #12]
      break;
 8005c4e:	e040      	b.n	8005cd2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c50:	78fb      	ldrb	r3, [r7, #3]
 8005c52:	015a      	lsls	r2, r3, #5
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	f240 639d 	movw	r3, #1693	; 0x69d
 8005c62:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005c64:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	da34      	bge.n	8005cd6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005c6c:	78fb      	ldrb	r3, [r7, #3]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	78fa      	ldrb	r2, [r7, #3]
 8005c7c:	0151      	lsls	r1, r2, #5
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	440a      	add	r2, r1
 8005c82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c8a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005c8c:	e023      	b.n	8005cd6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c8e:	78fb      	ldrb	r3, [r7, #3]
 8005c90:	015a      	lsls	r2, r3, #5
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	f240 2325 	movw	r3, #549	; 0x225
 8005ca0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005ca2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	da17      	bge.n	8005cda <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005caa:	78fb      	ldrb	r3, [r7, #3]
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	78fa      	ldrb	r2, [r7, #3]
 8005cba:	0151      	lsls	r1, r2, #5
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	440a      	add	r2, r1
 8005cc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cc4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005cc8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005cca:	e006      	b.n	8005cda <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	75fb      	strb	r3, [r7, #23]
      break;
 8005cd0:	e004      	b.n	8005cdc <USB_HC_Init+0x14c>
      break;
 8005cd2:	bf00      	nop
 8005cd4:	e002      	b.n	8005cdc <USB_HC_Init+0x14c>
      break;
 8005cd6:	bf00      	nop
 8005cd8:	e000      	b.n	8005cdc <USB_HC_Init+0x14c>
      break;
 8005cda:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ce2:	699a      	ldr	r2, [r3, #24]
 8005ce4:	78fb      	ldrb	r3, [r7, #3]
 8005ce6:	f003 030f 	and.w	r3, r3, #15
 8005cea:	2101      	movs	r1, #1
 8005cec:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf0:	68b9      	ldr	r1, [r7, #8]
 8005cf2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005d06:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	da03      	bge.n	8005d16 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d12:	613b      	str	r3, [r7, #16]
 8005d14:	e001      	b.n	8005d1a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005d16:	2300      	movs	r3, #0
 8005d18:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005d1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d103      	bne.n	8005d2a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005d22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	e001      	b.n	8005d2e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d2e:	787b      	ldrb	r3, [r7, #1]
 8005d30:	059b      	lsls	r3, r3, #22
 8005d32:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005d36:	78bb      	ldrb	r3, [r7, #2]
 8005d38:	02db      	lsls	r3, r3, #11
 8005d3a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d3e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005d40:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005d44:	049b      	lsls	r3, r3, #18
 8005d46:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005d4a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005d4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005d52:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d58:	78fb      	ldrb	r3, [r7, #3]
 8005d5a:	0159      	lsls	r1, r3, #5
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	440b      	add	r3, r1
 8005d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d64:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d6a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005d6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005d70:	2b03      	cmp	r3, #3
 8005d72:	d10f      	bne.n	8005d94 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005d74:	78fb      	ldrb	r3, [r7, #3]
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	78fa      	ldrb	r2, [r7, #3]
 8005d84:	0151      	lsls	r1, r2, #5
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	440a      	add	r2, r1
 8005d8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d92:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	371c      	adds	r7, #28
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop

08005da4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b08c      	sub	sp, #48	; 0x30
 8005da8:	af02      	add	r7, sp, #8
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	4613      	mov	r3, r2
 8005db0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	785b      	ldrb	r3, [r3, #1]
 8005dba:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005dbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005dc0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d028      	beq.n	8005e20 <USB_HC_StartXfer+0x7c>
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	791b      	ldrb	r3, [r3, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d124      	bne.n	8005e20 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005dd6:	79fb      	ldrb	r3, [r7, #7]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10b      	bne.n	8005df4 <USB_HC_StartXfer+0x50>
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	795b      	ldrb	r3, [r3, #5]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d107      	bne.n	8005df4 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	785b      	ldrb	r3, [r3, #1]
 8005de8:	4619      	mov	r1, r3
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f000 fa2e 	bl	800624c <USB_DoPing>
      return HAL_OK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	e112      	b.n	800601a <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8005df4:	79fb      	ldrb	r3, [r7, #7]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d112      	bne.n	8005e20 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	69fa      	ldr	r2, [r7, #28]
 8005e0a:	0151      	lsls	r1, r2, #5
 8005e0c:	6a3a      	ldr	r2, [r7, #32]
 8005e0e:	440a      	add	r2, r1
 8005e10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e14:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005e18:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d018      	beq.n	8005e5a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	8912      	ldrh	r2, [r2, #8]
 8005e30:	4413      	add	r3, r2
 8005e32:	3b01      	subs	r3, #1
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	8912      	ldrh	r2, [r2, #8]
 8005e38:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e3c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005e3e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005e40:	8b7b      	ldrh	r3, [r7, #26]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d90b      	bls.n	8005e5e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005e46:	8b7b      	ldrh	r3, [r7, #26]
 8005e48:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005e4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	8912      	ldrh	r2, [r2, #8]
 8005e50:	fb02 f203 	mul.w	r2, r2, r3
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	611a      	str	r2, [r3, #16]
 8005e58:	e001      	b.n	8005e5e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	78db      	ldrb	r3, [r3, #3]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d006      	beq.n	8005e74 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005e66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	8912      	ldrh	r2, [r2, #8]
 8005e6c:	fb02 f203 	mul.w	r2, r2, r3
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e7e:	04d9      	lsls	r1, r3, #19
 8005e80:	4b68      	ldr	r3, [pc, #416]	; (8006024 <USB_HC_StartXfer+0x280>)
 8005e82:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e84:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	7a9b      	ldrb	r3, [r3, #10]
 8005e8a:	075b      	lsls	r3, r3, #29
 8005e8c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e90:	69f9      	ldr	r1, [r7, #28]
 8005e92:	0148      	lsls	r0, r1, #5
 8005e94:	6a39      	ldr	r1, [r7, #32]
 8005e96:	4401      	add	r1, r0
 8005e98:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e9c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e9e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005ea0:	79fb      	ldrb	r3, [r7, #7]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d009      	beq.n	8005eba <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	68d9      	ldr	r1, [r3, #12]
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	6a3b      	ldr	r3, [r7, #32]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb6:	460a      	mov	r2, r1
 8005eb8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	bf0c      	ite	eq
 8005eca:	2301      	moveq	r3, #1
 8005ecc:	2300      	movne	r3, #0
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	69fa      	ldr	r2, [r7, #28]
 8005ee2:	0151      	lsls	r1, r2, #5
 8005ee4:	6a3a      	ldr	r2, [r7, #32]
 8005ee6:	440a      	add	r2, r1
 8005ee8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ef0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	7e7b      	ldrb	r3, [r7, #25]
 8005f02:	075b      	lsls	r3, r3, #29
 8005f04:	69f9      	ldr	r1, [r7, #28]
 8005f06:	0148      	lsls	r0, r1, #5
 8005f08:	6a39      	ldr	r1, [r7, #32]
 8005f0a:	4401      	add	r1, r0
 8005f0c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005f10:	4313      	orrs	r3, r2
 8005f12:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a41      	ldr	r2, [pc, #260]	; (8006028 <USB_HC_StartXfer+0x284>)
 8005f24:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f26:	4b40      	ldr	r3, [pc, #256]	; (8006028 <USB_HC_StartXfer+0x284>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f2e:	4a3e      	ldr	r2, [pc, #248]	; (8006028 <USB_HC_StartXfer+0x284>)
 8005f30:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	78db      	ldrb	r3, [r3, #3]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d006      	beq.n	8005f48 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005f3a:	4b3b      	ldr	r3, [pc, #236]	; (8006028 <USB_HC_StartXfer+0x284>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f42:	4a39      	ldr	r2, [pc, #228]	; (8006028 <USB_HC_StartXfer+0x284>)
 8005f44:	6013      	str	r3, [r2, #0]
 8005f46:	e005      	b.n	8005f54 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005f48:	4b37      	ldr	r3, [pc, #220]	; (8006028 <USB_HC_StartXfer+0x284>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f50:	4a35      	ldr	r2, [pc, #212]	; (8006028 <USB_HC_StartXfer+0x284>)
 8005f52:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f54:	4b34      	ldr	r3, [pc, #208]	; (8006028 <USB_HC_StartXfer+0x284>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f5c:	4a32      	ldr	r2, [pc, #200]	; (8006028 <USB_HC_StartXfer+0x284>)
 8005f5e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	6a3b      	ldr	r3, [r7, #32]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	4b2e      	ldr	r3, [pc, #184]	; (8006028 <USB_HC_StartXfer+0x284>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8005f74:	79fb      	ldrb	r3, [r7, #7]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d14e      	bne.n	8006018 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	78db      	ldrb	r3, [r3, #3]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d14a      	bne.n	8006018 <USB_HC_StartXfer+0x274>
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d046      	beq.n	8006018 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	79db      	ldrb	r3, [r3, #7]
 8005f8e:	2b03      	cmp	r3, #3
 8005f90:	d830      	bhi.n	8005ff4 <USB_HC_StartXfer+0x250>
 8005f92:	a201      	add	r2, pc, #4	; (adr r2, 8005f98 <USB_HC_StartXfer+0x1f4>)
 8005f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f98:	08005fa9 	.word	0x08005fa9
 8005f9c:	08005fcd 	.word	0x08005fcd
 8005fa0:	08005fa9 	.word	0x08005fa9
 8005fa4:	08005fcd 	.word	0x08005fcd
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	3303      	adds	r3, #3
 8005fae:	089b      	lsrs	r3, r3, #2
 8005fb0:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005fb2:	8afa      	ldrh	r2, [r7, #22]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d91c      	bls.n	8005ff8 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	f043 0220 	orr.w	r2, r3, #32
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	619a      	str	r2, [r3, #24]
          }
          break;
 8005fca:	e015      	b.n	8005ff8 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	3303      	adds	r3, #3
 8005fd2:	089b      	lsrs	r3, r3, #2
 8005fd4:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005fd6:	8afa      	ldrh	r2, [r7, #22]
 8005fd8:	6a3b      	ldr	r3, [r7, #32]
 8005fda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d90a      	bls.n	8005ffc <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	619a      	str	r2, [r3, #24]
          }
          break;
 8005ff2:	e003      	b.n	8005ffc <USB_HC_StartXfer+0x258>

        default:
          break;
 8005ff4:	bf00      	nop
 8005ff6:	e002      	b.n	8005ffe <USB_HC_StartXfer+0x25a>
          break;
 8005ff8:	bf00      	nop
 8005ffa:	e000      	b.n	8005ffe <USB_HC_StartXfer+0x25a>
          break;
 8005ffc:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	68d9      	ldr	r1, [r3, #12]
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	785a      	ldrb	r2, [r3, #1]
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	b298      	uxth	r0, r3
 800600c:	2300      	movs	r3, #0
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	4603      	mov	r3, r0
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f7ff fb86 	bl	8005724 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3728      	adds	r7, #40	; 0x28
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	1ff80000 	.word	0x1ff80000
 8006028:	200000b4 	.word	0x200000b4

0800602c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	b29b      	uxth	r3, r3
}
 8006042:	4618      	mov	r0, r3
 8006044:	3714      	adds	r7, #20
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800604e:	b480      	push	{r7}
 8006050:	b087      	sub	sp, #28
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	460b      	mov	r3, r1
 8006058:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800605e:	78fb      	ldrb	r3, [r7, #3]
 8006060:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006062:	2300      	movs	r3, #0
 8006064:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	015a      	lsls	r2, r3, #5
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	4413      	add	r3, r2
 800606e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	0c9b      	lsrs	r3, r3, #18
 8006076:	f003 0303 	and.w	r3, r3, #3
 800607a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d002      	beq.n	8006088 <USB_HC_Halt+0x3a>
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	2b02      	cmp	r3, #2
 8006086:	d16c      	bne.n	8006162 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	015a      	lsls	r2, r3, #5
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	4413      	add	r3, r2
 8006090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	0151      	lsls	r1, r2, #5
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	440a      	add	r2, r1
 800609e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060a6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d143      	bne.n	800613c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	0151      	lsls	r1, r2, #5
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060d2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	0151      	lsls	r1, r2, #5
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	440a      	add	r2, r1
 80060ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060f2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	015a      	lsls	r2, r3, #5
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	0151      	lsls	r1, r2, #5
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	440a      	add	r2, r1
 800610a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800610e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006112:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	3301      	adds	r3, #1
 8006118:	617b      	str	r3, [r7, #20]
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006120:	d81d      	bhi.n	800615e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	4413      	add	r3, r2
 800612a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006134:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006138:	d0ec      	beq.n	8006114 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800613a:	e080      	b.n	800623e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	4413      	add	r3, r2
 8006144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	0151      	lsls	r1, r2, #5
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	440a      	add	r2, r1
 8006152:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006156:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800615a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800615c:	e06f      	b.n	800623e <USB_HC_Halt+0x1f0>
          break;
 800615e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006160:	e06d      	b.n	800623e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	015a      	lsls	r2, r3, #5
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	4413      	add	r3, r2
 800616a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	0151      	lsls	r1, r2, #5
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	440a      	add	r2, r1
 8006178:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800617c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006180:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d143      	bne.n	800621a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	4413      	add	r3, r2
 800619a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	0151      	lsls	r1, r2, #5
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	440a      	add	r2, r1
 80061a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061b0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	0151      	lsls	r1, r2, #5
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	440a      	add	r2, r1
 80061c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061d0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	015a      	lsls	r2, r3, #5
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	4413      	add	r3, r2
 80061da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	0151      	lsls	r1, r2, #5
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	440a      	add	r2, r1
 80061e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061f0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	3301      	adds	r3, #1
 80061f6:	617b      	str	r3, [r7, #20]
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061fe:	d81d      	bhi.n	800623c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	4413      	add	r3, r2
 8006208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006212:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006216:	d0ec      	beq.n	80061f2 <USB_HC_Halt+0x1a4>
 8006218:	e011      	b.n	800623e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	4413      	add	r3, r2
 8006222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	0151      	lsls	r1, r2, #5
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	440a      	add	r2, r1
 8006230:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006234:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006238:	6013      	str	r3, [r2, #0]
 800623a:	e000      	b.n	800623e <USB_HC_Halt+0x1f0>
          break;
 800623c:	bf00      	nop
    }
  }

  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	371c      	adds	r7, #28
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	460b      	mov	r3, r1
 8006256:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800625c:	78fb      	ldrb	r3, [r7, #3]
 800625e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006260:	2301      	movs	r3, #1
 8006262:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	04da      	lsls	r2, r3, #19
 8006268:	4b15      	ldr	r3, [pc, #84]	; (80062c0 <USB_DoPing+0x74>)
 800626a:	4013      	ands	r3, r2
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	0151      	lsls	r1, r2, #5
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	440a      	add	r2, r1
 8006274:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006278:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800627c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	015a      	lsls	r2, r3, #5
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	4413      	add	r3, r2
 8006286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006294:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800629c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062aa:	461a      	mov	r2, r3
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	371c      	adds	r7, #28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	1ff80000 	.word	0x1ff80000

080062c4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f7ff f9a1 	bl	800561c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80062da:	2110      	movs	r1, #16
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f7ff f9d9 	bl	8005694 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7ff f9fc 	bl	80056e0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80062e8:	2300      	movs	r3, #0
 80062ea:	613b      	str	r3, [r7, #16]
 80062ec:	e01f      	b.n	800632e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006304:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800630c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006314:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	4413      	add	r3, r2
 800631e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006322:	461a      	mov	r2, r3
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	3301      	adds	r3, #1
 800632c:	613b      	str	r3, [r7, #16]
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	2b0f      	cmp	r3, #15
 8006332:	d9dc      	bls.n	80062ee <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006334:	2300      	movs	r3, #0
 8006336:	613b      	str	r3, [r7, #16]
 8006338:	e034      	b.n	80063a4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	4413      	add	r3, r2
 8006342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006350:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006358:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006360:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	015a      	lsls	r2, r3, #5
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	4413      	add	r3, r2
 800636a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636e:	461a      	mov	r2, r3
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	3301      	adds	r3, #1
 8006378:	617b      	str	r3, [r7, #20]
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006380:	d80c      	bhi.n	800639c <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4413      	add	r3, r2
 800638a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006394:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006398:	d0ec      	beq.n	8006374 <USB_StopHost+0xb0>
 800639a:	e000      	b.n	800639e <USB_StopHost+0xda>
        break;
 800639c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	3301      	adds	r3, #1
 80063a2:	613b      	str	r3, [r7, #16]
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	2b0f      	cmp	r3, #15
 80063a8:	d9c7      	bls.n	800633a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063b0:	461a      	mov	r2, r3
 80063b2:	f04f 33ff 	mov.w	r3, #4294967295
 80063b6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f04f 32ff 	mov.w	r2, #4294967295
 80063be:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f7ff f91a 	bl	80055fa <USB_EnableGlobalInt>

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3718      	adds	r7, #24
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80063d0:	b590      	push	{r4, r7, lr}
 80063d2:	b089      	sub	sp, #36	; 0x24
 80063d4:	af04      	add	r7, sp, #16
 80063d6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80063d8:	2301      	movs	r3, #1
 80063da:	2202      	movs	r2, #2
 80063dc:	2102      	movs	r1, #2
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 fc68 	bl	8006cb4 <USBH_FindInterface>
 80063e4:	4603      	mov	r3, r0
 80063e6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
 80063ea:	2bff      	cmp	r3, #255	; 0xff
 80063ec:	d002      	beq.n	80063f4 <USBH_CDC_InterfaceInit+0x24>
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d901      	bls.n	80063f8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80063f4:	2302      	movs	r3, #2
 80063f6:	e13d      	b.n	8006674 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
 80063fa:	4619      	mov	r1, r3
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 fc3d 	bl	8006c7c <USBH_SelectInterface>
 8006402:	4603      	mov	r3, r0
 8006404:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006406:	7bbb      	ldrb	r3, [r7, #14]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d001      	beq.n	8006410 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800640c:	2302      	movs	r3, #2
 800640e:	e131      	b.n	8006674 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006416:	2050      	movs	r0, #80	; 0x50
 8006418:	f002 fa04 	bl	8008824 <malloc>
 800641c:	4603      	mov	r3, r0
 800641e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006426:	69db      	ldr	r3, [r3, #28]
 8006428:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006430:	2302      	movs	r3, #2
 8006432:	e11f      	b.n	8006674 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006434:	2250      	movs	r2, #80	; 0x50
 8006436:	2100      	movs	r1, #0
 8006438:	68b8      	ldr	r0, [r7, #8]
 800643a:	f002 fa03 	bl	8008844 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800643e:	7bfb      	ldrb	r3, [r7, #15]
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	211a      	movs	r1, #26
 8006444:	fb01 f303 	mul.w	r3, r1, r3
 8006448:	4413      	add	r3, r2
 800644a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	b25b      	sxtb	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	da15      	bge.n	8006482 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006456:	7bfb      	ldrb	r3, [r7, #15]
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	211a      	movs	r1, #26
 800645c:	fb01 f303 	mul.w	r3, r1, r3
 8006460:	4413      	add	r3, r2
 8006462:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006466:	781a      	ldrb	r2, [r3, #0]
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800646c:	7bfb      	ldrb	r3, [r7, #15]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	211a      	movs	r1, #26
 8006472:	fb01 f303 	mul.w	r3, r1, r3
 8006476:	4413      	add	r3, r2
 8006478:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800647c:	881a      	ldrh	r2, [r3, #0]
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	785b      	ldrb	r3, [r3, #1]
 8006486:	4619      	mov	r1, r3
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f001 fe36 	bl	80080fa <USBH_AllocPipe>
 800648e:	4603      	mov	r3, r0
 8006490:	461a      	mov	r2, r3
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	7819      	ldrb	r1, [r3, #0]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	7858      	ldrb	r0, [r3, #1]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	8952      	ldrh	r2, [r2, #10]
 80064ae:	9202      	str	r2, [sp, #8]
 80064b0:	2203      	movs	r2, #3
 80064b2:	9201      	str	r2, [sp, #4]
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	4623      	mov	r3, r4
 80064b8:	4602      	mov	r2, r0
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f001 fdee 	bl	800809c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	2200      	movs	r2, #0
 80064c6:	4619      	mov	r1, r3
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f002 f8fb 	bl	80086c4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80064ce:	2300      	movs	r3, #0
 80064d0:	2200      	movs	r2, #0
 80064d2:	210a      	movs	r1, #10
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 fbed 	bl	8006cb4 <USBH_FindInterface>
 80064da:	4603      	mov	r3, r0
 80064dc:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80064de:	7bfb      	ldrb	r3, [r7, #15]
 80064e0:	2bff      	cmp	r3, #255	; 0xff
 80064e2:	d002      	beq.n	80064ea <USBH_CDC_InterfaceInit+0x11a>
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d901      	bls.n	80064ee <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80064ea:	2302      	movs	r3, #2
 80064ec:	e0c2      	b.n	8006674 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80064ee:	7bfb      	ldrb	r3, [r7, #15]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	211a      	movs	r1, #26
 80064f4:	fb01 f303 	mul.w	r3, r1, r3
 80064f8:	4413      	add	r3, r2
 80064fa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	b25b      	sxtb	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	da16      	bge.n	8006534 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006506:	7bfb      	ldrb	r3, [r7, #15]
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	211a      	movs	r1, #26
 800650c:	fb01 f303 	mul.w	r3, r1, r3
 8006510:	4413      	add	r3, r2
 8006512:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006516:	781a      	ldrb	r2, [r3, #0]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800651c:	7bfb      	ldrb	r3, [r7, #15]
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	211a      	movs	r1, #26
 8006522:	fb01 f303 	mul.w	r3, r1, r3
 8006526:	4413      	add	r3, r2
 8006528:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800652c:	881a      	ldrh	r2, [r3, #0]
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	835a      	strh	r2, [r3, #26]
 8006532:	e015      	b.n	8006560 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006534:	7bfb      	ldrb	r3, [r7, #15]
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	211a      	movs	r1, #26
 800653a:	fb01 f303 	mul.w	r3, r1, r3
 800653e:	4413      	add	r3, r2
 8006540:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006544:	781a      	ldrb	r2, [r3, #0]
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800654a:	7bfb      	ldrb	r3, [r7, #15]
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	211a      	movs	r1, #26
 8006550:	fb01 f303 	mul.w	r3, r1, r3
 8006554:	4413      	add	r3, r2
 8006556:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800655a:	881a      	ldrh	r2, [r3, #0]
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006560:	7bfb      	ldrb	r3, [r7, #15]
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	211a      	movs	r1, #26
 8006566:	fb01 f303 	mul.w	r3, r1, r3
 800656a:	4413      	add	r3, r2
 800656c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	b25b      	sxtb	r3, r3
 8006574:	2b00      	cmp	r3, #0
 8006576:	da16      	bge.n	80065a6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	211a      	movs	r1, #26
 800657e:	fb01 f303 	mul.w	r3, r1, r3
 8006582:	4413      	add	r3, r2
 8006584:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006588:	781a      	ldrb	r2, [r3, #0]
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800658e:	7bfb      	ldrb	r3, [r7, #15]
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	211a      	movs	r1, #26
 8006594:	fb01 f303 	mul.w	r3, r1, r3
 8006598:	4413      	add	r3, r2
 800659a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800659e:	881a      	ldrh	r2, [r3, #0]
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	835a      	strh	r2, [r3, #26]
 80065a4:	e015      	b.n	80065d2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80065a6:	7bfb      	ldrb	r3, [r7, #15]
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	211a      	movs	r1, #26
 80065ac:	fb01 f303 	mul.w	r3, r1, r3
 80065b0:	4413      	add	r3, r2
 80065b2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80065b6:	781a      	ldrb	r2, [r3, #0]
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	211a      	movs	r1, #26
 80065c2:	fb01 f303 	mul.w	r3, r1, r3
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80065cc:	881a      	ldrh	r2, [r3, #0]
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	7b9b      	ldrb	r3, [r3, #14]
 80065d6:	4619      	mov	r1, r3
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f001 fd8e 	bl	80080fa <USBH_AllocPipe>
 80065de:	4603      	mov	r3, r0
 80065e0:	461a      	mov	r2, r3
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	7bdb      	ldrb	r3, [r3, #15]
 80065ea:	4619      	mov	r1, r3
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f001 fd84 	bl	80080fa <USBH_AllocPipe>
 80065f2:	4603      	mov	r3, r0
 80065f4:	461a      	mov	r2, r3
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	7b59      	ldrb	r1, [r3, #13]
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	7b98      	ldrb	r0, [r3, #14]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	8b12      	ldrh	r2, [r2, #24]
 8006612:	9202      	str	r2, [sp, #8]
 8006614:	2202      	movs	r2, #2
 8006616:	9201      	str	r2, [sp, #4]
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	4623      	mov	r3, r4
 800661c:	4602      	mov	r2, r0
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f001 fd3c 	bl	800809c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	7b19      	ldrb	r1, [r3, #12]
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	7bd8      	ldrb	r0, [r3, #15]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	8b52      	ldrh	r2, [r2, #26]
 800663c:	9202      	str	r2, [sp, #8]
 800663e:	2202      	movs	r2, #2
 8006640:	9201      	str	r2, [sp, #4]
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	4623      	mov	r3, r4
 8006646:	4602      	mov	r2, r0
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f001 fd27 	bl	800809c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	7b5b      	ldrb	r3, [r3, #13]
 800665a:	2200      	movs	r2, #0
 800665c:	4619      	mov	r1, r3
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f002 f830 	bl	80086c4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	7b1b      	ldrb	r3, [r3, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	4619      	mov	r1, r3
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f002 f829 	bl	80086c4 <USBH_LL_SetToggle>

  return USBH_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	bd90      	pop	{r4, r7, pc}

0800667c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00e      	beq.n	80066b4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	4619      	mov	r1, r3
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f001 fd1c 	bl	80080da <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	4619      	mov	r1, r3
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f001 fd47 	bl	800813c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	7b1b      	ldrb	r3, [r3, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00e      	beq.n	80066da <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	7b1b      	ldrb	r3, [r3, #12]
 80066c0:	4619      	mov	r1, r3
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f001 fd09 	bl	80080da <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	7b1b      	ldrb	r3, [r3, #12]
 80066cc:	4619      	mov	r1, r3
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f001 fd34 	bl	800813c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	7b5b      	ldrb	r3, [r3, #13]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00e      	beq.n	8006700 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	7b5b      	ldrb	r3, [r3, #13]
 80066e6:	4619      	mov	r1, r3
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f001 fcf6 	bl	80080da <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	7b5b      	ldrb	r3, [r3, #13]
 80066f2:	4619      	mov	r1, r3
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f001 fd21 	bl	800813c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006706:	69db      	ldr	r3, [r3, #28]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00b      	beq.n	8006724 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006712:	69db      	ldr	r3, [r3, #28]
 8006714:	4618      	mov	r0, r3
 8006716:	f002 f88d 	bl	8008834 <free>
    phost->pActiveClass->pData = 0U;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006720:	2200      	movs	r2, #0
 8006722:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	3340      	adds	r3, #64	; 0x40
 8006744:	4619      	mov	r1, r3
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f8b1 	bl	80068ae <GetLineCoding>
 800674c:	4603      	mov	r3, r0
 800674e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006750:	7afb      	ldrb	r3, [r7, #11]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d105      	bne.n	8006762 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800675c:	2102      	movs	r1, #2
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006762:	7afb      	ldrb	r3, [r7, #11]
}
 8006764:	4618      	mov	r0, r3
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006774:	2301      	movs	r3, #1
 8006776:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006778:	2300      	movs	r3, #0
 800677a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006782:	69db      	ldr	r3, [r3, #28]
 8006784:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800678c:	2b04      	cmp	r3, #4
 800678e:	d877      	bhi.n	8006880 <USBH_CDC_Process+0x114>
 8006790:	a201      	add	r2, pc, #4	; (adr r2, 8006798 <USBH_CDC_Process+0x2c>)
 8006792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006796:	bf00      	nop
 8006798:	080067ad 	.word	0x080067ad
 800679c:	080067b3 	.word	0x080067b3
 80067a0:	080067e3 	.word	0x080067e3
 80067a4:	08006857 	.word	0x08006857
 80067a8:	08006865 	.word	0x08006865
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80067ac:	2300      	movs	r3, #0
 80067ae:	73fb      	strb	r3, [r7, #15]
      break;
 80067b0:	e06d      	b.n	800688e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067b6:	4619      	mov	r1, r3
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 f897 	bl	80068ec <SetLineCoding>
 80067be:	4603      	mov	r3, r0
 80067c0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80067c2:	7bbb      	ldrb	r3, [r7, #14]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d104      	bne.n	80067d2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	2202      	movs	r2, #2
 80067cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80067d0:	e058      	b.n	8006884 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80067d2:	7bbb      	ldrb	r3, [r7, #14]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d055      	beq.n	8006884 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2204      	movs	r2, #4
 80067dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80067e0:	e050      	b.n	8006884 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	3340      	adds	r3, #64	; 0x40
 80067e6:	4619      	mov	r1, r3
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 f860 	bl	80068ae <GetLineCoding>
 80067ee:	4603      	mov	r3, r0
 80067f0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80067f2:	7bbb      	ldrb	r3, [r7, #14]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d126      	bne.n	8006846 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800680a:	791b      	ldrb	r3, [r3, #4]
 800680c:	429a      	cmp	r2, r3
 800680e:	d13b      	bne.n	8006888 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800681a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800681c:	429a      	cmp	r2, r3
 800681e:	d133      	bne.n	8006888 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800682a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800682c:	429a      	cmp	r2, r3
 800682e:	d12b      	bne.n	8006888 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006838:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800683a:	429a      	cmp	r2, r3
 800683c:	d124      	bne.n	8006888 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 f95a 	bl	8006af8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006844:	e020      	b.n	8006888 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006846:	7bbb      	ldrb	r3, [r7, #14]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d01d      	beq.n	8006888 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	2204      	movs	r2, #4
 8006850:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006854:	e018      	b.n	8006888 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f867 	bl	800692a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 f8dc 	bl	8006a1a <CDC_ProcessReception>
      break;
 8006862:	e014      	b.n	800688e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006864:	2100      	movs	r1, #0
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 ffe5 	bl	8007836 <USBH_ClrFeature>
 800686c:	4603      	mov	r3, r0
 800686e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006870:	7bbb      	ldrb	r3, [r7, #14]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10a      	bne.n	800688c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800687e:	e005      	b.n	800688c <USBH_CDC_Process+0x120>

    default:
      break;
 8006880:	bf00      	nop
 8006882:	e004      	b.n	800688e <USBH_CDC_Process+0x122>
      break;
 8006884:	bf00      	nop
 8006886:	e002      	b.n	800688e <USBH_CDC_Process+0x122>
      break;
 8006888:	bf00      	nop
 800688a:	e000      	b.n	800688e <USBH_CDC_Process+0x122>
      break;
 800688c:	bf00      	nop

  }

  return status;
 800688e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	370c      	adds	r7, #12
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b082      	sub	sp, #8
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	22a1      	movs	r2, #161	; 0xa1
 80068bc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2221      	movs	r2, #33	; 0x21
 80068c2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2207      	movs	r2, #7
 80068d4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2207      	movs	r2, #7
 80068da:	4619      	mov	r1, r3
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f001 f98a 	bl	8007bf6 <USBH_CtlReq>
 80068e2:	4603      	mov	r3, r0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2221      	movs	r2, #33	; 0x21
 80068fa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2220      	movs	r2, #32
 8006900:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2207      	movs	r2, #7
 8006912:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	2207      	movs	r2, #7
 8006918:	4619      	mov	r1, r3
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f001 f96b 	bl	8007bf6 <USBH_CtlReq>
 8006920:	4603      	mov	r3, r0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b086      	sub	sp, #24
 800692e:	af02      	add	r7, sp, #8
 8006930:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800693c:	2300      	movs	r3, #0
 800693e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006946:	2b01      	cmp	r3, #1
 8006948:	d002      	beq.n	8006950 <CDC_ProcessTransmission+0x26>
 800694a:	2b02      	cmp	r3, #2
 800694c:	d025      	beq.n	800699a <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800694e:	e060      	b.n	8006a12 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	8b12      	ldrh	r2, [r2, #24]
 8006958:	4293      	cmp	r3, r2
 800695a:	d90c      	bls.n	8006976 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	69d9      	ldr	r1, [r3, #28]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	8b1a      	ldrh	r2, [r3, #24]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	7b58      	ldrb	r0, [r3, #13]
 8006968:	2301      	movs	r3, #1
 800696a:	9300      	str	r3, [sp, #0]
 800696c:	4603      	mov	r3, r0
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f001 fb51 	bl	8008016 <USBH_BulkSendData>
 8006974:	e00c      	b.n	8006990 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800697e:	b29a      	uxth	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	7b58      	ldrb	r0, [r3, #13]
 8006984:	2301      	movs	r3, #1
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	4603      	mov	r3, r0
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f001 fb43 	bl	8008016 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2202      	movs	r2, #2
 8006994:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006998:	e03b      	b.n	8006a12 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	7b5b      	ldrb	r3, [r3, #13]
 800699e:	4619      	mov	r1, r3
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f001 fe65 	bl	8008670 <USBH_LL_GetURBState>
 80069a6:	4603      	mov	r3, r0
 80069a8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80069aa:	7afb      	ldrb	r3, [r7, #11]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d128      	bne.n	8006a02 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	8b12      	ldrh	r2, [r2, #24]
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d90e      	bls.n	80069da <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	8b12      	ldrh	r2, [r2, #24]
 80069c4:	1a9a      	subs	r2, r3, r2
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	8b12      	ldrh	r2, [r2, #24]
 80069d2:	441a      	add	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	61da      	str	r2, [r3, #28]
 80069d8:	e002      	b.n	80069e0 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d004      	beq.n	80069f2 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80069f0:	e00e      	b.n	8006a10 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f868 	bl	8006ad0 <USBH_CDC_TransmitCallback>
      break;
 8006a00:	e006      	b.n	8006a10 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8006a02:	7afb      	ldrb	r3, [r7, #11]
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d103      	bne.n	8006a10 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006a10:	bf00      	nop
  }
}
 8006a12:	bf00      	nop
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b086      	sub	sp, #24
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006a36:	2b03      	cmp	r3, #3
 8006a38:	d002      	beq.n	8006a40 <CDC_ProcessReception+0x26>
 8006a3a:	2b04      	cmp	r3, #4
 8006a3c:	d00e      	beq.n	8006a5c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006a3e:	e043      	b.n	8006ac8 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	6a19      	ldr	r1, [r3, #32]
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	8b5a      	ldrh	r2, [r3, #26]
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	7b1b      	ldrb	r3, [r3, #12]
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f001 fb07 	bl	8008060 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	2204      	movs	r2, #4
 8006a56:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006a5a:	e035      	b.n	8006ac8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	7b1b      	ldrb	r3, [r3, #12]
 8006a60:	4619      	mov	r1, r3
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f001 fe04 	bl	8008670 <USBH_LL_GetURBState>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006a6c:	7cfb      	ldrb	r3, [r7, #19]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d129      	bne.n	8006ac6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	7b1b      	ldrb	r3, [r3, #12]
 8006a76:	4619      	mov	r1, r3
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f001 fd67 	bl	800854c <USBH_LL_GetLastXferSize>
 8006a7e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d016      	beq.n	8006ab8 <CDC_ProcessReception+0x9e>
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	8b5b      	ldrh	r3, [r3, #26]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d910      	bls.n	8006ab8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	1ad2      	subs	r2, r2, r3
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	6a1a      	ldr	r2, [r3, #32]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	441a      	add	r2, r3
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	2203      	movs	r2, #3
 8006ab2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006ab6:	e006      	b.n	8006ac6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f80f 	bl	8006ae4 <USBH_CDC_ReceiveCallback>
      break;
 8006ac6:	bf00      	nop
  }
}
 8006ac8:	bf00      	nop
 8006aca:	3718      	adds	r7, #24
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006aec:	bf00      	nop
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	4613      	mov	r3, r2
 8006b18:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006b20:	2302      	movs	r3, #2
 8006b22:	e029      	b.n	8006b78 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	79fa      	ldrb	r2, [r7, #7]
 8006b28:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f000 f81f 	bl	8006b80 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d003      	beq.n	8006b70 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f001 fc39 	bl	80083e8 <USBH_LL_Init>

  return USBH_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	60fb      	str	r3, [r7, #12]
 8006b90:	e009      	b.n	8006ba6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	33e0      	adds	r3, #224	; 0xe0
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4413      	add	r3, r2
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	60fb      	str	r3, [r7, #12]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2b0e      	cmp	r3, #14
 8006baa:	d9f2      	bls.n	8006b92 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006bac:	2300      	movs	r3, #0
 8006bae:	60fb      	str	r3, [r7, #12]
 8006bb0:	e009      	b.n	8006bc6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	60fb      	str	r3, [r7, #12]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bcc:	d3f1      	bcc.n	8006bb2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2240      	movs	r2, #64	; 0x40
 8006bf2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3714      	adds	r7, #20
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d016      	beq.n	8006c6a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10e      	bne.n	8006c64 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006c4c:	1c59      	adds	r1, r3, #1
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	33de      	adds	r3, #222	; 0xde
 8006c58:	6839      	ldr	r1, [r7, #0]
 8006c5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	73fb      	strb	r3, [r7, #15]
 8006c62:	e004      	b.n	8006c6e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006c64:	2302      	movs	r3, #2
 8006c66:	73fb      	strb	r3, [r7, #15]
 8006c68:	e001      	b.n	8006c6e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3714      	adds	r7, #20
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	460b      	mov	r3, r1
 8006c86:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006c92:	78fa      	ldrb	r2, [r7, #3]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d204      	bcs.n	8006ca2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	78fa      	ldrb	r2, [r7, #3]
 8006c9c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006ca0:	e001      	b.n	8006ca6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3714      	adds	r7, #20
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b087      	sub	sp, #28
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	4608      	mov	r0, r1
 8006cbe:	4611      	mov	r1, r2
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	70fb      	strb	r3, [r7, #3]
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	70bb      	strb	r3, [r7, #2]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006cdc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006cde:	e025      	b.n	8006d2c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006ce0:	7dfb      	ldrb	r3, [r7, #23]
 8006ce2:	221a      	movs	r2, #26
 8006ce4:	fb02 f303 	mul.w	r3, r2, r3
 8006ce8:	3308      	adds	r3, #8
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	4413      	add	r3, r2
 8006cee:	3302      	adds	r3, #2
 8006cf0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	795b      	ldrb	r3, [r3, #5]
 8006cf6:	78fa      	ldrb	r2, [r7, #3]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d002      	beq.n	8006d02 <USBH_FindInterface+0x4e>
 8006cfc:	78fb      	ldrb	r3, [r7, #3]
 8006cfe:	2bff      	cmp	r3, #255	; 0xff
 8006d00:	d111      	bne.n	8006d26 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006d06:	78ba      	ldrb	r2, [r7, #2]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d002      	beq.n	8006d12 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006d0c:	78bb      	ldrb	r3, [r7, #2]
 8006d0e:	2bff      	cmp	r3, #255	; 0xff
 8006d10:	d109      	bne.n	8006d26 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006d16:	787a      	ldrb	r2, [r7, #1]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d002      	beq.n	8006d22 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006d1c:	787b      	ldrb	r3, [r7, #1]
 8006d1e:	2bff      	cmp	r3, #255	; 0xff
 8006d20:	d101      	bne.n	8006d26 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006d22:	7dfb      	ldrb	r3, [r7, #23]
 8006d24:	e006      	b.n	8006d34 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006d26:	7dfb      	ldrb	r3, [r7, #23]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006d2c:	7dfb      	ldrb	r3, [r7, #23]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d9d6      	bls.n	8006ce0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006d32:	23ff      	movs	r3, #255	; 0xff
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	371c      	adds	r7, #28
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f001 fb89 	bl	8008460 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006d4e:	2101      	movs	r1, #1
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f001 fca0 	bl	8008696 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b088      	sub	sp, #32
 8006d64:	af04      	add	r7, sp, #16
 8006d66:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006d68:	2302      	movs	r3, #2
 8006d6a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d102      	bne.n	8006d82 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2203      	movs	r2, #3
 8006d80:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b0b      	cmp	r3, #11
 8006d8a:	f200 81b3 	bhi.w	80070f4 <USBH_Process+0x394>
 8006d8e:	a201      	add	r2, pc, #4	; (adr r2, 8006d94 <USBH_Process+0x34>)
 8006d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d94:	08006dc5 	.word	0x08006dc5
 8006d98:	08006df7 	.word	0x08006df7
 8006d9c:	08006e5f 	.word	0x08006e5f
 8006da0:	0800708f 	.word	0x0800708f
 8006da4:	080070f5 	.word	0x080070f5
 8006da8:	08006f03 	.word	0x08006f03
 8006dac:	08007035 	.word	0x08007035
 8006db0:	08006f39 	.word	0x08006f39
 8006db4:	08006f59 	.word	0x08006f59
 8006db8:	08006f79 	.word	0x08006f79
 8006dbc:	08006fa7 	.word	0x08006fa7
 8006dc0:	08007077 	.word	0x08007077
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f000 8193 	beq.w	80070f8 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006dd8:	20c8      	movs	r0, #200	; 0xc8
 8006dda:	f001 fca6 	bl	800872a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f001 fb99 	bl	8008516 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006df4:	e180      	b.n	80070f8 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d107      	bne.n	8006e10 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006e0e:	e182      	b.n	8007116 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006e16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e1a:	d914      	bls.n	8006e46 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006e22:	3301      	adds	r3, #1
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006e32:	2b03      	cmp	r3, #3
 8006e34:	d903      	bls.n	8006e3e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	220d      	movs	r2, #13
 8006e3a:	701a      	strb	r2, [r3, #0]
      break;
 8006e3c:	e16b      	b.n	8007116 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	701a      	strb	r2, [r3, #0]
      break;
 8006e44:	e167      	b.n	8007116 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006e4c:	f103 020a 	add.w	r2, r3, #10
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006e56:	200a      	movs	r0, #10
 8006e58:	f001 fc67 	bl	800872a <USBH_Delay>
      break;
 8006e5c:	e15b      	b.n	8007116 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d005      	beq.n	8006e74 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e6e:	2104      	movs	r1, #4
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006e74:	2064      	movs	r0, #100	; 0x64
 8006e76:	f001 fc58 	bl	800872a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f001 fb26 	bl	80084cc <USBH_LL_GetSpeed>
 8006e80:	4603      	mov	r3, r0
 8006e82:	461a      	mov	r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2205      	movs	r2, #5
 8006e8e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006e90:	2100      	movs	r1, #0
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f001 f931 	bl	80080fa <USBH_AllocPipe>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006ea0:	2180      	movs	r1, #128	; 0x80
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f001 f929 	bl	80080fa <USBH_AllocPipe>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	461a      	mov	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	7919      	ldrb	r1, [r3, #4]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006ec4:	b292      	uxth	r2, r2
 8006ec6:	9202      	str	r2, [sp, #8]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	9201      	str	r2, [sp, #4]
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2280      	movs	r2, #128	; 0x80
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f001 f8e2 	bl	800809c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	7959      	ldrb	r1, [r3, #5]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006eec:	b292      	uxth	r2, r2
 8006eee:	9202      	str	r2, [sp, #8]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	9201      	str	r2, [sp, #4]
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2200      	movs	r2, #0
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f001 f8ce 	bl	800809c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006f00:	e109      	b.n	8007116 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f90c 	bl	8007120 <USBH_HandleEnum>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006f0c:	7bbb      	ldrb	r3, [r7, #14]
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f040 80f3 	bne.w	80070fc <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d103      	bne.n	8006f30 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2208      	movs	r2, #8
 8006f2c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006f2e:	e0e5      	b.n	80070fc <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2207      	movs	r2, #7
 8006f34:	701a      	strb	r2, [r3, #0]
      break;
 8006f36:	e0e1      	b.n	80070fc <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f000 80de 	beq.w	8007100 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2208      	movs	r2, #8
 8006f54:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006f56:	e0d3      	b.n	8007100 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	4619      	mov	r1, r3
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 fc20 	bl	80077a8 <USBH_SetCfg>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f040 80ca 	bne.w	8007104 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2209      	movs	r2, #9
 8006f74:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006f76:	e0c5      	b.n	8007104 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006f7e:	f003 0320 	and.w	r3, r3, #32
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00b      	beq.n	8006f9e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006f86:	2101      	movs	r1, #1
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fc30 	bl	80077ee <USBH_SetFeature>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f040 80b9 	bne.w	8007108 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	220a      	movs	r2, #10
 8006f9a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006f9c:	e0b4      	b.n	8007108 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	220a      	movs	r2, #10
 8006fa2:	701a      	strb	r2, [r3, #0]
      break;
 8006fa4:	e0b0      	b.n	8007108 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f000 80ad 	beq.w	800710c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006fba:	2300      	movs	r3, #0
 8006fbc:	73fb      	strb	r3, [r7, #15]
 8006fbe:	e016      	b.n	8006fee <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006fc0:	7bfa      	ldrb	r2, [r7, #15]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	32de      	adds	r2, #222	; 0xde
 8006fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fca:	791a      	ldrb	r2, [r3, #4]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d108      	bne.n	8006fe8 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006fd6:	7bfa      	ldrb	r2, [r7, #15]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	32de      	adds	r2, #222	; 0xde
 8006fdc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006fe6:	e005      	b.n	8006ff4 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
 8006fea:	3301      	adds	r3, #1
 8006fec:	73fb      	strb	r3, [r7, #15]
 8006fee:	7bfb      	ldrb	r3, [r7, #15]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d0e5      	beq.n	8006fc0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d016      	beq.n	800702c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	4798      	blx	r3
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d109      	bne.n	8007024 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2206      	movs	r2, #6
 8007014:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800701c:	2103      	movs	r1, #3
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007022:	e073      	b.n	800710c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	220d      	movs	r2, #13
 8007028:	701a      	strb	r2, [r3, #0]
      break;
 800702a:	e06f      	b.n	800710c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	220d      	movs	r2, #13
 8007030:	701a      	strb	r2, [r3, #0]
      break;
 8007032:	e06b      	b.n	800710c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800703a:	2b00      	cmp	r3, #0
 800703c:	d017      	beq.n	800706e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	4798      	blx	r3
 800704a:	4603      	mov	r3, r0
 800704c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800704e:	7bbb      	ldrb	r3, [r7, #14]
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b00      	cmp	r3, #0
 8007054:	d103      	bne.n	800705e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	220b      	movs	r2, #11
 800705a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800705c:	e058      	b.n	8007110 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800705e:	7bbb      	ldrb	r3, [r7, #14]
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b02      	cmp	r3, #2
 8007064:	d154      	bne.n	8007110 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	220d      	movs	r2, #13
 800706a:	701a      	strb	r2, [r3, #0]
      break;
 800706c:	e050      	b.n	8007110 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	220d      	movs	r2, #13
 8007072:	701a      	strb	r2, [r3, #0]
      break;
 8007074:	e04c      	b.n	8007110 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800707c:	2b00      	cmp	r3, #0
 800707e:	d049      	beq.n	8007114 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007086:	695b      	ldr	r3, [r3, #20]
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	4798      	blx	r3
      }
      break;
 800708c:	e042      	b.n	8007114 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f7ff fd72 	bl	8006b80 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d009      	beq.n	80070ba <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d005      	beq.n	80070d0 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070ca:	2105      	movs	r1, #5
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d107      	bne.n	80070ec <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7ff fe2b 	bl	8006d40 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80070ea:	e014      	b.n	8007116 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f001 f9b7 	bl	8008460 <USBH_LL_Start>
      break;
 80070f2:	e010      	b.n	8007116 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80070f4:	bf00      	nop
 80070f6:	e00e      	b.n	8007116 <USBH_Process+0x3b6>
      break;
 80070f8:	bf00      	nop
 80070fa:	e00c      	b.n	8007116 <USBH_Process+0x3b6>
      break;
 80070fc:	bf00      	nop
 80070fe:	e00a      	b.n	8007116 <USBH_Process+0x3b6>
    break;
 8007100:	bf00      	nop
 8007102:	e008      	b.n	8007116 <USBH_Process+0x3b6>
      break;
 8007104:	bf00      	nop
 8007106:	e006      	b.n	8007116 <USBH_Process+0x3b6>
      break;
 8007108:	bf00      	nop
 800710a:	e004      	b.n	8007116 <USBH_Process+0x3b6>
      break;
 800710c:	bf00      	nop
 800710e:	e002      	b.n	8007116 <USBH_Process+0x3b6>
      break;
 8007110:	bf00      	nop
 8007112:	e000      	b.n	8007116 <USBH_Process+0x3b6>
      break;
 8007114:	bf00      	nop
  }
  return USBH_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b088      	sub	sp, #32
 8007124:	af04      	add	r7, sp, #16
 8007126:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007128:	2301      	movs	r3, #1
 800712a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800712c:	2301      	movs	r3, #1
 800712e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	785b      	ldrb	r3, [r3, #1]
 8007134:	2b07      	cmp	r3, #7
 8007136:	f200 81c1 	bhi.w	80074bc <USBH_HandleEnum+0x39c>
 800713a:	a201      	add	r2, pc, #4	; (adr r2, 8007140 <USBH_HandleEnum+0x20>)
 800713c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007140:	08007161 	.word	0x08007161
 8007144:	0800721f 	.word	0x0800721f
 8007148:	08007289 	.word	0x08007289
 800714c:	08007317 	.word	0x08007317
 8007150:	08007381 	.word	0x08007381
 8007154:	080073f1 	.word	0x080073f1
 8007158:	08007437 	.word	0x08007437
 800715c:	0800747d 	.word	0x0800747d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007160:	2108      	movs	r1, #8
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fa50 	bl	8007608 <USBH_Get_DevDesc>
 8007168:	4603      	mov	r3, r0
 800716a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800716c:	7bbb      	ldrb	r3, [r7, #14]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d130      	bne.n	80071d4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	7919      	ldrb	r1, [r3, #4]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007196:	b292      	uxth	r2, r2
 8007198:	9202      	str	r2, [sp, #8]
 800719a:	2200      	movs	r2, #0
 800719c:	9201      	str	r2, [sp, #4]
 800719e:	9300      	str	r3, [sp, #0]
 80071a0:	4603      	mov	r3, r0
 80071a2:	2280      	movs	r2, #128	; 0x80
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 ff79 	bl	800809c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	7959      	ldrb	r1, [r3, #5]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80071be:	b292      	uxth	r2, r2
 80071c0:	9202      	str	r2, [sp, #8]
 80071c2:	2200      	movs	r2, #0
 80071c4:	9201      	str	r2, [sp, #4]
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	4603      	mov	r3, r0
 80071ca:	2200      	movs	r2, #0
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 ff65 	bl	800809c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80071d2:	e175      	b.n	80074c0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071d4:	7bbb      	ldrb	r3, [r7, #14]
 80071d6:	2b03      	cmp	r3, #3
 80071d8:	f040 8172 	bne.w	80074c0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071e2:	3301      	adds	r3, #1
 80071e4:	b2da      	uxtb	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	d903      	bls.n	80071fe <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	220d      	movs	r2, #13
 80071fa:	701a      	strb	r2, [r3, #0]
      break;
 80071fc:	e160      	b.n	80074c0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	795b      	ldrb	r3, [r3, #5]
 8007202:	4619      	mov	r1, r3
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 ff99 	bl	800813c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	791b      	ldrb	r3, [r3, #4]
 800720e:	4619      	mov	r1, r3
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 ff93 	bl	800813c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	701a      	strb	r2, [r3, #0]
      break;
 800721c:	e150      	b.n	80074c0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800721e:	2112      	movs	r1, #18
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f9f1 	bl	8007608 <USBH_Get_DevDesc>
 8007226:	4603      	mov	r3, r0
 8007228:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800722a:	7bbb      	ldrb	r3, [r7, #14]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d103      	bne.n	8007238 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2202      	movs	r2, #2
 8007234:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007236:	e145      	b.n	80074c4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007238:	7bbb      	ldrb	r3, [r7, #14]
 800723a:	2b03      	cmp	r3, #3
 800723c:	f040 8142 	bne.w	80074c4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007246:	3301      	adds	r3, #1
 8007248:	b2da      	uxtb	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007256:	2b03      	cmp	r3, #3
 8007258:	d903      	bls.n	8007262 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	220d      	movs	r2, #13
 800725e:	701a      	strb	r2, [r3, #0]
      break;
 8007260:	e130      	b.n	80074c4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	795b      	ldrb	r3, [r3, #5]
 8007266:	4619      	mov	r1, r3
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 ff67 	bl	800813c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	791b      	ldrb	r3, [r3, #4]
 8007272:	4619      	mov	r1, r3
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 ff61 	bl	800813c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	701a      	strb	r2, [r3, #0]
      break;
 8007286:	e11d      	b.n	80074c4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007288:	2101      	movs	r1, #1
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fa68 	bl	8007760 <USBH_SetAddress>
 8007290:	4603      	mov	r3, r0
 8007292:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007294:	7bbb      	ldrb	r3, [r7, #14]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d132      	bne.n	8007300 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800729a:	2002      	movs	r0, #2
 800729c:	f001 fa45 	bl	800872a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2203      	movs	r2, #3
 80072ac:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	7919      	ldrb	r1, [r3, #4]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80072c2:	b292      	uxth	r2, r2
 80072c4:	9202      	str	r2, [sp, #8]
 80072c6:	2200      	movs	r2, #0
 80072c8:	9201      	str	r2, [sp, #4]
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	4603      	mov	r3, r0
 80072ce:	2280      	movs	r2, #128	; 0x80
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fee3 	bl	800809c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	7959      	ldrb	r1, [r3, #5]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80072ea:	b292      	uxth	r2, r2
 80072ec:	9202      	str	r2, [sp, #8]
 80072ee:	2200      	movs	r2, #0
 80072f0:	9201      	str	r2, [sp, #4]
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	4603      	mov	r3, r0
 80072f6:	2200      	movs	r2, #0
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 fecf 	bl	800809c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80072fe:	e0e3      	b.n	80074c8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007300:	7bbb      	ldrb	r3, [r7, #14]
 8007302:	2b03      	cmp	r3, #3
 8007304:	f040 80e0 	bne.w	80074c8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	220d      	movs	r2, #13
 800730c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	705a      	strb	r2, [r3, #1]
      break;
 8007314:	e0d8      	b.n	80074c8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007316:	2109      	movs	r1, #9
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f99d 	bl	8007658 <USBH_Get_CfgDesc>
 800731e:	4603      	mov	r3, r0
 8007320:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007322:	7bbb      	ldrb	r3, [r7, #14]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d103      	bne.n	8007330 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2204      	movs	r2, #4
 800732c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800732e:	e0cd      	b.n	80074cc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007330:	7bbb      	ldrb	r3, [r7, #14]
 8007332:	2b03      	cmp	r3, #3
 8007334:	f040 80ca 	bne.w	80074cc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800733e:	3301      	adds	r3, #1
 8007340:	b2da      	uxtb	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800734e:	2b03      	cmp	r3, #3
 8007350:	d903      	bls.n	800735a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	220d      	movs	r2, #13
 8007356:	701a      	strb	r2, [r3, #0]
      break;
 8007358:	e0b8      	b.n	80074cc <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	795b      	ldrb	r3, [r3, #5]
 800735e:	4619      	mov	r1, r3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 feeb 	bl	800813c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	791b      	ldrb	r3, [r3, #4]
 800736a:	4619      	mov	r1, r3
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fee5 	bl	800813c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	701a      	strb	r2, [r3, #0]
      break;
 800737e:	e0a5      	b.n	80074cc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007386:	4619      	mov	r1, r3
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f965 	bl	8007658 <USBH_Get_CfgDesc>
 800738e:	4603      	mov	r3, r0
 8007390:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007392:	7bbb      	ldrb	r3, [r7, #14]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d103      	bne.n	80073a0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2205      	movs	r2, #5
 800739c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800739e:	e097      	b.n	80074d0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073a0:	7bbb      	ldrb	r3, [r7, #14]
 80073a2:	2b03      	cmp	r3, #3
 80073a4:	f040 8094 	bne.w	80074d0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073ae:	3301      	adds	r3, #1
 80073b0:	b2da      	uxtb	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073be:	2b03      	cmp	r3, #3
 80073c0:	d903      	bls.n	80073ca <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	220d      	movs	r2, #13
 80073c6:	701a      	strb	r2, [r3, #0]
      break;
 80073c8:	e082      	b.n	80074d0 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	795b      	ldrb	r3, [r3, #5]
 80073ce:	4619      	mov	r1, r3
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 feb3 	bl	800813c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	791b      	ldrb	r3, [r3, #4]
 80073da:	4619      	mov	r1, r3
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fead 	bl	800813c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	701a      	strb	r2, [r3, #0]
      break;
 80073ee:	e06f      	b.n	80074d0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d019      	beq.n	800742e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007406:	23ff      	movs	r3, #255	; 0xff
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f949 	bl	80076a0 <USBH_Get_StringDesc>
 800740e:	4603      	mov	r3, r0
 8007410:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007412:	7bbb      	ldrb	r3, [r7, #14]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d103      	bne.n	8007420 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2206      	movs	r2, #6
 800741c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800741e:	e059      	b.n	80074d4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007420:	7bbb      	ldrb	r3, [r7, #14]
 8007422:	2b03      	cmp	r3, #3
 8007424:	d156      	bne.n	80074d4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2206      	movs	r2, #6
 800742a:	705a      	strb	r2, [r3, #1]
      break;
 800742c:	e052      	b.n	80074d4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2206      	movs	r2, #6
 8007432:	705a      	strb	r2, [r3, #1]
      break;
 8007434:	e04e      	b.n	80074d4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800743c:	2b00      	cmp	r3, #0
 800743e:	d019      	beq.n	8007474 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800744c:	23ff      	movs	r3, #255	; 0xff
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f926 	bl	80076a0 <USBH_Get_StringDesc>
 8007454:	4603      	mov	r3, r0
 8007456:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007458:	7bbb      	ldrb	r3, [r7, #14]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d103      	bne.n	8007466 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2207      	movs	r2, #7
 8007462:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007464:	e038      	b.n	80074d8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007466:	7bbb      	ldrb	r3, [r7, #14]
 8007468:	2b03      	cmp	r3, #3
 800746a:	d135      	bne.n	80074d8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2207      	movs	r2, #7
 8007470:	705a      	strb	r2, [r3, #1]
      break;
 8007472:	e031      	b.n	80074d8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2207      	movs	r2, #7
 8007478:	705a      	strb	r2, [r3, #1]
      break;
 800747a:	e02d      	b.n	80074d8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007482:	2b00      	cmp	r3, #0
 8007484:	d017      	beq.n	80074b6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007492:	23ff      	movs	r3, #255	; 0xff
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 f903 	bl	80076a0 <USBH_Get_StringDesc>
 800749a:	4603      	mov	r3, r0
 800749c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800749e:	7bbb      	ldrb	r3, [r7, #14]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d102      	bne.n	80074aa <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80074a4:	2300      	movs	r3, #0
 80074a6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80074a8:	e018      	b.n	80074dc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074aa:	7bbb      	ldrb	r3, [r7, #14]
 80074ac:	2b03      	cmp	r3, #3
 80074ae:	d115      	bne.n	80074dc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80074b0:	2300      	movs	r3, #0
 80074b2:	73fb      	strb	r3, [r7, #15]
      break;
 80074b4:	e012      	b.n	80074dc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80074b6:	2300      	movs	r3, #0
 80074b8:	73fb      	strb	r3, [r7, #15]
      break;
 80074ba:	e00f      	b.n	80074dc <USBH_HandleEnum+0x3bc>

    default:
      break;
 80074bc:	bf00      	nop
 80074be:	e00e      	b.n	80074de <USBH_HandleEnum+0x3be>
      break;
 80074c0:	bf00      	nop
 80074c2:	e00c      	b.n	80074de <USBH_HandleEnum+0x3be>
      break;
 80074c4:	bf00      	nop
 80074c6:	e00a      	b.n	80074de <USBH_HandleEnum+0x3be>
      break;
 80074c8:	bf00      	nop
 80074ca:	e008      	b.n	80074de <USBH_HandleEnum+0x3be>
      break;
 80074cc:	bf00      	nop
 80074ce:	e006      	b.n	80074de <USBH_HandleEnum+0x3be>
      break;
 80074d0:	bf00      	nop
 80074d2:	e004      	b.n	80074de <USBH_HandleEnum+0x3be>
      break;
 80074d4:	bf00      	nop
 80074d6:	e002      	b.n	80074de <USBH_HandleEnum+0x3be>
      break;
 80074d8:	bf00      	nop
 80074da:	e000      	b.n	80074de <USBH_HandleEnum+0x3be>
      break;
 80074dc:	bf00      	nop
  }
  return Status;
 80074de:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	683a      	ldr	r2, [r7, #0]
 80074f6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80074fa:	bf00      	nop
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b082      	sub	sp, #8
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007514:	1c5a      	adds	r2, r3, #1
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 f804 	bl	800752a <USBH_HandleSof>
}
 8007522:	bf00      	nop
 8007524:	3708      	adds	r7, #8
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b082      	sub	sp, #8
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	b2db      	uxtb	r3, r3
 8007538:	2b0b      	cmp	r3, #11
 800753a:	d10a      	bne.n	8007552 <USBH_HandleSof+0x28>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007542:	2b00      	cmp	r3, #0
 8007544:	d005      	beq.n	8007552 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	4798      	blx	r3
  }
}
 8007552:	bf00      	nop
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800755a:	b480      	push	{r7}
 800755c:	b083      	sub	sp, #12
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800756a:	bf00      	nop
}
 800756c:	370c      	adds	r7, #12
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr

08007576 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007576:	b480      	push	{r7}
 8007578:	b083      	sub	sp, #12
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007586:	bf00      	nop
}
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007592:	b480      	push	{r7}
 8007594:	b083      	sub	sp, #12
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 ff58 	bl	8008496 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	791b      	ldrb	r3, [r3, #4]
 80075ea:	4619      	mov	r1, r3
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 fda5 	bl	800813c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	795b      	ldrb	r3, [r3, #5]
 80075f6:	4619      	mov	r1, r3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 fd9f 	bl	800813c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af02      	add	r7, sp, #8
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	460b      	mov	r3, r1
 8007612:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800761a:	78fb      	ldrb	r3, [r7, #3]
 800761c:	b29b      	uxth	r3, r3
 800761e:	9300      	str	r3, [sp, #0]
 8007620:	4613      	mov	r3, r2
 8007622:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007626:	2100      	movs	r1, #0
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 f864 	bl	80076f6 <USBH_GetDescriptor>
 800762e:	4603      	mov	r3, r0
 8007630:	73fb      	strb	r3, [r7, #15]
 8007632:	7bfb      	ldrb	r3, [r7, #15]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10a      	bne.n	800764e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007644:	78fa      	ldrb	r2, [r7, #3]
 8007646:	b292      	uxth	r2, r2
 8007648:	4619      	mov	r1, r3
 800764a:	f000 f918 	bl	800787e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800764e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3710      	adds	r7, #16
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007658:	b580      	push	{r7, lr}
 800765a:	b086      	sub	sp, #24
 800765c:	af02      	add	r7, sp, #8
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	460b      	mov	r3, r1
 8007662:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	331c      	adds	r3, #28
 8007668:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800766a:	887b      	ldrh	r3, [r7, #2]
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007674:	2100      	movs	r1, #0
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f83d 	bl	80076f6 <USBH_GetDescriptor>
 800767c:	4603      	mov	r3, r0
 800767e:	72fb      	strb	r3, [r7, #11]
 8007680:	7afb      	ldrb	r3, [r7, #11]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d107      	bne.n	8007696 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800768c:	887a      	ldrh	r2, [r7, #2]
 800768e:	68f9      	ldr	r1, [r7, #12]
 8007690:	4618      	mov	r0, r3
 8007692:	f000 f964 	bl	800795e <USBH_ParseCfgDesc>
  }

  return status;
 8007696:	7afb      	ldrb	r3, [r7, #11]
}
 8007698:	4618      	mov	r0, r3
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b088      	sub	sp, #32
 80076a4:	af02      	add	r7, sp, #8
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	607a      	str	r2, [r7, #4]
 80076aa:	461a      	mov	r2, r3
 80076ac:	460b      	mov	r3, r1
 80076ae:	72fb      	strb	r3, [r7, #11]
 80076b0:	4613      	mov	r3, r2
 80076b2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80076b4:	7afb      	ldrb	r3, [r7, #11]
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80076bc:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80076c4:	893b      	ldrh	r3, [r7, #8]
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	460b      	mov	r3, r1
 80076ca:	2100      	movs	r1, #0
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f000 f812 	bl	80076f6 <USBH_GetDescriptor>
 80076d2:	4603      	mov	r3, r0
 80076d4:	75fb      	strb	r3, [r7, #23]
 80076d6:	7dfb      	ldrb	r3, [r7, #23]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d107      	bne.n	80076ec <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80076e2:	893a      	ldrh	r2, [r7, #8]
 80076e4:	6879      	ldr	r1, [r7, #4]
 80076e6:	4618      	mov	r0, r3
 80076e8:	f000 fa37 	bl	8007b5a <USBH_ParseStringDesc>
  }

  return status;
 80076ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3718      	adds	r7, #24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b084      	sub	sp, #16
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	60f8      	str	r0, [r7, #12]
 80076fe:	607b      	str	r3, [r7, #4]
 8007700:	460b      	mov	r3, r1
 8007702:	72fb      	strb	r3, [r7, #11]
 8007704:	4613      	mov	r3, r2
 8007706:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	789b      	ldrb	r3, [r3, #2]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d11c      	bne.n	800774a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007710:	7afb      	ldrb	r3, [r7, #11]
 8007712:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007716:	b2da      	uxtb	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2206      	movs	r2, #6
 8007720:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	893a      	ldrh	r2, [r7, #8]
 8007726:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007728:	893b      	ldrh	r3, [r7, #8]
 800772a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800772e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007732:	d104      	bne.n	800773e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f240 4209 	movw	r2, #1033	; 0x409
 800773a:	829a      	strh	r2, [r3, #20]
 800773c:	e002      	b.n	8007744 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	8b3a      	ldrh	r2, [r7, #24]
 8007748:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800774a:	8b3b      	ldrh	r3, [r7, #24]
 800774c:	461a      	mov	r2, r3
 800774e:	6879      	ldr	r1, [r7, #4]
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f000 fa50 	bl	8007bf6 <USBH_CtlReq>
 8007756:	4603      	mov	r3, r0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	460b      	mov	r3, r1
 800776a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	789b      	ldrb	r3, [r3, #2]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d10f      	bne.n	8007794 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2205      	movs	r2, #5
 800777e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007780:	78fb      	ldrb	r3, [r7, #3]
 8007782:	b29a      	uxth	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007794:	2200      	movs	r2, #0
 8007796:	2100      	movs	r1, #0
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 fa2c 	bl	8007bf6 <USBH_CtlReq>
 800779e:	4603      	mov	r3, r0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	460b      	mov	r3, r1
 80077b2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	789b      	ldrb	r3, [r3, #2]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d10e      	bne.n	80077da <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2209      	movs	r2, #9
 80077c6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	887a      	ldrh	r2, [r7, #2]
 80077cc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80077da:	2200      	movs	r2, #0
 80077dc:	2100      	movs	r1, #0
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fa09 	bl	8007bf6 <USBH_CtlReq>
 80077e4:	4603      	mov	r3, r0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3708      	adds	r7, #8
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b082      	sub	sp, #8
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
 80077f6:	460b      	mov	r3, r1
 80077f8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	789b      	ldrb	r3, [r3, #2]
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d10f      	bne.n	8007822 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2203      	movs	r2, #3
 800780c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800780e:	78fb      	ldrb	r3, [r7, #3]
 8007810:	b29a      	uxth	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007822:	2200      	movs	r2, #0
 8007824:	2100      	movs	r1, #0
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f9e5 	bl	8007bf6 <USBH_CtlReq>
 800782c:	4603      	mov	r3, r0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b082      	sub	sp, #8
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
 800783e:	460b      	mov	r3, r1
 8007840:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	789b      	ldrb	r3, [r3, #2]
 8007846:	2b01      	cmp	r3, #1
 8007848:	d10f      	bne.n	800786a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2202      	movs	r2, #2
 800784e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800785c:	78fb      	ldrb	r3, [r7, #3]
 800785e:	b29a      	uxth	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800786a:	2200      	movs	r2, #0
 800786c:	2100      	movs	r1, #0
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f9c1 	bl	8007bf6 <USBH_CtlReq>
 8007874:	4603      	mov	r3, r0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800787e:	b480      	push	{r7}
 8007880:	b085      	sub	sp, #20
 8007882:	af00      	add	r7, sp, #0
 8007884:	60f8      	str	r0, [r7, #12]
 8007886:	60b9      	str	r1, [r7, #8]
 8007888:	4613      	mov	r3, r2
 800788a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	781a      	ldrb	r2, [r3, #0]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	785a      	ldrb	r2, [r3, #1]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	3302      	adds	r3, #2
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	3303      	adds	r3, #3
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	021b      	lsls	r3, r3, #8
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	4313      	orrs	r3, r2
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	791a      	ldrb	r2, [r3, #4]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	795a      	ldrb	r2, [r3, #5]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	799a      	ldrb	r2, [r3, #6]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	79da      	ldrb	r2, [r3, #7]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80078d8:	88fb      	ldrh	r3, [r7, #6]
 80078da:	2b08      	cmp	r3, #8
 80078dc:	d939      	bls.n	8007952 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	3308      	adds	r3, #8
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	3309      	adds	r3, #9
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	021b      	lsls	r3, r3, #8
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	4313      	orrs	r3, r2
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	330a      	adds	r3, #10
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	b29a      	uxth	r2, r3
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	330b      	adds	r3, #11
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	b29b      	uxth	r3, r3
 800790a:	021b      	lsls	r3, r3, #8
 800790c:	b29b      	uxth	r3, r3
 800790e:	4313      	orrs	r3, r2
 8007910:	b29a      	uxth	r2, r3
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	330c      	adds	r3, #12
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	b29a      	uxth	r2, r3
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	330d      	adds	r3, #13
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	b29b      	uxth	r3, r3
 8007926:	021b      	lsls	r3, r3, #8
 8007928:	b29b      	uxth	r3, r3
 800792a:	4313      	orrs	r3, r2
 800792c:	b29a      	uxth	r2, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	7b9a      	ldrb	r2, [r3, #14]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	7bda      	ldrb	r2, [r3, #15]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	7c1a      	ldrb	r2, [r3, #16]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	7c5a      	ldrb	r2, [r3, #17]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	745a      	strb	r2, [r3, #17]
  }
}
 8007952:	bf00      	nop
 8007954:	3714      	adds	r7, #20
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr

0800795e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b08a      	sub	sp, #40	; 0x28
 8007962:	af00      	add	r7, sp, #0
 8007964:	60f8      	str	r0, [r7, #12]
 8007966:	60b9      	str	r1, [r7, #8]
 8007968:	4613      	mov	r3, r2
 800796a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007970:	2300      	movs	r3, #0
 8007972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	781a      	ldrb	r2, [r3, #0]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	785a      	ldrb	r2, [r3, #1]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	3302      	adds	r3, #2
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	b29a      	uxth	r2, r3
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	3303      	adds	r3, #3
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	b29b      	uxth	r3, r3
 80079a0:	021b      	lsls	r3, r3, #8
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	4313      	orrs	r3, r2
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	791a      	ldrb	r2, [r3, #4]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	795a      	ldrb	r2, [r3, #5]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	799a      	ldrb	r2, [r3, #6]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	79da      	ldrb	r2, [r3, #7]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	7a1a      	ldrb	r2, [r3, #8]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80079d4:	88fb      	ldrh	r3, [r7, #6]
 80079d6:	2b09      	cmp	r3, #9
 80079d8:	d95f      	bls.n	8007a9a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80079da:	2309      	movs	r3, #9
 80079dc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80079de:	2300      	movs	r3, #0
 80079e0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80079e2:	e051      	b.n	8007a88 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80079e4:	f107 0316 	add.w	r3, r7, #22
 80079e8:	4619      	mov	r1, r3
 80079ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079ec:	f000 f8e8 	bl	8007bc0 <USBH_GetNextDesc>
 80079f0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80079f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f4:	785b      	ldrb	r3, [r3, #1]
 80079f6:	2b04      	cmp	r3, #4
 80079f8:	d146      	bne.n	8007a88 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80079fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079fe:	221a      	movs	r2, #26
 8007a00:	fb02 f303 	mul.w	r3, r2, r3
 8007a04:	3308      	adds	r3, #8
 8007a06:	68fa      	ldr	r2, [r7, #12]
 8007a08:	4413      	add	r3, r2
 8007a0a:	3302      	adds	r3, #2
 8007a0c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007a0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a10:	69f8      	ldr	r0, [r7, #28]
 8007a12:	f000 f846 	bl	8007aa2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007a16:	2300      	movs	r3, #0
 8007a18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007a20:	e022      	b.n	8007a68 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007a22:	f107 0316 	add.w	r3, r7, #22
 8007a26:	4619      	mov	r1, r3
 8007a28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a2a:	f000 f8c9 	bl	8007bc0 <USBH_GetNextDesc>
 8007a2e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a32:	785b      	ldrb	r3, [r3, #1]
 8007a34:	2b05      	cmp	r3, #5
 8007a36:	d117      	bne.n	8007a68 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007a38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a3c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007a40:	3201      	adds	r2, #1
 8007a42:	00d2      	lsls	r2, r2, #3
 8007a44:	211a      	movs	r1, #26
 8007a46:	fb01 f303 	mul.w	r3, r1, r3
 8007a4a:	4413      	add	r3, r2
 8007a4c:	3308      	adds	r3, #8
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	4413      	add	r3, r2
 8007a52:	3304      	adds	r3, #4
 8007a54:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007a56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a58:	69b8      	ldr	r0, [r7, #24]
 8007a5a:	f000 f851 	bl	8007b00 <USBH_ParseEPDesc>
            ep_ix++;
 8007a5e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007a62:	3301      	adds	r3, #1
 8007a64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	791b      	ldrb	r3, [r3, #4]
 8007a6c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d204      	bcs.n	8007a7e <USBH_ParseCfgDesc+0x120>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	885a      	ldrh	r2, [r3, #2]
 8007a78:	8afb      	ldrh	r3, [r7, #22]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d8d1      	bhi.n	8007a22 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007a7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a82:	3301      	adds	r3, #1
 8007a84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d804      	bhi.n	8007a9a <USBH_ParseCfgDesc+0x13c>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	885a      	ldrh	r2, [r3, #2]
 8007a94:	8afb      	ldrh	r3, [r7, #22]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d8a4      	bhi.n	80079e4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007a9a:	bf00      	nop
 8007a9c:	3728      	adds	r7, #40	; 0x28
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007aa2:	b480      	push	{r7}
 8007aa4:	b083      	sub	sp, #12
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
 8007aaa:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	781a      	ldrb	r2, [r3, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	785a      	ldrb	r2, [r3, #1]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	789a      	ldrb	r2, [r3, #2]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	78da      	ldrb	r2, [r3, #3]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	791a      	ldrb	r2, [r3, #4]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	795a      	ldrb	r2, [r3, #5]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	799a      	ldrb	r2, [r3, #6]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	79da      	ldrb	r2, [r3, #7]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	7a1a      	ldrb	r2, [r3, #8]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	721a      	strb	r2, [r3, #8]
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	781a      	ldrb	r2, [r3, #0]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	785a      	ldrb	r2, [r3, #1]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	789a      	ldrb	r2, [r3, #2]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	78da      	ldrb	r2, [r3, #3]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	3304      	adds	r3, #4
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	3305      	adds	r3, #5
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	021b      	lsls	r3, r3, #8
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	799a      	ldrb	r2, [r3, #6]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	719a      	strb	r2, [r3, #6]
}
 8007b4e:	bf00      	nop
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b087      	sub	sp, #28
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	60f8      	str	r0, [r7, #12]
 8007b62:	60b9      	str	r1, [r7, #8]
 8007b64:	4613      	mov	r3, r2
 8007b66:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	2b03      	cmp	r3, #3
 8007b70:	d120      	bne.n	8007bb4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	1e9a      	subs	r2, r3, #2
 8007b78:	88fb      	ldrh	r3, [r7, #6]
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	bf28      	it	cs
 8007b7e:	4613      	movcs	r3, r2
 8007b80:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	3302      	adds	r3, #2
 8007b86:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007b88:	2300      	movs	r3, #0
 8007b8a:	82fb      	strh	r3, [r7, #22]
 8007b8c:	e00b      	b.n	8007ba6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007b8e:	8afb      	ldrh	r3, [r7, #22]
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	4413      	add	r3, r2
 8007b94:	781a      	ldrb	r2, [r3, #0]
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007ba0:	8afb      	ldrh	r3, [r7, #22]
 8007ba2:	3302      	adds	r3, #2
 8007ba4:	82fb      	strh	r3, [r7, #22]
 8007ba6:	8afa      	ldrh	r2, [r7, #22]
 8007ba8:	8abb      	ldrh	r3, [r7, #20]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d3ef      	bcc.n	8007b8e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	701a      	strb	r2, [r3, #0]
  }
}
 8007bb4:	bf00      	nop
 8007bb6:	371c      	adds	r7, #28
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	881a      	ldrh	r2, [r3, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	4413      	add	r3, r2
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4413      	add	r3, r2
 8007be6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007be8:	68fb      	ldr	r3, [r7, #12]
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3714      	adds	r7, #20
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b086      	sub	sp, #24
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	60f8      	str	r0, [r7, #12]
 8007bfe:	60b9      	str	r1, [r7, #8]
 8007c00:	4613      	mov	r3, r2
 8007c02:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007c04:	2301      	movs	r3, #1
 8007c06:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	789b      	ldrb	r3, [r3, #2]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d002      	beq.n	8007c16 <USBH_CtlReq+0x20>
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d00f      	beq.n	8007c34 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007c14:	e027      	b.n	8007c66 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	88fa      	ldrh	r2, [r7, #6]
 8007c20:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2201      	movs	r2, #1
 8007c26:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	75fb      	strb	r3, [r7, #23]
      break;
 8007c32:	e018      	b.n	8007c66 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f000 f81b 	bl	8007c70 <USBH_HandleControl>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007c3e:	7dfb      	ldrb	r3, [r7, #23]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d002      	beq.n	8007c4a <USBH_CtlReq+0x54>
 8007c44:	7dfb      	ldrb	r3, [r7, #23]
 8007c46:	2b03      	cmp	r3, #3
 8007c48:	d106      	bne.n	8007c58 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	761a      	strb	r2, [r3, #24]
      break;
 8007c56:	e005      	b.n	8007c64 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007c58:	7dfb      	ldrb	r3, [r7, #23]
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d102      	bne.n	8007c64 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2201      	movs	r2, #1
 8007c62:	709a      	strb	r2, [r3, #2]
      break;
 8007c64:	bf00      	nop
  }
  return status;
 8007c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3718      	adds	r7, #24
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b086      	sub	sp, #24
 8007c74:	af02      	add	r7, sp, #8
 8007c76:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	7e1b      	ldrb	r3, [r3, #24]
 8007c84:	3b01      	subs	r3, #1
 8007c86:	2b0a      	cmp	r3, #10
 8007c88:	f200 8158 	bhi.w	8007f3c <USBH_HandleControl+0x2cc>
 8007c8c:	a201      	add	r2, pc, #4	; (adr r2, 8007c94 <USBH_HandleControl+0x24>)
 8007c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c92:	bf00      	nop
 8007c94:	08007cc1 	.word	0x08007cc1
 8007c98:	08007cdb 	.word	0x08007cdb
 8007c9c:	08007d45 	.word	0x08007d45
 8007ca0:	08007d6b 	.word	0x08007d6b
 8007ca4:	08007da3 	.word	0x08007da3
 8007ca8:	08007dcf 	.word	0x08007dcf
 8007cac:	08007e21 	.word	0x08007e21
 8007cb0:	08007e43 	.word	0x08007e43
 8007cb4:	08007e7f 	.word	0x08007e7f
 8007cb8:	08007ea7 	.word	0x08007ea7
 8007cbc:	08007ee5 	.word	0x08007ee5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f103 0110 	add.w	r1, r3, #16
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	795b      	ldrb	r3, [r3, #5]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 f945 	bl	8007f5c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2202      	movs	r2, #2
 8007cd6:	761a      	strb	r2, [r3, #24]
      break;
 8007cd8:	e13b      	b.n	8007f52 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	795b      	ldrb	r3, [r3, #5]
 8007cde:	4619      	mov	r1, r3
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fcc5 	bl	8008670 <USBH_LL_GetURBState>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007cea:	7bbb      	ldrb	r3, [r7, #14]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d11e      	bne.n	8007d2e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	7c1b      	ldrb	r3, [r3, #16]
 8007cf4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007cf8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	8adb      	ldrh	r3, [r3, #22]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00a      	beq.n	8007d18 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007d02:	7b7b      	ldrb	r3, [r7, #13]
 8007d04:	2b80      	cmp	r3, #128	; 0x80
 8007d06:	d103      	bne.n	8007d10 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2203      	movs	r2, #3
 8007d0c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007d0e:	e117      	b.n	8007f40 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2205      	movs	r2, #5
 8007d14:	761a      	strb	r2, [r3, #24]
      break;
 8007d16:	e113      	b.n	8007f40 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8007d18:	7b7b      	ldrb	r3, [r7, #13]
 8007d1a:	2b80      	cmp	r3, #128	; 0x80
 8007d1c:	d103      	bne.n	8007d26 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2209      	movs	r2, #9
 8007d22:	761a      	strb	r2, [r3, #24]
      break;
 8007d24:	e10c      	b.n	8007f40 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2207      	movs	r2, #7
 8007d2a:	761a      	strb	r2, [r3, #24]
      break;
 8007d2c:	e108      	b.n	8007f40 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007d2e:	7bbb      	ldrb	r3, [r7, #14]
 8007d30:	2b04      	cmp	r3, #4
 8007d32:	d003      	beq.n	8007d3c <USBH_HandleControl+0xcc>
 8007d34:	7bbb      	ldrb	r3, [r7, #14]
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	f040 8102 	bne.w	8007f40 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	220b      	movs	r2, #11
 8007d40:	761a      	strb	r2, [r3, #24]
      break;
 8007d42:	e0fd      	b.n	8007f40 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d4a:	b29a      	uxth	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6899      	ldr	r1, [r3, #8]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	899a      	ldrh	r2, [r3, #12]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	791b      	ldrb	r3, [r3, #4]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f93c 	bl	8007fda <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2204      	movs	r2, #4
 8007d66:	761a      	strb	r2, [r3, #24]
      break;
 8007d68:	e0f3      	b.n	8007f52 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	791b      	ldrb	r3, [r3, #4]
 8007d6e:	4619      	mov	r1, r3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 fc7d 	bl	8008670 <USBH_LL_GetURBState>
 8007d76:	4603      	mov	r3, r0
 8007d78:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007d7a:	7bbb      	ldrb	r3, [r7, #14]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d102      	bne.n	8007d86 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2209      	movs	r2, #9
 8007d84:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007d86:	7bbb      	ldrb	r3, [r7, #14]
 8007d88:	2b05      	cmp	r3, #5
 8007d8a:	d102      	bne.n	8007d92 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007d8c:	2303      	movs	r3, #3
 8007d8e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007d90:	e0d8      	b.n	8007f44 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007d92:	7bbb      	ldrb	r3, [r7, #14]
 8007d94:	2b04      	cmp	r3, #4
 8007d96:	f040 80d5 	bne.w	8007f44 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	220b      	movs	r2, #11
 8007d9e:	761a      	strb	r2, [r3, #24]
      break;
 8007da0:	e0d0      	b.n	8007f44 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6899      	ldr	r1, [r3, #8]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	899a      	ldrh	r2, [r3, #12]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	7958      	ldrb	r0, [r3, #5]
 8007dae:	2301      	movs	r3, #1
 8007db0:	9300      	str	r3, [sp, #0]
 8007db2:	4603      	mov	r3, r0
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 f8eb 	bl	8007f90 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2206      	movs	r2, #6
 8007dca:	761a      	strb	r2, [r3, #24]
      break;
 8007dcc:	e0c1      	b.n	8007f52 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	795b      	ldrb	r3, [r3, #5]
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 fc4b 	bl	8008670 <USBH_LL_GetURBState>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007dde:	7bbb      	ldrb	r3, [r7, #14]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d103      	bne.n	8007dec <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2207      	movs	r2, #7
 8007de8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007dea:	e0ad      	b.n	8007f48 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8007dec:	7bbb      	ldrb	r3, [r7, #14]
 8007dee:	2b05      	cmp	r3, #5
 8007df0:	d105      	bne.n	8007dfe <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	220c      	movs	r2, #12
 8007df6:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8007dfc:	e0a4      	b.n	8007f48 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007dfe:	7bbb      	ldrb	r3, [r7, #14]
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d103      	bne.n	8007e0c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2205      	movs	r2, #5
 8007e08:	761a      	strb	r2, [r3, #24]
      break;
 8007e0a:	e09d      	b.n	8007f48 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8007e0c:	7bbb      	ldrb	r3, [r7, #14]
 8007e0e:	2b04      	cmp	r3, #4
 8007e10:	f040 809a 	bne.w	8007f48 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	220b      	movs	r2, #11
 8007e18:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007e1a:	2302      	movs	r3, #2
 8007e1c:	73fb      	strb	r3, [r7, #15]
      break;
 8007e1e:	e093      	b.n	8007f48 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	791b      	ldrb	r3, [r3, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	2100      	movs	r1, #0
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 f8d6 	bl	8007fda <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2208      	movs	r2, #8
 8007e3e:	761a      	strb	r2, [r3, #24]

      break;
 8007e40:	e087      	b.n	8007f52 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	791b      	ldrb	r3, [r3, #4]
 8007e46:	4619      	mov	r1, r3
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fc11 	bl	8008670 <USBH_LL_GetURBState>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007e52:	7bbb      	ldrb	r3, [r7, #14]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d105      	bne.n	8007e64 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	220d      	movs	r2, #13
 8007e5c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007e62:	e073      	b.n	8007f4c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8007e64:	7bbb      	ldrb	r3, [r7, #14]
 8007e66:	2b04      	cmp	r3, #4
 8007e68:	d103      	bne.n	8007e72 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	220b      	movs	r2, #11
 8007e6e:	761a      	strb	r2, [r3, #24]
      break;
 8007e70:	e06c      	b.n	8007f4c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8007e72:	7bbb      	ldrb	r3, [r7, #14]
 8007e74:	2b05      	cmp	r3, #5
 8007e76:	d169      	bne.n	8007f4c <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e7c:	e066      	b.n	8007f4c <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	795a      	ldrb	r2, [r3, #5]
 8007e82:	2301      	movs	r3, #1
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	4613      	mov	r3, r2
 8007e88:	2200      	movs	r2, #0
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 f87f 	bl	8007f90 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	220a      	movs	r2, #10
 8007ea2:	761a      	strb	r2, [r3, #24]
      break;
 8007ea4:	e055      	b.n	8007f52 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	795b      	ldrb	r3, [r3, #5]
 8007eaa:	4619      	mov	r1, r3
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 fbdf 	bl	8008670 <USBH_LL_GetURBState>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007eb6:	7bbb      	ldrb	r3, [r7, #14]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d105      	bne.n	8007ec8 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	220d      	movs	r2, #13
 8007ec4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007ec6:	e043      	b.n	8007f50 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007ec8:	7bbb      	ldrb	r3, [r7, #14]
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d103      	bne.n	8007ed6 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2209      	movs	r2, #9
 8007ed2:	761a      	strb	r2, [r3, #24]
      break;
 8007ed4:	e03c      	b.n	8007f50 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8007ed6:	7bbb      	ldrb	r3, [r7, #14]
 8007ed8:	2b04      	cmp	r3, #4
 8007eda:	d139      	bne.n	8007f50 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	220b      	movs	r2, #11
 8007ee0:	761a      	strb	r2, [r3, #24]
      break;
 8007ee2:	e035      	b.n	8007f50 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	7e5b      	ldrb	r3, [r3, #25]
 8007ee8:	3301      	adds	r3, #1
 8007eea:	b2da      	uxtb	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	765a      	strb	r2, [r3, #25]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	7e5b      	ldrb	r3, [r3, #25]
 8007ef4:	2b02      	cmp	r3, #2
 8007ef6:	d806      	bhi.n	8007f06 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2201      	movs	r2, #1
 8007f02:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007f04:	e025      	b.n	8007f52 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f0c:	2106      	movs	r1, #6
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	795b      	ldrb	r3, [r3, #5]
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f90c 	bl	800813c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	791b      	ldrb	r3, [r3, #4]
 8007f28:	4619      	mov	r1, r3
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f906 	bl	800813c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007f36:	2302      	movs	r3, #2
 8007f38:	73fb      	strb	r3, [r7, #15]
      break;
 8007f3a:	e00a      	b.n	8007f52 <USBH_HandleControl+0x2e2>

    default:
      break;
 8007f3c:	bf00      	nop
 8007f3e:	e008      	b.n	8007f52 <USBH_HandleControl+0x2e2>
      break;
 8007f40:	bf00      	nop
 8007f42:	e006      	b.n	8007f52 <USBH_HandleControl+0x2e2>
      break;
 8007f44:	bf00      	nop
 8007f46:	e004      	b.n	8007f52 <USBH_HandleControl+0x2e2>
      break;
 8007f48:	bf00      	nop
 8007f4a:	e002      	b.n	8007f52 <USBH_HandleControl+0x2e2>
      break;
 8007f4c:	bf00      	nop
 8007f4e:	e000      	b.n	8007f52 <USBH_HandleControl+0x2e2>
      break;
 8007f50:	bf00      	nop
  }

  return status;
 8007f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b088      	sub	sp, #32
 8007f60:	af04      	add	r7, sp, #16
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	4613      	mov	r3, r2
 8007f68:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007f6a:	79f9      	ldrb	r1, [r7, #7]
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	9303      	str	r3, [sp, #12]
 8007f70:	2308      	movs	r3, #8
 8007f72:	9302      	str	r3, [sp, #8]
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	9301      	str	r3, [sp, #4]
 8007f78:	2300      	movs	r3, #0
 8007f7a:	9300      	str	r3, [sp, #0]
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	2200      	movs	r2, #0
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	f000 fb44 	bl	800860e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b088      	sub	sp, #32
 8007f94:	af04      	add	r7, sp, #16
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	4611      	mov	r1, r2
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	80fb      	strh	r3, [r7, #6]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d001      	beq.n	8007fb4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007fb4:	7979      	ldrb	r1, [r7, #5]
 8007fb6:	7e3b      	ldrb	r3, [r7, #24]
 8007fb8:	9303      	str	r3, [sp, #12]
 8007fba:	88fb      	ldrh	r3, [r7, #6]
 8007fbc:	9302      	str	r3, [sp, #8]
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	9301      	str	r3, [sp, #4]
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	2200      	movs	r2, #0
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f000 fb1f 	bl	800860e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b088      	sub	sp, #32
 8007fde:	af04      	add	r7, sp, #16
 8007fe0:	60f8      	str	r0, [r7, #12]
 8007fe2:	60b9      	str	r1, [r7, #8]
 8007fe4:	4611      	mov	r1, r2
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	460b      	mov	r3, r1
 8007fea:	80fb      	strh	r3, [r7, #6]
 8007fec:	4613      	mov	r3, r2
 8007fee:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007ff0:	7979      	ldrb	r1, [r7, #5]
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	9303      	str	r3, [sp, #12]
 8007ff6:	88fb      	ldrh	r3, [r7, #6]
 8007ff8:	9302      	str	r3, [sp, #8]
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	9301      	str	r3, [sp, #4]
 8007ffe:	2301      	movs	r3, #1
 8008000:	9300      	str	r3, [sp, #0]
 8008002:	2300      	movs	r3, #0
 8008004:	2201      	movs	r2, #1
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f000 fb01 	bl	800860e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800800c:	2300      	movs	r3, #0

}
 800800e:	4618      	mov	r0, r3
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b088      	sub	sp, #32
 800801a:	af04      	add	r7, sp, #16
 800801c:	60f8      	str	r0, [r7, #12]
 800801e:	60b9      	str	r1, [r7, #8]
 8008020:	4611      	mov	r1, r2
 8008022:	461a      	mov	r2, r3
 8008024:	460b      	mov	r3, r1
 8008026:	80fb      	strh	r3, [r7, #6]
 8008028:	4613      	mov	r3, r2
 800802a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008032:	2b00      	cmp	r3, #0
 8008034:	d001      	beq.n	800803a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008036:	2300      	movs	r3, #0
 8008038:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800803a:	7979      	ldrb	r1, [r7, #5]
 800803c:	7e3b      	ldrb	r3, [r7, #24]
 800803e:	9303      	str	r3, [sp, #12]
 8008040:	88fb      	ldrh	r3, [r7, #6]
 8008042:	9302      	str	r3, [sp, #8]
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	9301      	str	r3, [sp, #4]
 8008048:	2301      	movs	r3, #1
 800804a:	9300      	str	r3, [sp, #0]
 800804c:	2302      	movs	r3, #2
 800804e:	2200      	movs	r2, #0
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f000 fadc 	bl	800860e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3710      	adds	r7, #16
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b088      	sub	sp, #32
 8008064:	af04      	add	r7, sp, #16
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	4611      	mov	r1, r2
 800806c:	461a      	mov	r2, r3
 800806e:	460b      	mov	r3, r1
 8008070:	80fb      	strh	r3, [r7, #6]
 8008072:	4613      	mov	r3, r2
 8008074:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008076:	7979      	ldrb	r1, [r7, #5]
 8008078:	2300      	movs	r3, #0
 800807a:	9303      	str	r3, [sp, #12]
 800807c:	88fb      	ldrh	r3, [r7, #6]
 800807e:	9302      	str	r3, [sp, #8]
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	9301      	str	r3, [sp, #4]
 8008084:	2301      	movs	r3, #1
 8008086:	9300      	str	r3, [sp, #0]
 8008088:	2302      	movs	r3, #2
 800808a:	2201      	movs	r2, #1
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f000 fabe 	bl	800860e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008092:	2300      	movs	r3, #0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af04      	add	r7, sp, #16
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	4608      	mov	r0, r1
 80080a6:	4611      	mov	r1, r2
 80080a8:	461a      	mov	r2, r3
 80080aa:	4603      	mov	r3, r0
 80080ac:	70fb      	strb	r3, [r7, #3]
 80080ae:	460b      	mov	r3, r1
 80080b0:	70bb      	strb	r3, [r7, #2]
 80080b2:	4613      	mov	r3, r2
 80080b4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80080b6:	7878      	ldrb	r0, [r7, #1]
 80080b8:	78ba      	ldrb	r2, [r7, #2]
 80080ba:	78f9      	ldrb	r1, [r7, #3]
 80080bc:	8b3b      	ldrh	r3, [r7, #24]
 80080be:	9302      	str	r3, [sp, #8]
 80080c0:	7d3b      	ldrb	r3, [r7, #20]
 80080c2:	9301      	str	r3, [sp, #4]
 80080c4:	7c3b      	ldrb	r3, [r7, #16]
 80080c6:	9300      	str	r3, [sp, #0]
 80080c8:	4603      	mov	r3, r0
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fa51 	bl	8008572 <USBH_LL_OpenPipe>

  return USBH_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b082      	sub	sp, #8
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
 80080e2:	460b      	mov	r3, r1
 80080e4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80080e6:	78fb      	ldrb	r3, [r7, #3]
 80080e8:	4619      	mov	r1, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fa70 	bl	80085d0 <USBH_LL_ClosePipe>

  return USBH_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3708      	adds	r7, #8
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b084      	sub	sp, #16
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
 8008102:	460b      	mov	r3, r1
 8008104:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f836 	bl	8008178 <USBH_GetFreePipe>
 800810c:	4603      	mov	r3, r0
 800810e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008110:	89fb      	ldrh	r3, [r7, #14]
 8008112:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008116:	4293      	cmp	r3, r2
 8008118:	d00a      	beq.n	8008130 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800811a:	78fa      	ldrb	r2, [r7, #3]
 800811c:	89fb      	ldrh	r3, [r7, #14]
 800811e:	f003 030f 	and.w	r3, r3, #15
 8008122:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008126:	6879      	ldr	r1, [r7, #4]
 8008128:	33e0      	adds	r3, #224	; 0xe0
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	440b      	add	r3, r1
 800812e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008130:	89fb      	ldrh	r3, [r7, #14]
 8008132:	b2db      	uxtb	r3, r3
}
 8008134:	4618      	mov	r0, r3
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	460b      	mov	r3, r1
 8008146:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008148:	78fb      	ldrb	r3, [r7, #3]
 800814a:	2b0a      	cmp	r3, #10
 800814c:	d80d      	bhi.n	800816a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800814e:	78fb      	ldrb	r3, [r7, #3]
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	33e0      	adds	r3, #224	; 0xe0
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	4413      	add	r3, r2
 8008158:	685a      	ldr	r2, [r3, #4]
 800815a:	78fb      	ldrb	r3, [r7, #3]
 800815c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008160:	6879      	ldr	r1, [r7, #4]
 8008162:	33e0      	adds	r3, #224	; 0xe0
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	440b      	add	r3, r1
 8008168:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008180:	2300      	movs	r3, #0
 8008182:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008184:	2300      	movs	r3, #0
 8008186:	73fb      	strb	r3, [r7, #15]
 8008188:	e00f      	b.n	80081aa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800818a:	7bfb      	ldrb	r3, [r7, #15]
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	33e0      	adds	r3, #224	; 0xe0
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800819a:	2b00      	cmp	r3, #0
 800819c:	d102      	bne.n	80081a4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800819e:	7bfb      	ldrb	r3, [r7, #15]
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	e007      	b.n	80081b4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
 80081a6:	3301      	adds	r3, #1
 80081a8:	73fb      	strb	r3, [r7, #15]
 80081aa:	7bfb      	ldrb	r3, [r7, #15]
 80081ac:	2b0a      	cmp	r3, #10
 80081ae:	d9ec      	bls.n	800818a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80081b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80081c4:	2201      	movs	r2, #1
 80081c6:	490e      	ldr	r1, [pc, #56]	; (8008200 <MX_USB_HOST_Init+0x40>)
 80081c8:	480e      	ldr	r0, [pc, #56]	; (8008204 <MX_USB_HOST_Init+0x44>)
 80081ca:	f7fe fc9f 	bl	8006b0c <USBH_Init>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d001      	beq.n	80081d8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80081d4:	f7f8 fcd4 	bl	8000b80 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80081d8:	490b      	ldr	r1, [pc, #44]	; (8008208 <MX_USB_HOST_Init+0x48>)
 80081da:	480a      	ldr	r0, [pc, #40]	; (8008204 <MX_USB_HOST_Init+0x44>)
 80081dc:	f7fe fd24 	bl	8006c28 <USBH_RegisterClass>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80081e6:	f7f8 fccb 	bl	8000b80 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80081ea:	4806      	ldr	r0, [pc, #24]	; (8008204 <MX_USB_HOST_Init+0x44>)
 80081ec:	f7fe fda8 	bl	8006d40 <USBH_Start>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d001      	beq.n	80081fa <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80081f6:	f7f8 fcc3 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80081fa:	bf00      	nop
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	08008221 	.word	0x08008221
 8008204:	20000250 	.word	0x20000250
 8008208:	2000000c 	.word	0x2000000c

0800820c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008210:	4802      	ldr	r0, [pc, #8]	; (800821c <MX_USB_HOST_Process+0x10>)
 8008212:	f7fe fda5 	bl	8006d60 <USBH_Process>
}
 8008216:	bf00      	nop
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	20000250 	.word	0x20000250

08008220 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	460b      	mov	r3, r1
 800822a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800822c:	78fb      	ldrb	r3, [r7, #3]
 800822e:	3b01      	subs	r3, #1
 8008230:	2b04      	cmp	r3, #4
 8008232:	d819      	bhi.n	8008268 <USBH_UserProcess+0x48>
 8008234:	a201      	add	r2, pc, #4	; (adr r2, 800823c <USBH_UserProcess+0x1c>)
 8008236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823a:	bf00      	nop
 800823c:	08008269 	.word	0x08008269
 8008240:	08008259 	.word	0x08008259
 8008244:	08008269 	.word	0x08008269
 8008248:	08008261 	.word	0x08008261
 800824c:	08008251 	.word	0x08008251
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008250:	4b09      	ldr	r3, [pc, #36]	; (8008278 <USBH_UserProcess+0x58>)
 8008252:	2203      	movs	r2, #3
 8008254:	701a      	strb	r2, [r3, #0]
  break;
 8008256:	e008      	b.n	800826a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008258:	4b07      	ldr	r3, [pc, #28]	; (8008278 <USBH_UserProcess+0x58>)
 800825a:	2202      	movs	r2, #2
 800825c:	701a      	strb	r2, [r3, #0]
  break;
 800825e:	e004      	b.n	800826a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008260:	4b05      	ldr	r3, [pc, #20]	; (8008278 <USBH_UserProcess+0x58>)
 8008262:	2201      	movs	r2, #1
 8008264:	701a      	strb	r2, [r3, #0]
  break;
 8008266:	e000      	b.n	800826a <USBH_UserProcess+0x4a>

  default:
  break;
 8008268:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800826a:	bf00      	nop
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	200000b8 	.word	0x200000b8

0800827c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b08a      	sub	sp, #40	; 0x28
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008284:	f107 0314 	add.w	r3, r7, #20
 8008288:	2200      	movs	r2, #0
 800828a:	601a      	str	r2, [r3, #0]
 800828c:	605a      	str	r2, [r3, #4]
 800828e:	609a      	str	r2, [r3, #8]
 8008290:	60da      	str	r2, [r3, #12]
 8008292:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800829c:	d147      	bne.n	800832e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800829e:	2300      	movs	r3, #0
 80082a0:	613b      	str	r3, [r7, #16]
 80082a2:	4b25      	ldr	r3, [pc, #148]	; (8008338 <HAL_HCD_MspInit+0xbc>)
 80082a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a6:	4a24      	ldr	r2, [pc, #144]	; (8008338 <HAL_HCD_MspInit+0xbc>)
 80082a8:	f043 0301 	orr.w	r3, r3, #1
 80082ac:	6313      	str	r3, [r2, #48]	; 0x30
 80082ae:	4b22      	ldr	r3, [pc, #136]	; (8008338 <HAL_HCD_MspInit+0xbc>)
 80082b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b2:	f003 0301 	and.w	r3, r3, #1
 80082b6:	613b      	str	r3, [r7, #16]
 80082b8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80082ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082c0:	2300      	movs	r3, #0
 80082c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082c4:	2300      	movs	r3, #0
 80082c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80082c8:	f107 0314 	add.w	r3, r7, #20
 80082cc:	4619      	mov	r1, r3
 80082ce:	481b      	ldr	r0, [pc, #108]	; (800833c <HAL_HCD_MspInit+0xc0>)
 80082d0:	f7f9 fbb2 	bl	8001a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80082d4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80082d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082da:	2302      	movs	r3, #2
 80082dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082de:	2300      	movs	r3, #0
 80082e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082e2:	2300      	movs	r3, #0
 80082e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80082e6:	230a      	movs	r3, #10
 80082e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082ea:	f107 0314 	add.w	r3, r7, #20
 80082ee:	4619      	mov	r1, r3
 80082f0:	4812      	ldr	r0, [pc, #72]	; (800833c <HAL_HCD_MspInit+0xc0>)
 80082f2:	f7f9 fba1 	bl	8001a38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80082f6:	4b10      	ldr	r3, [pc, #64]	; (8008338 <HAL_HCD_MspInit+0xbc>)
 80082f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082fa:	4a0f      	ldr	r2, [pc, #60]	; (8008338 <HAL_HCD_MspInit+0xbc>)
 80082fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008300:	6353      	str	r3, [r2, #52]	; 0x34
 8008302:	2300      	movs	r3, #0
 8008304:	60fb      	str	r3, [r7, #12]
 8008306:	4b0c      	ldr	r3, [pc, #48]	; (8008338 <HAL_HCD_MspInit+0xbc>)
 8008308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800830a:	4a0b      	ldr	r2, [pc, #44]	; (8008338 <HAL_HCD_MspInit+0xbc>)
 800830c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008310:	6453      	str	r3, [r2, #68]	; 0x44
 8008312:	4b09      	ldr	r3, [pc, #36]	; (8008338 <HAL_HCD_MspInit+0xbc>)
 8008314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800831a:	60fb      	str	r3, [r7, #12]
 800831c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800831e:	2200      	movs	r2, #0
 8008320:	2100      	movs	r1, #0
 8008322:	2043      	movs	r0, #67	; 0x43
 8008324:	f7f9 fa35 	bl	8001792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008328:	2043      	movs	r0, #67	; 0x43
 800832a:	f7f9 fa4e 	bl	80017ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800832e:	bf00      	nop
 8008330:	3728      	adds	r7, #40	; 0x28
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	40023800 	.word	0x40023800
 800833c:	40020000 	.word	0x40020000

08008340 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800834e:	4618      	mov	r0, r3
 8008350:	f7ff f8d9 	bl	8007506 <USBH_LL_IncTimer>
}
 8008354:	bf00      	nop
 8008356:	3708      	adds	r7, #8
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800836a:	4618      	mov	r0, r3
 800836c:	f7ff f911 	bl	8007592 <USBH_LL_Connect>
}
 8008370:	bf00      	nop
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008386:	4618      	mov	r0, r3
 8008388:	f7ff f91a 	bl	80075c0 <USBH_LL_Disconnect>
}
 800838c:	bf00      	nop
 800838e:	3708      	adds	r7, #8
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	460b      	mov	r3, r1
 800839e:	70fb      	strb	r3, [r7, #3]
 80083a0:	4613      	mov	r3, r2
 80083a2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80083a4:	bf00      	nop
 80083a6:	370c      	adds	r7, #12
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083be:	4618      	mov	r0, r3
 80083c0:	f7ff f8cb 	bl	800755a <USBH_LL_PortEnabled>
} 
 80083c4:	bf00      	nop
 80083c6:	3708      	adds	r7, #8
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083da:	4618      	mov	r0, r3
 80083dc:	f7ff f8cb 	bl	8007576 <USBH_LL_PortDisabled>
} 
 80083e0:	bf00      	nop
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d12a      	bne.n	8008450 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80083fa:	4a18      	ldr	r2, [pc, #96]	; (800845c <USBH_LL_Init+0x74>)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a15      	ldr	r2, [pc, #84]	; (800845c <USBH_LL_Init+0x74>)
 8008406:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800840a:	4b14      	ldr	r3, [pc, #80]	; (800845c <USBH_LL_Init+0x74>)
 800840c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008410:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008412:	4b12      	ldr	r3, [pc, #72]	; (800845c <USBH_LL_Init+0x74>)
 8008414:	2208      	movs	r2, #8
 8008416:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008418:	4b10      	ldr	r3, [pc, #64]	; (800845c <USBH_LL_Init+0x74>)
 800841a:	2201      	movs	r2, #1
 800841c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800841e:	4b0f      	ldr	r3, [pc, #60]	; (800845c <USBH_LL_Init+0x74>)
 8008420:	2200      	movs	r2, #0
 8008422:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008424:	4b0d      	ldr	r3, [pc, #52]	; (800845c <USBH_LL_Init+0x74>)
 8008426:	2202      	movs	r2, #2
 8008428:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800842a:	4b0c      	ldr	r3, [pc, #48]	; (800845c <USBH_LL_Init+0x74>)
 800842c:	2200      	movs	r2, #0
 800842e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008430:	480a      	ldr	r0, [pc, #40]	; (800845c <USBH_LL_Init+0x74>)
 8008432:	f7f9 fcd8 	bl	8001de6 <HAL_HCD_Init>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d001      	beq.n	8008440 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800843c:	f7f8 fba0 	bl	8000b80 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008440:	4806      	ldr	r0, [pc, #24]	; (800845c <USBH_LL_Init+0x74>)
 8008442:	f7fa f8db 	bl	80025fc <HAL_HCD_GetCurrentFrame>
 8008446:	4603      	mov	r3, r0
 8008448:	4619      	mov	r1, r3
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f7ff f84c 	bl	80074e8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3708      	adds	r7, #8
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	20000628 	.word	0x20000628

08008460 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008468:	2300      	movs	r3, #0
 800846a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800846c:	2300      	movs	r3, #0
 800846e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008476:	4618      	mov	r0, r3
 8008478:	f7fa f848 	bl	800250c <HAL_HCD_Start>
 800847c:	4603      	mov	r3, r0
 800847e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008480:	7bfb      	ldrb	r3, [r7, #15]
 8008482:	4618      	mov	r0, r3
 8008484:	f000 f95c 	bl	8008740 <USBH_Get_USB_Status>
 8008488:	4603      	mov	r3, r0
 800848a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800848c:	7bbb      	ldrb	r3, [r7, #14]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b084      	sub	sp, #16
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800849e:	2300      	movs	r3, #0
 80084a0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7fa f850 	bl	8002552 <HAL_HCD_Stop>
 80084b2:	4603      	mov	r3, r0
 80084b4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80084b6:	7bfb      	ldrb	r3, [r7, #15]
 80084b8:	4618      	mov	r0, r3
 80084ba:	f000 f941 	bl	8008740 <USBH_Get_USB_Status>
 80084be:	4603      	mov	r3, r0
 80084c0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80084c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80084d4:	2301      	movs	r3, #1
 80084d6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fa f89a 	bl	8002618 <HAL_HCD_GetCurrentSpeed>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d007      	beq.n	80084fa <USBH_LL_GetSpeed+0x2e>
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d302      	bcc.n	80084f4 <USBH_LL_GetSpeed+0x28>
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d006      	beq.n	8008500 <USBH_LL_GetSpeed+0x34>
 80084f2:	e008      	b.n	8008506 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80084f4:	2300      	movs	r3, #0
 80084f6:	73fb      	strb	r3, [r7, #15]
    break;
 80084f8:	e008      	b.n	800850c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80084fa:	2301      	movs	r3, #1
 80084fc:	73fb      	strb	r3, [r7, #15]
    break;
 80084fe:	e005      	b.n	800850c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008500:	2302      	movs	r3, #2
 8008502:	73fb      	strb	r3, [r7, #15]
    break;
 8008504:	e002      	b.n	800850c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8008506:	2301      	movs	r3, #1
 8008508:	73fb      	strb	r3, [r7, #15]
    break;
 800850a:	bf00      	nop
  }
  return  speed;
 800850c:	7bfb      	ldrb	r3, [r7, #15]
}
 800850e:	4618      	mov	r0, r3
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b084      	sub	sp, #16
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800851e:	2300      	movs	r3, #0
 8008520:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008522:	2300      	movs	r3, #0
 8008524:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800852c:	4618      	mov	r0, r3
 800852e:	f7fa f82d 	bl	800258c <HAL_HCD_ResetPort>
 8008532:	4603      	mov	r3, r0
 8008534:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8008536:	7bfb      	ldrb	r3, [r7, #15]
 8008538:	4618      	mov	r0, r3
 800853a:	f000 f901 	bl	8008740 <USBH_Get_USB_Status>
 800853e:	4603      	mov	r3, r0
 8008540:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008542:	7bbb      	ldrb	r3, [r7, #14]
}
 8008544:	4618      	mov	r0, r3
 8008546:	3710      	adds	r7, #16
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	460b      	mov	r3, r1
 8008556:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800855e:	78fa      	ldrb	r2, [r7, #3]
 8008560:	4611      	mov	r1, r2
 8008562:	4618      	mov	r0, r3
 8008564:	f7fa f835 	bl	80025d2 <HAL_HCD_HC_GetXferCount>
 8008568:	4603      	mov	r3, r0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3708      	adds	r7, #8
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008572:	b590      	push	{r4, r7, lr}
 8008574:	b089      	sub	sp, #36	; 0x24
 8008576:	af04      	add	r7, sp, #16
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	4608      	mov	r0, r1
 800857c:	4611      	mov	r1, r2
 800857e:	461a      	mov	r2, r3
 8008580:	4603      	mov	r3, r0
 8008582:	70fb      	strb	r3, [r7, #3]
 8008584:	460b      	mov	r3, r1
 8008586:	70bb      	strb	r3, [r7, #2]
 8008588:	4613      	mov	r3, r2
 800858a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800858c:	2300      	movs	r3, #0
 800858e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008590:	2300      	movs	r3, #0
 8008592:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800859a:	787c      	ldrb	r4, [r7, #1]
 800859c:	78ba      	ldrb	r2, [r7, #2]
 800859e:	78f9      	ldrb	r1, [r7, #3]
 80085a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80085a2:	9302      	str	r3, [sp, #8]
 80085a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80085a8:	9301      	str	r3, [sp, #4]
 80085aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	4623      	mov	r3, r4
 80085b2:	f7f9 fc7a 	bl	8001eaa <HAL_HCD_HC_Init>
 80085b6:	4603      	mov	r3, r0
 80085b8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80085ba:	7bfb      	ldrb	r3, [r7, #15]
 80085bc:	4618      	mov	r0, r3
 80085be:	f000 f8bf 	bl	8008740 <USBH_Get_USB_Status>
 80085c2:	4603      	mov	r3, r0
 80085c4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80085c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3714      	adds	r7, #20
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd90      	pop	{r4, r7, pc}

080085d0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	460b      	mov	r3, r1
 80085da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085dc:	2300      	movs	r3, #0
 80085de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085e0:	2300      	movs	r3, #0
 80085e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80085ea:	78fa      	ldrb	r2, [r7, #3]
 80085ec:	4611      	mov	r1, r2
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7f9 fcf3 	bl	8001fda <HAL_HCD_HC_Halt>
 80085f4:	4603      	mov	r3, r0
 80085f6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80085f8:	7bfb      	ldrb	r3, [r7, #15]
 80085fa:	4618      	mov	r0, r3
 80085fc:	f000 f8a0 	bl	8008740 <USBH_Get_USB_Status>
 8008600:	4603      	mov	r3, r0
 8008602:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008604:	7bbb      	ldrb	r3, [r7, #14]
}
 8008606:	4618      	mov	r0, r3
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800860e:	b590      	push	{r4, r7, lr}
 8008610:	b089      	sub	sp, #36	; 0x24
 8008612:	af04      	add	r7, sp, #16
 8008614:	6078      	str	r0, [r7, #4]
 8008616:	4608      	mov	r0, r1
 8008618:	4611      	mov	r1, r2
 800861a:	461a      	mov	r2, r3
 800861c:	4603      	mov	r3, r0
 800861e:	70fb      	strb	r3, [r7, #3]
 8008620:	460b      	mov	r3, r1
 8008622:	70bb      	strb	r3, [r7, #2]
 8008624:	4613      	mov	r3, r2
 8008626:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008628:	2300      	movs	r3, #0
 800862a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800862c:	2300      	movs	r3, #0
 800862e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008636:	787c      	ldrb	r4, [r7, #1]
 8008638:	78ba      	ldrb	r2, [r7, #2]
 800863a:	78f9      	ldrb	r1, [r7, #3]
 800863c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008640:	9303      	str	r3, [sp, #12]
 8008642:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008644:	9302      	str	r3, [sp, #8]
 8008646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008648:	9301      	str	r3, [sp, #4]
 800864a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	4623      	mov	r3, r4
 8008652:	f7f9 fce5 	bl	8002020 <HAL_HCD_HC_SubmitRequest>
 8008656:	4603      	mov	r3, r0
 8008658:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800865a:	7bfb      	ldrb	r3, [r7, #15]
 800865c:	4618      	mov	r0, r3
 800865e:	f000 f86f 	bl	8008740 <USBH_Get_USB_Status>
 8008662:	4603      	mov	r3, r0
 8008664:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008666:	7bbb      	ldrb	r3, [r7, #14]
}
 8008668:	4618      	mov	r0, r3
 800866a:	3714      	adds	r7, #20
 800866c:	46bd      	mov	sp, r7
 800866e:	bd90      	pop	{r4, r7, pc}

08008670 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	460b      	mov	r3, r1
 800867a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008682:	78fa      	ldrb	r2, [r7, #3]
 8008684:	4611      	mov	r1, r2
 8008686:	4618      	mov	r0, r3
 8008688:	f7f9 ff8e 	bl	80025a8 <HAL_HCD_HC_GetURBState>
 800868c:	4603      	mov	r3, r0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3708      	adds	r7, #8
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b082      	sub	sp, #8
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
 800869e:	460b      	mov	r3, r1
 80086a0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d103      	bne.n	80086b4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80086ac:	78fb      	ldrb	r3, [r7, #3]
 80086ae:	4618      	mov	r0, r3
 80086b0:	f000 f872 	bl	8008798 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80086b4:	20c8      	movs	r0, #200	; 0xc8
 80086b6:	f7f8 fd0d 	bl	80010d4 <HAL_Delay>
  return USBH_OK;
 80086ba:	2300      	movs	r3, #0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3708      	adds	r7, #8
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	460b      	mov	r3, r1
 80086ce:	70fb      	strb	r3, [r7, #3]
 80086d0:	4613      	mov	r3, r2
 80086d2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80086da:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80086dc:	78fa      	ldrb	r2, [r7, #3]
 80086de:	68f9      	ldr	r1, [r7, #12]
 80086e0:	4613      	mov	r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	4413      	add	r3, r2
 80086e6:	00db      	lsls	r3, r3, #3
 80086e8:	440b      	add	r3, r1
 80086ea:	333b      	adds	r3, #59	; 0x3b
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00a      	beq.n	8008708 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80086f2:	78fa      	ldrb	r2, [r7, #3]
 80086f4:	68f9      	ldr	r1, [r7, #12]
 80086f6:	4613      	mov	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	4413      	add	r3, r2
 80086fc:	00db      	lsls	r3, r3, #3
 80086fe:	440b      	add	r3, r1
 8008700:	3350      	adds	r3, #80	; 0x50
 8008702:	78ba      	ldrb	r2, [r7, #2]
 8008704:	701a      	strb	r2, [r3, #0]
 8008706:	e009      	b.n	800871c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008708:	78fa      	ldrb	r2, [r7, #3]
 800870a:	68f9      	ldr	r1, [r7, #12]
 800870c:	4613      	mov	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	4413      	add	r3, r2
 8008712:	00db      	lsls	r3, r3, #3
 8008714:	440b      	add	r3, r1
 8008716:	3351      	adds	r3, #81	; 0x51
 8008718:	78ba      	ldrb	r2, [r7, #2]
 800871a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3714      	adds	r7, #20
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr

0800872a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b082      	sub	sp, #8
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f7f8 fcce 	bl	80010d4 <HAL_Delay>
}
 8008738:	bf00      	nop
 800873a:	3708      	adds	r7, #8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	4603      	mov	r3, r0
 8008748:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800874a:	2300      	movs	r3, #0
 800874c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800874e:	79fb      	ldrb	r3, [r7, #7]
 8008750:	2b03      	cmp	r3, #3
 8008752:	d817      	bhi.n	8008784 <USBH_Get_USB_Status+0x44>
 8008754:	a201      	add	r2, pc, #4	; (adr r2, 800875c <USBH_Get_USB_Status+0x1c>)
 8008756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800875a:	bf00      	nop
 800875c:	0800876d 	.word	0x0800876d
 8008760:	08008773 	.word	0x08008773
 8008764:	08008779 	.word	0x08008779
 8008768:	0800877f 	.word	0x0800877f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800876c:	2300      	movs	r3, #0
 800876e:	73fb      	strb	r3, [r7, #15]
    break;
 8008770:	e00b      	b.n	800878a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008772:	2302      	movs	r3, #2
 8008774:	73fb      	strb	r3, [r7, #15]
    break;
 8008776:	e008      	b.n	800878a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008778:	2301      	movs	r3, #1
 800877a:	73fb      	strb	r3, [r7, #15]
    break;
 800877c:	e005      	b.n	800878a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800877e:	2302      	movs	r3, #2
 8008780:	73fb      	strb	r3, [r7, #15]
    break;
 8008782:	e002      	b.n	800878a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008784:	2302      	movs	r3, #2
 8008786:	73fb      	strb	r3, [r7, #15]
    break;
 8008788:	bf00      	nop
  }
  return usb_status;
 800878a:	7bfb      	ldrb	r3, [r7, #15]
}
 800878c:	4618      	mov	r0, r3
 800878e:	3714      	adds	r7, #20
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	4603      	mov	r3, r0
 80087a0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 80087a2:	79fb      	ldrb	r3, [r7, #7]
 80087a4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80087a6:	79fb      	ldrb	r3, [r7, #7]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d102      	bne.n	80087b2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 80087ac:	2301      	movs	r3, #1
 80087ae:	73fb      	strb	r3, [r7, #15]
 80087b0:	e001      	b.n	80087b6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80087b2:	2300      	movs	r3, #0
 80087b4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80087b6:	7bfb      	ldrb	r3, [r7, #15]
 80087b8:	461a      	mov	r2, r3
 80087ba:	2101      	movs	r1, #1
 80087bc:	4803      	ldr	r0, [pc, #12]	; (80087cc <MX_DriverVbusFS+0x34>)
 80087be:	f7f9 fad5 	bl	8001d6c <HAL_GPIO_WritePin>
}
 80087c2:	bf00      	nop
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	40020800 	.word	0x40020800

080087d0 <__errno>:
 80087d0:	4b01      	ldr	r3, [pc, #4]	; (80087d8 <__errno+0x8>)
 80087d2:	6818      	ldr	r0, [r3, #0]
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	2000002c 	.word	0x2000002c

080087dc <__libc_init_array>:
 80087dc:	b570      	push	{r4, r5, r6, lr}
 80087de:	4e0d      	ldr	r6, [pc, #52]	; (8008814 <__libc_init_array+0x38>)
 80087e0:	4c0d      	ldr	r4, [pc, #52]	; (8008818 <__libc_init_array+0x3c>)
 80087e2:	1ba4      	subs	r4, r4, r6
 80087e4:	10a4      	asrs	r4, r4, #2
 80087e6:	2500      	movs	r5, #0
 80087e8:	42a5      	cmp	r5, r4
 80087ea:	d109      	bne.n	8008800 <__libc_init_array+0x24>
 80087ec:	4e0b      	ldr	r6, [pc, #44]	; (800881c <__libc_init_array+0x40>)
 80087ee:	4c0c      	ldr	r4, [pc, #48]	; (8008820 <__libc_init_array+0x44>)
 80087f0:	f000 fe36 	bl	8009460 <_init>
 80087f4:	1ba4      	subs	r4, r4, r6
 80087f6:	10a4      	asrs	r4, r4, #2
 80087f8:	2500      	movs	r5, #0
 80087fa:	42a5      	cmp	r5, r4
 80087fc:	d105      	bne.n	800880a <__libc_init_array+0x2e>
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008804:	4798      	blx	r3
 8008806:	3501      	adds	r5, #1
 8008808:	e7ee      	b.n	80087e8 <__libc_init_array+0xc>
 800880a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800880e:	4798      	blx	r3
 8008810:	3501      	adds	r5, #1
 8008812:	e7f2      	b.n	80087fa <__libc_init_array+0x1e>
 8008814:	0800986c 	.word	0x0800986c
 8008818:	0800986c 	.word	0x0800986c
 800881c:	0800986c 	.word	0x0800986c
 8008820:	08009870 	.word	0x08009870

08008824 <malloc>:
 8008824:	4b02      	ldr	r3, [pc, #8]	; (8008830 <malloc+0xc>)
 8008826:	4601      	mov	r1, r0
 8008828:	6818      	ldr	r0, [r3, #0]
 800882a:	f000 b861 	b.w	80088f0 <_malloc_r>
 800882e:	bf00      	nop
 8008830:	2000002c 	.word	0x2000002c

08008834 <free>:
 8008834:	4b02      	ldr	r3, [pc, #8]	; (8008840 <free+0xc>)
 8008836:	4601      	mov	r1, r0
 8008838:	6818      	ldr	r0, [r3, #0]
 800883a:	f000 b80b 	b.w	8008854 <_free_r>
 800883e:	bf00      	nop
 8008840:	2000002c 	.word	0x2000002c

08008844 <memset>:
 8008844:	4402      	add	r2, r0
 8008846:	4603      	mov	r3, r0
 8008848:	4293      	cmp	r3, r2
 800884a:	d100      	bne.n	800884e <memset+0xa>
 800884c:	4770      	bx	lr
 800884e:	f803 1b01 	strb.w	r1, [r3], #1
 8008852:	e7f9      	b.n	8008848 <memset+0x4>

08008854 <_free_r>:
 8008854:	b538      	push	{r3, r4, r5, lr}
 8008856:	4605      	mov	r5, r0
 8008858:	2900      	cmp	r1, #0
 800885a:	d045      	beq.n	80088e8 <_free_r+0x94>
 800885c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008860:	1f0c      	subs	r4, r1, #4
 8008862:	2b00      	cmp	r3, #0
 8008864:	bfb8      	it	lt
 8008866:	18e4      	addlt	r4, r4, r3
 8008868:	f000 f8ac 	bl	80089c4 <__malloc_lock>
 800886c:	4a1f      	ldr	r2, [pc, #124]	; (80088ec <_free_r+0x98>)
 800886e:	6813      	ldr	r3, [r2, #0]
 8008870:	4610      	mov	r0, r2
 8008872:	b933      	cbnz	r3, 8008882 <_free_r+0x2e>
 8008874:	6063      	str	r3, [r4, #4]
 8008876:	6014      	str	r4, [r2, #0]
 8008878:	4628      	mov	r0, r5
 800887a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800887e:	f000 b8a2 	b.w	80089c6 <__malloc_unlock>
 8008882:	42a3      	cmp	r3, r4
 8008884:	d90c      	bls.n	80088a0 <_free_r+0x4c>
 8008886:	6821      	ldr	r1, [r4, #0]
 8008888:	1862      	adds	r2, r4, r1
 800888a:	4293      	cmp	r3, r2
 800888c:	bf04      	itt	eq
 800888e:	681a      	ldreq	r2, [r3, #0]
 8008890:	685b      	ldreq	r3, [r3, #4]
 8008892:	6063      	str	r3, [r4, #4]
 8008894:	bf04      	itt	eq
 8008896:	1852      	addeq	r2, r2, r1
 8008898:	6022      	streq	r2, [r4, #0]
 800889a:	6004      	str	r4, [r0, #0]
 800889c:	e7ec      	b.n	8008878 <_free_r+0x24>
 800889e:	4613      	mov	r3, r2
 80088a0:	685a      	ldr	r2, [r3, #4]
 80088a2:	b10a      	cbz	r2, 80088a8 <_free_r+0x54>
 80088a4:	42a2      	cmp	r2, r4
 80088a6:	d9fa      	bls.n	800889e <_free_r+0x4a>
 80088a8:	6819      	ldr	r1, [r3, #0]
 80088aa:	1858      	adds	r0, r3, r1
 80088ac:	42a0      	cmp	r0, r4
 80088ae:	d10b      	bne.n	80088c8 <_free_r+0x74>
 80088b0:	6820      	ldr	r0, [r4, #0]
 80088b2:	4401      	add	r1, r0
 80088b4:	1858      	adds	r0, r3, r1
 80088b6:	4282      	cmp	r2, r0
 80088b8:	6019      	str	r1, [r3, #0]
 80088ba:	d1dd      	bne.n	8008878 <_free_r+0x24>
 80088bc:	6810      	ldr	r0, [r2, #0]
 80088be:	6852      	ldr	r2, [r2, #4]
 80088c0:	605a      	str	r2, [r3, #4]
 80088c2:	4401      	add	r1, r0
 80088c4:	6019      	str	r1, [r3, #0]
 80088c6:	e7d7      	b.n	8008878 <_free_r+0x24>
 80088c8:	d902      	bls.n	80088d0 <_free_r+0x7c>
 80088ca:	230c      	movs	r3, #12
 80088cc:	602b      	str	r3, [r5, #0]
 80088ce:	e7d3      	b.n	8008878 <_free_r+0x24>
 80088d0:	6820      	ldr	r0, [r4, #0]
 80088d2:	1821      	adds	r1, r4, r0
 80088d4:	428a      	cmp	r2, r1
 80088d6:	bf04      	itt	eq
 80088d8:	6811      	ldreq	r1, [r2, #0]
 80088da:	6852      	ldreq	r2, [r2, #4]
 80088dc:	6062      	str	r2, [r4, #4]
 80088de:	bf04      	itt	eq
 80088e0:	1809      	addeq	r1, r1, r0
 80088e2:	6021      	streq	r1, [r4, #0]
 80088e4:	605c      	str	r4, [r3, #4]
 80088e6:	e7c7      	b.n	8008878 <_free_r+0x24>
 80088e8:	bd38      	pop	{r3, r4, r5, pc}
 80088ea:	bf00      	nop
 80088ec:	200000bc 	.word	0x200000bc

080088f0 <_malloc_r>:
 80088f0:	b570      	push	{r4, r5, r6, lr}
 80088f2:	1ccd      	adds	r5, r1, #3
 80088f4:	f025 0503 	bic.w	r5, r5, #3
 80088f8:	3508      	adds	r5, #8
 80088fa:	2d0c      	cmp	r5, #12
 80088fc:	bf38      	it	cc
 80088fe:	250c      	movcc	r5, #12
 8008900:	2d00      	cmp	r5, #0
 8008902:	4606      	mov	r6, r0
 8008904:	db01      	blt.n	800890a <_malloc_r+0x1a>
 8008906:	42a9      	cmp	r1, r5
 8008908:	d903      	bls.n	8008912 <_malloc_r+0x22>
 800890a:	230c      	movs	r3, #12
 800890c:	6033      	str	r3, [r6, #0]
 800890e:	2000      	movs	r0, #0
 8008910:	bd70      	pop	{r4, r5, r6, pc}
 8008912:	f000 f857 	bl	80089c4 <__malloc_lock>
 8008916:	4a21      	ldr	r2, [pc, #132]	; (800899c <_malloc_r+0xac>)
 8008918:	6814      	ldr	r4, [r2, #0]
 800891a:	4621      	mov	r1, r4
 800891c:	b991      	cbnz	r1, 8008944 <_malloc_r+0x54>
 800891e:	4c20      	ldr	r4, [pc, #128]	; (80089a0 <_malloc_r+0xb0>)
 8008920:	6823      	ldr	r3, [r4, #0]
 8008922:	b91b      	cbnz	r3, 800892c <_malloc_r+0x3c>
 8008924:	4630      	mov	r0, r6
 8008926:	f000 f83d 	bl	80089a4 <_sbrk_r>
 800892a:	6020      	str	r0, [r4, #0]
 800892c:	4629      	mov	r1, r5
 800892e:	4630      	mov	r0, r6
 8008930:	f000 f838 	bl	80089a4 <_sbrk_r>
 8008934:	1c43      	adds	r3, r0, #1
 8008936:	d124      	bne.n	8008982 <_malloc_r+0x92>
 8008938:	230c      	movs	r3, #12
 800893a:	6033      	str	r3, [r6, #0]
 800893c:	4630      	mov	r0, r6
 800893e:	f000 f842 	bl	80089c6 <__malloc_unlock>
 8008942:	e7e4      	b.n	800890e <_malloc_r+0x1e>
 8008944:	680b      	ldr	r3, [r1, #0]
 8008946:	1b5b      	subs	r3, r3, r5
 8008948:	d418      	bmi.n	800897c <_malloc_r+0x8c>
 800894a:	2b0b      	cmp	r3, #11
 800894c:	d90f      	bls.n	800896e <_malloc_r+0x7e>
 800894e:	600b      	str	r3, [r1, #0]
 8008950:	50cd      	str	r5, [r1, r3]
 8008952:	18cc      	adds	r4, r1, r3
 8008954:	4630      	mov	r0, r6
 8008956:	f000 f836 	bl	80089c6 <__malloc_unlock>
 800895a:	f104 000b 	add.w	r0, r4, #11
 800895e:	1d23      	adds	r3, r4, #4
 8008960:	f020 0007 	bic.w	r0, r0, #7
 8008964:	1ac3      	subs	r3, r0, r3
 8008966:	d0d3      	beq.n	8008910 <_malloc_r+0x20>
 8008968:	425a      	negs	r2, r3
 800896a:	50e2      	str	r2, [r4, r3]
 800896c:	e7d0      	b.n	8008910 <_malloc_r+0x20>
 800896e:	428c      	cmp	r4, r1
 8008970:	684b      	ldr	r3, [r1, #4]
 8008972:	bf16      	itet	ne
 8008974:	6063      	strne	r3, [r4, #4]
 8008976:	6013      	streq	r3, [r2, #0]
 8008978:	460c      	movne	r4, r1
 800897a:	e7eb      	b.n	8008954 <_malloc_r+0x64>
 800897c:	460c      	mov	r4, r1
 800897e:	6849      	ldr	r1, [r1, #4]
 8008980:	e7cc      	b.n	800891c <_malloc_r+0x2c>
 8008982:	1cc4      	adds	r4, r0, #3
 8008984:	f024 0403 	bic.w	r4, r4, #3
 8008988:	42a0      	cmp	r0, r4
 800898a:	d005      	beq.n	8008998 <_malloc_r+0xa8>
 800898c:	1a21      	subs	r1, r4, r0
 800898e:	4630      	mov	r0, r6
 8008990:	f000 f808 	bl	80089a4 <_sbrk_r>
 8008994:	3001      	adds	r0, #1
 8008996:	d0cf      	beq.n	8008938 <_malloc_r+0x48>
 8008998:	6025      	str	r5, [r4, #0]
 800899a:	e7db      	b.n	8008954 <_malloc_r+0x64>
 800899c:	200000bc 	.word	0x200000bc
 80089a0:	200000c0 	.word	0x200000c0

080089a4 <_sbrk_r>:
 80089a4:	b538      	push	{r3, r4, r5, lr}
 80089a6:	4c06      	ldr	r4, [pc, #24]	; (80089c0 <_sbrk_r+0x1c>)
 80089a8:	2300      	movs	r3, #0
 80089aa:	4605      	mov	r5, r0
 80089ac:	4608      	mov	r0, r1
 80089ae:	6023      	str	r3, [r4, #0]
 80089b0:	f7f8 f9e8 	bl	8000d84 <_sbrk>
 80089b4:	1c43      	adds	r3, r0, #1
 80089b6:	d102      	bne.n	80089be <_sbrk_r+0x1a>
 80089b8:	6823      	ldr	r3, [r4, #0]
 80089ba:	b103      	cbz	r3, 80089be <_sbrk_r+0x1a>
 80089bc:	602b      	str	r3, [r5, #0]
 80089be:	bd38      	pop	{r3, r4, r5, pc}
 80089c0:	200008ec 	.word	0x200008ec

080089c4 <__malloc_lock>:
 80089c4:	4770      	bx	lr

080089c6 <__malloc_unlock>:
 80089c6:	4770      	bx	lr

080089c8 <sinf>:
 80089c8:	ee10 3a10 	vmov	r3, s0
 80089cc:	b507      	push	{r0, r1, r2, lr}
 80089ce:	4a1d      	ldr	r2, [pc, #116]	; (8008a44 <sinf+0x7c>)
 80089d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089d4:	4293      	cmp	r3, r2
 80089d6:	dc05      	bgt.n	80089e4 <sinf+0x1c>
 80089d8:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8008a48 <sinf+0x80>
 80089dc:	2000      	movs	r0, #0
 80089de:	f000 fc41 	bl	8009264 <__kernel_sinf>
 80089e2:	e004      	b.n	80089ee <sinf+0x26>
 80089e4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80089e8:	db04      	blt.n	80089f4 <sinf+0x2c>
 80089ea:	ee30 0a40 	vsub.f32	s0, s0, s0
 80089ee:	b003      	add	sp, #12
 80089f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80089f4:	4668      	mov	r0, sp
 80089f6:	f000 f829 	bl	8008a4c <__ieee754_rem_pio2f>
 80089fa:	f000 0003 	and.w	r0, r0, #3
 80089fe:	2801      	cmp	r0, #1
 8008a00:	d008      	beq.n	8008a14 <sinf+0x4c>
 8008a02:	2802      	cmp	r0, #2
 8008a04:	d00d      	beq.n	8008a22 <sinf+0x5a>
 8008a06:	b9b0      	cbnz	r0, 8008a36 <sinf+0x6e>
 8008a08:	2001      	movs	r0, #1
 8008a0a:	eddd 0a01 	vldr	s1, [sp, #4]
 8008a0e:	ed9d 0a00 	vldr	s0, [sp]
 8008a12:	e7e4      	b.n	80089de <sinf+0x16>
 8008a14:	eddd 0a01 	vldr	s1, [sp, #4]
 8008a18:	ed9d 0a00 	vldr	s0, [sp]
 8008a1c:	f000 f942 	bl	8008ca4 <__kernel_cosf>
 8008a20:	e7e5      	b.n	80089ee <sinf+0x26>
 8008a22:	2001      	movs	r0, #1
 8008a24:	eddd 0a01 	vldr	s1, [sp, #4]
 8008a28:	ed9d 0a00 	vldr	s0, [sp]
 8008a2c:	f000 fc1a 	bl	8009264 <__kernel_sinf>
 8008a30:	eeb1 0a40 	vneg.f32	s0, s0
 8008a34:	e7db      	b.n	80089ee <sinf+0x26>
 8008a36:	eddd 0a01 	vldr	s1, [sp, #4]
 8008a3a:	ed9d 0a00 	vldr	s0, [sp]
 8008a3e:	f000 f931 	bl	8008ca4 <__kernel_cosf>
 8008a42:	e7f5      	b.n	8008a30 <sinf+0x68>
 8008a44:	3f490fd8 	.word	0x3f490fd8
 8008a48:	00000000 	.word	0x00000000

08008a4c <__ieee754_rem_pio2f>:
 8008a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a4e:	ee10 6a10 	vmov	r6, s0
 8008a52:	4b86      	ldr	r3, [pc, #536]	; (8008c6c <__ieee754_rem_pio2f+0x220>)
 8008a54:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8008a58:	429c      	cmp	r4, r3
 8008a5a:	b087      	sub	sp, #28
 8008a5c:	4605      	mov	r5, r0
 8008a5e:	dc05      	bgt.n	8008a6c <__ieee754_rem_pio2f+0x20>
 8008a60:	2300      	movs	r3, #0
 8008a62:	ed85 0a00 	vstr	s0, [r5]
 8008a66:	6043      	str	r3, [r0, #4]
 8008a68:	2000      	movs	r0, #0
 8008a6a:	e020      	b.n	8008aae <__ieee754_rem_pio2f+0x62>
 8008a6c:	4b80      	ldr	r3, [pc, #512]	; (8008c70 <__ieee754_rem_pio2f+0x224>)
 8008a6e:	429c      	cmp	r4, r3
 8008a70:	dc38      	bgt.n	8008ae4 <__ieee754_rem_pio2f+0x98>
 8008a72:	2e00      	cmp	r6, #0
 8008a74:	f024 040f 	bic.w	r4, r4, #15
 8008a78:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8008c74 <__ieee754_rem_pio2f+0x228>
 8008a7c:	4b7e      	ldr	r3, [pc, #504]	; (8008c78 <__ieee754_rem_pio2f+0x22c>)
 8008a7e:	dd18      	ble.n	8008ab2 <__ieee754_rem_pio2f+0x66>
 8008a80:	429c      	cmp	r4, r3
 8008a82:	ee70 7a47 	vsub.f32	s15, s0, s14
 8008a86:	bf09      	itett	eq
 8008a88:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8008c7c <__ieee754_rem_pio2f+0x230>
 8008a8c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8008c80 <__ieee754_rem_pio2f+0x234>
 8008a90:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8008a94:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8008c84 <__ieee754_rem_pio2f+0x238>
 8008a98:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8008a9c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008aa0:	edc0 6a00 	vstr	s13, [r0]
 8008aa4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008aa8:	edc0 7a01 	vstr	s15, [r0, #4]
 8008aac:	2001      	movs	r0, #1
 8008aae:	b007      	add	sp, #28
 8008ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ab2:	429c      	cmp	r4, r3
 8008ab4:	ee70 7a07 	vadd.f32	s15, s0, s14
 8008ab8:	bf09      	itett	eq
 8008aba:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8008c7c <__ieee754_rem_pio2f+0x230>
 8008abe:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8008c80 <__ieee754_rem_pio2f+0x234>
 8008ac2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8008ac6:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8008c84 <__ieee754_rem_pio2f+0x238>
 8008aca:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008ace:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008ad2:	edc0 6a00 	vstr	s13, [r0]
 8008ad6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008ada:	edc0 7a01 	vstr	s15, [r0, #4]
 8008ade:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae2:	e7e4      	b.n	8008aae <__ieee754_rem_pio2f+0x62>
 8008ae4:	4b68      	ldr	r3, [pc, #416]	; (8008c88 <__ieee754_rem_pio2f+0x23c>)
 8008ae6:	429c      	cmp	r4, r3
 8008ae8:	dc71      	bgt.n	8008bce <__ieee754_rem_pio2f+0x182>
 8008aea:	f000 fc03 	bl	80092f4 <fabsf>
 8008aee:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8008c8c <__ieee754_rem_pio2f+0x240>
 8008af2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008af6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008afa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008afe:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8008b02:	ee17 0a90 	vmov	r0, s15
 8008b06:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008c74 <__ieee754_rem_pio2f+0x228>
 8008b0a:	eeb1 7a46 	vneg.f32	s14, s12
 8008b0e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8008b12:	281f      	cmp	r0, #31
 8008b14:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8008c80 <__ieee754_rem_pio2f+0x234>
 8008b18:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008b1c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008b20:	ee16 3a90 	vmov	r3, s13
 8008b24:	dc1c      	bgt.n	8008b60 <__ieee754_rem_pio2f+0x114>
 8008b26:	1e47      	subs	r7, r0, #1
 8008b28:	4959      	ldr	r1, [pc, #356]	; (8008c90 <__ieee754_rem_pio2f+0x244>)
 8008b2a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8008b2e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8008b32:	428a      	cmp	r2, r1
 8008b34:	d014      	beq.n	8008b60 <__ieee754_rem_pio2f+0x114>
 8008b36:	602b      	str	r3, [r5, #0]
 8008b38:	ed95 7a00 	vldr	s14, [r5]
 8008b3c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008b40:	2e00      	cmp	r6, #0
 8008b42:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008b46:	ed85 0a01 	vstr	s0, [r5, #4]
 8008b4a:	dab0      	bge.n	8008aae <__ieee754_rem_pio2f+0x62>
 8008b4c:	eeb1 7a47 	vneg.f32	s14, s14
 8008b50:	eeb1 0a40 	vneg.f32	s0, s0
 8008b54:	ed85 7a00 	vstr	s14, [r5]
 8008b58:	ed85 0a01 	vstr	s0, [r5, #4]
 8008b5c:	4240      	negs	r0, r0
 8008b5e:	e7a6      	b.n	8008aae <__ieee754_rem_pio2f+0x62>
 8008b60:	15e4      	asrs	r4, r4, #23
 8008b62:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008b66:	1aa2      	subs	r2, r4, r2
 8008b68:	2a08      	cmp	r2, #8
 8008b6a:	dde4      	ble.n	8008b36 <__ieee754_rem_pio2f+0xea>
 8008b6c:	eddf 7a43 	vldr	s15, [pc, #268]	; 8008c7c <__ieee754_rem_pio2f+0x230>
 8008b70:	eef0 6a40 	vmov.f32	s13, s0
 8008b74:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008b78:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008b7c:	eea7 0a27 	vfma.f32	s0, s14, s15
 8008b80:	eddf 7a40 	vldr	s15, [pc, #256]	; 8008c84 <__ieee754_rem_pio2f+0x238>
 8008b84:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8008b88:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8008b8c:	eef0 7a40 	vmov.f32	s15, s0
 8008b90:	ee15 3a90 	vmov	r3, s11
 8008b94:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008b98:	1aa4      	subs	r4, r4, r2
 8008b9a:	2c19      	cmp	r4, #25
 8008b9c:	dc04      	bgt.n	8008ba8 <__ieee754_rem_pio2f+0x15c>
 8008b9e:	edc5 5a00 	vstr	s11, [r5]
 8008ba2:	eeb0 0a66 	vmov.f32	s0, s13
 8008ba6:	e7c7      	b.n	8008b38 <__ieee754_rem_pio2f+0xec>
 8008ba8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8008c94 <__ieee754_rem_pio2f+0x248>
 8008bac:	eeb0 0a66 	vmov.f32	s0, s13
 8008bb0:	eea7 0a25 	vfma.f32	s0, s14, s11
 8008bb4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8008bb8:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008bbc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8008c98 <__ieee754_rem_pio2f+0x24c>
 8008bc0:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8008bc4:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008bc8:	ed85 7a00 	vstr	s14, [r5]
 8008bcc:	e7b4      	b.n	8008b38 <__ieee754_rem_pio2f+0xec>
 8008bce:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008bd2:	db06      	blt.n	8008be2 <__ieee754_rem_pio2f+0x196>
 8008bd4:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008bd8:	edc0 7a01 	vstr	s15, [r0, #4]
 8008bdc:	edc0 7a00 	vstr	s15, [r0]
 8008be0:	e742      	b.n	8008a68 <__ieee754_rem_pio2f+0x1c>
 8008be2:	15e2      	asrs	r2, r4, #23
 8008be4:	3a86      	subs	r2, #134	; 0x86
 8008be6:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8008bea:	ee07 3a90 	vmov	s15, r3
 8008bee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008bf2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8008c9c <__ieee754_rem_pio2f+0x250>
 8008bf6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008bfa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008bfe:	ed8d 7a03 	vstr	s14, [sp, #12]
 8008c02:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008c06:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008c0a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008c0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008c12:	ed8d 7a04 	vstr	s14, [sp, #16]
 8008c16:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008c1a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c22:	edcd 7a05 	vstr	s15, [sp, #20]
 8008c26:	d11e      	bne.n	8008c66 <__ieee754_rem_pio2f+0x21a>
 8008c28:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c30:	bf0c      	ite	eq
 8008c32:	2301      	moveq	r3, #1
 8008c34:	2302      	movne	r3, #2
 8008c36:	491a      	ldr	r1, [pc, #104]	; (8008ca0 <__ieee754_rem_pio2f+0x254>)
 8008c38:	9101      	str	r1, [sp, #4]
 8008c3a:	2102      	movs	r1, #2
 8008c3c:	9100      	str	r1, [sp, #0]
 8008c3e:	a803      	add	r0, sp, #12
 8008c40:	4629      	mov	r1, r5
 8008c42:	f000 f88d 	bl	8008d60 <__kernel_rem_pio2f>
 8008c46:	2e00      	cmp	r6, #0
 8008c48:	f6bf af31 	bge.w	8008aae <__ieee754_rem_pio2f+0x62>
 8008c4c:	edd5 7a00 	vldr	s15, [r5]
 8008c50:	eef1 7a67 	vneg.f32	s15, s15
 8008c54:	edc5 7a00 	vstr	s15, [r5]
 8008c58:	edd5 7a01 	vldr	s15, [r5, #4]
 8008c5c:	eef1 7a67 	vneg.f32	s15, s15
 8008c60:	edc5 7a01 	vstr	s15, [r5, #4]
 8008c64:	e77a      	b.n	8008b5c <__ieee754_rem_pio2f+0x110>
 8008c66:	2303      	movs	r3, #3
 8008c68:	e7e5      	b.n	8008c36 <__ieee754_rem_pio2f+0x1ea>
 8008c6a:	bf00      	nop
 8008c6c:	3f490fd8 	.word	0x3f490fd8
 8008c70:	4016cbe3 	.word	0x4016cbe3
 8008c74:	3fc90f80 	.word	0x3fc90f80
 8008c78:	3fc90fd0 	.word	0x3fc90fd0
 8008c7c:	37354400 	.word	0x37354400
 8008c80:	37354443 	.word	0x37354443
 8008c84:	2e85a308 	.word	0x2e85a308
 8008c88:	43490f80 	.word	0x43490f80
 8008c8c:	3f22f984 	.word	0x3f22f984
 8008c90:	08009494 	.word	0x08009494
 8008c94:	2e85a300 	.word	0x2e85a300
 8008c98:	248d3132 	.word	0x248d3132
 8008c9c:	43800000 	.word	0x43800000
 8008ca0:	08009514 	.word	0x08009514

08008ca4 <__kernel_cosf>:
 8008ca4:	ee10 3a10 	vmov	r3, s0
 8008ca8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008cac:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008cb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cb4:	da05      	bge.n	8008cc2 <__kernel_cosf+0x1e>
 8008cb6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008cba:	ee17 2a90 	vmov	r2, s15
 8008cbe:	2a00      	cmp	r2, #0
 8008cc0:	d03b      	beq.n	8008d3a <__kernel_cosf+0x96>
 8008cc2:	ee20 6a00 	vmul.f32	s12, s0, s0
 8008cc6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008cca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008d40 <__kernel_cosf+0x9c>
 8008cce:	4a1d      	ldr	r2, [pc, #116]	; (8008d44 <__kernel_cosf+0xa0>)
 8008cd0:	ee66 7a07 	vmul.f32	s15, s12, s14
 8008cd4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8008d48 <__kernel_cosf+0xa4>
 8008cd8:	eea6 7a25 	vfma.f32	s14, s12, s11
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8008d4c <__kernel_cosf+0xa8>
 8008ce2:	eee7 5a06 	vfma.f32	s11, s14, s12
 8008ce6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8008d50 <__kernel_cosf+0xac>
 8008cea:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008cee:	eddf 5a19 	vldr	s11, [pc, #100]	; 8008d54 <__kernel_cosf+0xb0>
 8008cf2:	eee7 5a06 	vfma.f32	s11, s14, s12
 8008cf6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8008d58 <__kernel_cosf+0xb4>
 8008cfa:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008cfe:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8008d02:	ee27 7a06 	vmul.f32	s14, s14, s12
 8008d06:	eee6 0a07 	vfma.f32	s1, s12, s14
 8008d0a:	dc04      	bgt.n	8008d16 <__kernel_cosf+0x72>
 8008d0c:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8008d10:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8008d14:	4770      	bx	lr
 8008d16:	4a11      	ldr	r2, [pc, #68]	; (8008d5c <__kernel_cosf+0xb8>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	bfda      	itte	le
 8008d1c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8008d20:	ee07 3a10 	vmovle	s14, r3
 8008d24:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8008d28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008d2c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8008d30:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008d34:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008d38:	4770      	bx	lr
 8008d3a:	eeb0 0a66 	vmov.f32	s0, s13
 8008d3e:	4770      	bx	lr
 8008d40:	ad47d74e 	.word	0xad47d74e
 8008d44:	3e999999 	.word	0x3e999999
 8008d48:	310f74f6 	.word	0x310f74f6
 8008d4c:	b493f27c 	.word	0xb493f27c
 8008d50:	37d00d01 	.word	0x37d00d01
 8008d54:	bab60b61 	.word	0xbab60b61
 8008d58:	3d2aaaab 	.word	0x3d2aaaab
 8008d5c:	3f480000 	.word	0x3f480000

08008d60 <__kernel_rem_pio2f>:
 8008d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d64:	ed2d 8b04 	vpush	{d8-d9}
 8008d68:	b0d7      	sub	sp, #348	; 0x15c
 8008d6a:	469b      	mov	fp, r3
 8008d6c:	460e      	mov	r6, r1
 8008d6e:	4bbe      	ldr	r3, [pc, #760]	; (8009068 <__kernel_rem_pio2f+0x308>)
 8008d70:	9964      	ldr	r1, [sp, #400]	; 0x190
 8008d72:	9002      	str	r0, [sp, #8]
 8008d74:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8008d78:	9865      	ldr	r0, [sp, #404]	; 0x194
 8008d7a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8009078 <__kernel_rem_pio2f+0x318>
 8008d7e:	1ed1      	subs	r1, r2, #3
 8008d80:	2308      	movs	r3, #8
 8008d82:	fb91 f1f3 	sdiv	r1, r1, r3
 8008d86:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8008d8a:	f10b 3aff 	add.w	sl, fp, #4294967295
 8008d8e:	1c4c      	adds	r4, r1, #1
 8008d90:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8008d94:	eba1 050a 	sub.w	r5, r1, sl
 8008d98:	aa1a      	add	r2, sp, #104	; 0x68
 8008d9a:	eb09 070a 	add.w	r7, r9, sl
 8008d9e:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8008da2:	4696      	mov	lr, r2
 8008da4:	2300      	movs	r3, #0
 8008da6:	42bb      	cmp	r3, r7
 8008da8:	dd0f      	ble.n	8008dca <__kernel_rem_pio2f+0x6a>
 8008daa:	af42      	add	r7, sp, #264	; 0x108
 8008dac:	2200      	movs	r2, #0
 8008dae:	454a      	cmp	r2, r9
 8008db0:	dc27      	bgt.n	8008e02 <__kernel_rem_pio2f+0xa2>
 8008db2:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8008db6:	eb0b 0302 	add.w	r3, fp, r2
 8008dba:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8008dbe:	9d02      	ldr	r5, [sp, #8]
 8008dc0:	eddf 7aad 	vldr	s15, [pc, #692]	; 8009078 <__kernel_rem_pio2f+0x318>
 8008dc4:	f04f 0c00 	mov.w	ip, #0
 8008dc8:	e015      	b.n	8008df6 <__kernel_rem_pio2f+0x96>
 8008dca:	42dd      	cmn	r5, r3
 8008dcc:	bf5d      	ittte	pl
 8008dce:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8008dd2:	ee07 2a90 	vmovpl	s15, r2
 8008dd6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8008dda:	eef0 7a47 	vmovmi.f32	s15, s14
 8008dde:	ecee 7a01 	vstmia	lr!, {s15}
 8008de2:	3301      	adds	r3, #1
 8008de4:	e7df      	b.n	8008da6 <__kernel_rem_pio2f+0x46>
 8008de6:	ecf5 6a01 	vldmia	r5!, {s13}
 8008dea:	ed33 7a01 	vldmdb	r3!, {s14}
 8008dee:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008df2:	f10c 0c01 	add.w	ip, ip, #1
 8008df6:	45d4      	cmp	ip, sl
 8008df8:	ddf5      	ble.n	8008de6 <__kernel_rem_pio2f+0x86>
 8008dfa:	ece7 7a01 	vstmia	r7!, {s15}
 8008dfe:	3201      	adds	r2, #1
 8008e00:	e7d5      	b.n	8008dae <__kernel_rem_pio2f+0x4e>
 8008e02:	ab06      	add	r3, sp, #24
 8008e04:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8008e08:	9304      	str	r3, [sp, #16]
 8008e0a:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8009074 <__kernel_rem_pio2f+0x314>
 8008e0e:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8009070 <__kernel_rem_pio2f+0x310>
 8008e12:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8008e16:	9303      	str	r3, [sp, #12]
 8008e18:	464d      	mov	r5, r9
 8008e1a:	ab56      	add	r3, sp, #344	; 0x158
 8008e1c:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8008e20:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8008e24:	3f01      	subs	r7, #1
 8008e26:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8008e2a:	00bf      	lsls	r7, r7, #2
 8008e2c:	ab56      	add	r3, sp, #344	; 0x158
 8008e2e:	19da      	adds	r2, r3, r7
 8008e30:	3a4c      	subs	r2, #76	; 0x4c
 8008e32:	2300      	movs	r3, #0
 8008e34:	1ae9      	subs	r1, r5, r3
 8008e36:	2900      	cmp	r1, #0
 8008e38:	dc4c      	bgt.n	8008ed4 <__kernel_rem_pio2f+0x174>
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	f000 faa4 	bl	8009388 <scalbnf>
 8008e40:	eeb0 8a40 	vmov.f32	s16, s0
 8008e44:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8008e48:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008e4c:	f000 fa5a 	bl	8009304 <floorf>
 8008e50:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008e54:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008e58:	2c00      	cmp	r4, #0
 8008e5a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008e5e:	edcd 7a01 	vstr	s15, [sp, #4]
 8008e62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e66:	ee38 8a67 	vsub.f32	s16, s16, s15
 8008e6a:	dd48      	ble.n	8008efe <__kernel_rem_pio2f+0x19e>
 8008e6c:	1e69      	subs	r1, r5, #1
 8008e6e:	ab06      	add	r3, sp, #24
 8008e70:	f1c4 0008 	rsb	r0, r4, #8
 8008e74:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8008e78:	9a01      	ldr	r2, [sp, #4]
 8008e7a:	fa4c f300 	asr.w	r3, ip, r0
 8008e7e:	441a      	add	r2, r3
 8008e80:	4083      	lsls	r3, r0
 8008e82:	9201      	str	r2, [sp, #4]
 8008e84:	ebac 0203 	sub.w	r2, ip, r3
 8008e88:	ab06      	add	r3, sp, #24
 8008e8a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8008e8e:	f1c4 0307 	rsb	r3, r4, #7
 8008e92:	fa42 f803 	asr.w	r8, r2, r3
 8008e96:	f1b8 0f00 	cmp.w	r8, #0
 8008e9a:	dd41      	ble.n	8008f20 <__kernel_rem_pio2f+0x1c0>
 8008e9c:	9b01      	ldr	r3, [sp, #4]
 8008e9e:	2000      	movs	r0, #0
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	9301      	str	r3, [sp, #4]
 8008ea4:	4601      	mov	r1, r0
 8008ea6:	4285      	cmp	r5, r0
 8008ea8:	dc6d      	bgt.n	8008f86 <__kernel_rem_pio2f+0x226>
 8008eaa:	2c00      	cmp	r4, #0
 8008eac:	dd04      	ble.n	8008eb8 <__kernel_rem_pio2f+0x158>
 8008eae:	2c01      	cmp	r4, #1
 8008eb0:	d07e      	beq.n	8008fb0 <__kernel_rem_pio2f+0x250>
 8008eb2:	2c02      	cmp	r4, #2
 8008eb4:	f000 8086 	beq.w	8008fc4 <__kernel_rem_pio2f+0x264>
 8008eb8:	f1b8 0f02 	cmp.w	r8, #2
 8008ebc:	d130      	bne.n	8008f20 <__kernel_rem_pio2f+0x1c0>
 8008ebe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008ec2:	ee30 8a48 	vsub.f32	s16, s0, s16
 8008ec6:	b359      	cbz	r1, 8008f20 <__kernel_rem_pio2f+0x1c0>
 8008ec8:	4620      	mov	r0, r4
 8008eca:	f000 fa5d 	bl	8009388 <scalbnf>
 8008ece:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008ed2:	e025      	b.n	8008f20 <__kernel_rem_pio2f+0x1c0>
 8008ed4:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008ed8:	a806      	add	r0, sp, #24
 8008eda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ee2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8008ee6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008eea:	ee10 1a10 	vmov	r1, s0
 8008eee:	ed32 0a01 	vldmdb	r2!, {s0}
 8008ef2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8008ef6:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008efa:	3301      	adds	r3, #1
 8008efc:	e79a      	b.n	8008e34 <__kernel_rem_pio2f+0xd4>
 8008efe:	d106      	bne.n	8008f0e <__kernel_rem_pio2f+0x1ae>
 8008f00:	1e6b      	subs	r3, r5, #1
 8008f02:	aa06      	add	r2, sp, #24
 8008f04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008f08:	ea4f 2822 	mov.w	r8, r2, asr #8
 8008f0c:	e7c3      	b.n	8008e96 <__kernel_rem_pio2f+0x136>
 8008f0e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008f12:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f1a:	da31      	bge.n	8008f80 <__kernel_rem_pio2f+0x220>
 8008f1c:	f04f 0800 	mov.w	r8, #0
 8008f20:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f28:	f040 80a8 	bne.w	800907c <__kernel_rem_pio2f+0x31c>
 8008f2c:	1e6b      	subs	r3, r5, #1
 8008f2e:	4618      	mov	r0, r3
 8008f30:	2200      	movs	r2, #0
 8008f32:	4548      	cmp	r0, r9
 8008f34:	da4d      	bge.n	8008fd2 <__kernel_rem_pio2f+0x272>
 8008f36:	2a00      	cmp	r2, #0
 8008f38:	f000 8087 	beq.w	800904a <__kernel_rem_pio2f+0x2ea>
 8008f3c:	aa06      	add	r2, sp, #24
 8008f3e:	3c08      	subs	r4, #8
 8008f40:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008f44:	2900      	cmp	r1, #0
 8008f46:	f000 808d 	beq.w	8009064 <__kernel_rem_pio2f+0x304>
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008f50:	9302      	str	r3, [sp, #8]
 8008f52:	f000 fa19 	bl	8009388 <scalbnf>
 8008f56:	9b02      	ldr	r3, [sp, #8]
 8008f58:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8009074 <__kernel_rem_pio2f+0x314>
 8008f5c:	0099      	lsls	r1, r3, #2
 8008f5e:	aa42      	add	r2, sp, #264	; 0x108
 8008f60:	1850      	adds	r0, r2, r1
 8008f62:	1d05      	adds	r5, r0, #4
 8008f64:	461c      	mov	r4, r3
 8008f66:	2c00      	cmp	r4, #0
 8008f68:	f280 80b8 	bge.w	80090dc <__kernel_rem_pio2f+0x37c>
 8008f6c:	2500      	movs	r5, #0
 8008f6e:	1b5c      	subs	r4, r3, r5
 8008f70:	2c00      	cmp	r4, #0
 8008f72:	f2c0 80d8 	blt.w	8009126 <__kernel_rem_pio2f+0x3c6>
 8008f76:	4f3d      	ldr	r7, [pc, #244]	; (800906c <__kernel_rem_pio2f+0x30c>)
 8008f78:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8009078 <__kernel_rem_pio2f+0x318>
 8008f7c:	2400      	movs	r4, #0
 8008f7e:	e0c6      	b.n	800910e <__kernel_rem_pio2f+0x3ae>
 8008f80:	f04f 0802 	mov.w	r8, #2
 8008f84:	e78a      	b.n	8008e9c <__kernel_rem_pio2f+0x13c>
 8008f86:	ab06      	add	r3, sp, #24
 8008f88:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008f8c:	b949      	cbnz	r1, 8008fa2 <__kernel_rem_pio2f+0x242>
 8008f8e:	b12b      	cbz	r3, 8008f9c <__kernel_rem_pio2f+0x23c>
 8008f90:	aa06      	add	r2, sp, #24
 8008f92:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008f96:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	3001      	adds	r0, #1
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	e781      	b.n	8008ea6 <__kernel_rem_pio2f+0x146>
 8008fa2:	aa06      	add	r2, sp, #24
 8008fa4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8008fa8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8008fac:	460b      	mov	r3, r1
 8008fae:	e7f5      	b.n	8008f9c <__kernel_rem_pio2f+0x23c>
 8008fb0:	1e68      	subs	r0, r5, #1
 8008fb2:	ab06      	add	r3, sp, #24
 8008fb4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fbc:	aa06      	add	r2, sp, #24
 8008fbe:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8008fc2:	e779      	b.n	8008eb8 <__kernel_rem_pio2f+0x158>
 8008fc4:	1e68      	subs	r0, r5, #1
 8008fc6:	ab06      	add	r3, sp, #24
 8008fc8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008fcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fd0:	e7f4      	b.n	8008fbc <__kernel_rem_pio2f+0x25c>
 8008fd2:	a906      	add	r1, sp, #24
 8008fd4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8008fd8:	3801      	subs	r0, #1
 8008fda:	430a      	orrs	r2, r1
 8008fdc:	e7a9      	b.n	8008f32 <__kernel_rem_pio2f+0x1d2>
 8008fde:	f10c 0c01 	add.w	ip, ip, #1
 8008fe2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008fe6:	2a00      	cmp	r2, #0
 8008fe8:	d0f9      	beq.n	8008fde <__kernel_rem_pio2f+0x27e>
 8008fea:	eb0b 0305 	add.w	r3, fp, r5
 8008fee:	aa1a      	add	r2, sp, #104	; 0x68
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	1898      	adds	r0, r3, r2
 8008ff4:	3004      	adds	r0, #4
 8008ff6:	1c69      	adds	r1, r5, #1
 8008ff8:	3704      	adds	r7, #4
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	4465      	add	r5, ip
 8008ffe:	9005      	str	r0, [sp, #20]
 8009000:	428d      	cmp	r5, r1
 8009002:	f6ff af0a 	blt.w	8008e1a <__kernel_rem_pio2f+0xba>
 8009006:	a81a      	add	r0, sp, #104	; 0x68
 8009008:	eb02 0c03 	add.w	ip, r2, r3
 800900c:	4484      	add	ip, r0
 800900e:	9803      	ldr	r0, [sp, #12]
 8009010:	f8dd e008 	ldr.w	lr, [sp, #8]
 8009014:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8009018:	9001      	str	r0, [sp, #4]
 800901a:	ee07 0a90 	vmov	s15, r0
 800901e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009022:	9805      	ldr	r0, [sp, #20]
 8009024:	edcc 7a00 	vstr	s15, [ip]
 8009028:	eddf 7a13 	vldr	s15, [pc, #76]	; 8009078 <__kernel_rem_pio2f+0x318>
 800902c:	eb00 0802 	add.w	r8, r0, r2
 8009030:	f04f 0c00 	mov.w	ip, #0
 8009034:	45d4      	cmp	ip, sl
 8009036:	dd0c      	ble.n	8009052 <__kernel_rem_pio2f+0x2f2>
 8009038:	eb02 0c07 	add.w	ip, r2, r7
 800903c:	a842      	add	r0, sp, #264	; 0x108
 800903e:	4484      	add	ip, r0
 8009040:	edcc 7a01 	vstr	s15, [ip, #4]
 8009044:	3101      	adds	r1, #1
 8009046:	3204      	adds	r2, #4
 8009048:	e7da      	b.n	8009000 <__kernel_rem_pio2f+0x2a0>
 800904a:	9b04      	ldr	r3, [sp, #16]
 800904c:	f04f 0c01 	mov.w	ip, #1
 8009050:	e7c7      	b.n	8008fe2 <__kernel_rem_pio2f+0x282>
 8009052:	ecfe 6a01 	vldmia	lr!, {s13}
 8009056:	ed38 7a01 	vldmdb	r8!, {s14}
 800905a:	f10c 0c01 	add.w	ip, ip, #1
 800905e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009062:	e7e7      	b.n	8009034 <__kernel_rem_pio2f+0x2d4>
 8009064:	3b01      	subs	r3, #1
 8009066:	e769      	b.n	8008f3c <__kernel_rem_pio2f+0x1dc>
 8009068:	08009858 	.word	0x08009858
 800906c:	0800982c 	.word	0x0800982c
 8009070:	43800000 	.word	0x43800000
 8009074:	3b800000 	.word	0x3b800000
 8009078:	00000000 	.word	0x00000000
 800907c:	4260      	negs	r0, r4
 800907e:	eeb0 0a48 	vmov.f32	s0, s16
 8009082:	f000 f981 	bl	8009388 <scalbnf>
 8009086:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8009070 <__kernel_rem_pio2f+0x310>
 800908a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800908e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009092:	db1a      	blt.n	80090ca <__kernel_rem_pio2f+0x36a>
 8009094:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8009074 <__kernel_rem_pio2f+0x314>
 8009098:	ee60 7a27 	vmul.f32	s15, s0, s15
 800909c:	aa06      	add	r2, sp, #24
 800909e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80090a2:	a906      	add	r1, sp, #24
 80090a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80090a8:	3408      	adds	r4, #8
 80090aa:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80090ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80090b2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80090b6:	ee10 3a10 	vmov	r3, s0
 80090ba:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80090be:	1c6b      	adds	r3, r5, #1
 80090c0:	ee17 2a90 	vmov	r2, s15
 80090c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80090c8:	e73f      	b.n	8008f4a <__kernel_rem_pio2f+0x1ea>
 80090ca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80090ce:	aa06      	add	r2, sp, #24
 80090d0:	ee10 3a10 	vmov	r3, s0
 80090d4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80090d8:	462b      	mov	r3, r5
 80090da:	e736      	b.n	8008f4a <__kernel_rem_pio2f+0x1ea>
 80090dc:	aa06      	add	r2, sp, #24
 80090de:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80090e2:	9202      	str	r2, [sp, #8]
 80090e4:	ee07 2a90 	vmov	s15, r2
 80090e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80090ec:	3c01      	subs	r4, #1
 80090ee:	ee67 7a80 	vmul.f32	s15, s15, s0
 80090f2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80090f6:	ed65 7a01 	vstmdb	r5!, {s15}
 80090fa:	e734      	b.n	8008f66 <__kernel_rem_pio2f+0x206>
 80090fc:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8009100:	ecf7 6a01 	vldmia	r7!, {s13}
 8009104:	ed9c 7a00 	vldr	s14, [ip]
 8009108:	eee6 7a87 	vfma.f32	s15, s13, s14
 800910c:	3401      	adds	r4, #1
 800910e:	454c      	cmp	r4, r9
 8009110:	dc01      	bgt.n	8009116 <__kernel_rem_pio2f+0x3b6>
 8009112:	42a5      	cmp	r5, r4
 8009114:	daf2      	bge.n	80090fc <__kernel_rem_pio2f+0x39c>
 8009116:	aa56      	add	r2, sp, #344	; 0x158
 8009118:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800911c:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8009120:	3501      	adds	r5, #1
 8009122:	3804      	subs	r0, #4
 8009124:	e723      	b.n	8008f6e <__kernel_rem_pio2f+0x20e>
 8009126:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8009128:	2a03      	cmp	r2, #3
 800912a:	d84d      	bhi.n	80091c8 <__kernel_rem_pio2f+0x468>
 800912c:	e8df f002 	tbb	[pc, r2]
 8009130:	021f1f3e 	.word	0x021f1f3e
 8009134:	aa56      	add	r2, sp, #344	; 0x158
 8009136:	4411      	add	r1, r2
 8009138:	399c      	subs	r1, #156	; 0x9c
 800913a:	4608      	mov	r0, r1
 800913c:	461c      	mov	r4, r3
 800913e:	2c00      	cmp	r4, #0
 8009140:	dc5f      	bgt.n	8009202 <__kernel_rem_pio2f+0x4a2>
 8009142:	4608      	mov	r0, r1
 8009144:	461c      	mov	r4, r3
 8009146:	2c01      	cmp	r4, #1
 8009148:	dc6b      	bgt.n	8009222 <__kernel_rem_pio2f+0x4c2>
 800914a:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8009078 <__kernel_rem_pio2f+0x318>
 800914e:	2b01      	cmp	r3, #1
 8009150:	dc77      	bgt.n	8009242 <__kernel_rem_pio2f+0x4e2>
 8009152:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8009156:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800915a:	f1b8 0f00 	cmp.w	r8, #0
 800915e:	d176      	bne.n	800924e <__kernel_rem_pio2f+0x4ee>
 8009160:	edc6 6a00 	vstr	s13, [r6]
 8009164:	ed86 7a01 	vstr	s14, [r6, #4]
 8009168:	edc6 7a02 	vstr	s15, [r6, #8]
 800916c:	e02c      	b.n	80091c8 <__kernel_rem_pio2f+0x468>
 800916e:	aa56      	add	r2, sp, #344	; 0x158
 8009170:	4411      	add	r1, r2
 8009172:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8009078 <__kernel_rem_pio2f+0x318>
 8009176:	399c      	subs	r1, #156	; 0x9c
 8009178:	4618      	mov	r0, r3
 800917a:	2800      	cmp	r0, #0
 800917c:	da32      	bge.n	80091e4 <__kernel_rem_pio2f+0x484>
 800917e:	f1b8 0f00 	cmp.w	r8, #0
 8009182:	d035      	beq.n	80091f0 <__kernel_rem_pio2f+0x490>
 8009184:	eef1 7a47 	vneg.f32	s15, s14
 8009188:	edc6 7a00 	vstr	s15, [r6]
 800918c:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8009190:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009194:	a82f      	add	r0, sp, #188	; 0xbc
 8009196:	2101      	movs	r1, #1
 8009198:	428b      	cmp	r3, r1
 800919a:	da2c      	bge.n	80091f6 <__kernel_rem_pio2f+0x496>
 800919c:	f1b8 0f00 	cmp.w	r8, #0
 80091a0:	d001      	beq.n	80091a6 <__kernel_rem_pio2f+0x446>
 80091a2:	eef1 7a67 	vneg.f32	s15, s15
 80091a6:	edc6 7a01 	vstr	s15, [r6, #4]
 80091aa:	e00d      	b.n	80091c8 <__kernel_rem_pio2f+0x468>
 80091ac:	aa56      	add	r2, sp, #344	; 0x158
 80091ae:	4411      	add	r1, r2
 80091b0:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8009078 <__kernel_rem_pio2f+0x318>
 80091b4:	399c      	subs	r1, #156	; 0x9c
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	da0e      	bge.n	80091d8 <__kernel_rem_pio2f+0x478>
 80091ba:	f1b8 0f00 	cmp.w	r8, #0
 80091be:	d001      	beq.n	80091c4 <__kernel_rem_pio2f+0x464>
 80091c0:	eef1 7a67 	vneg.f32	s15, s15
 80091c4:	edc6 7a00 	vstr	s15, [r6]
 80091c8:	9b01      	ldr	r3, [sp, #4]
 80091ca:	f003 0007 	and.w	r0, r3, #7
 80091ce:	b057      	add	sp, #348	; 0x15c
 80091d0:	ecbd 8b04 	vpop	{d8-d9}
 80091d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091d8:	ed31 7a01 	vldmdb	r1!, {s14}
 80091dc:	3b01      	subs	r3, #1
 80091de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80091e2:	e7e8      	b.n	80091b6 <__kernel_rem_pio2f+0x456>
 80091e4:	ed71 7a01 	vldmdb	r1!, {s15}
 80091e8:	3801      	subs	r0, #1
 80091ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80091ee:	e7c4      	b.n	800917a <__kernel_rem_pio2f+0x41a>
 80091f0:	eef0 7a47 	vmov.f32	s15, s14
 80091f4:	e7c8      	b.n	8009188 <__kernel_rem_pio2f+0x428>
 80091f6:	ecb0 7a01 	vldmia	r0!, {s14}
 80091fa:	3101      	adds	r1, #1
 80091fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009200:	e7ca      	b.n	8009198 <__kernel_rem_pio2f+0x438>
 8009202:	ed50 7a02 	vldr	s15, [r0, #-8]
 8009206:	ed70 6a01 	vldmdb	r0!, {s13}
 800920a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800920e:	3c01      	subs	r4, #1
 8009210:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009214:	ed00 7a01 	vstr	s14, [r0, #-4]
 8009218:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800921c:	edc0 7a00 	vstr	s15, [r0]
 8009220:	e78d      	b.n	800913e <__kernel_rem_pio2f+0x3de>
 8009222:	ed50 7a02 	vldr	s15, [r0, #-8]
 8009226:	ed70 6a01 	vldmdb	r0!, {s13}
 800922a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800922e:	3c01      	subs	r4, #1
 8009230:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009234:	ed00 7a01 	vstr	s14, [r0, #-4]
 8009238:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800923c:	edc0 7a00 	vstr	s15, [r0]
 8009240:	e781      	b.n	8009146 <__kernel_rem_pio2f+0x3e6>
 8009242:	ed31 7a01 	vldmdb	r1!, {s14}
 8009246:	3b01      	subs	r3, #1
 8009248:	ee77 7a87 	vadd.f32	s15, s15, s14
 800924c:	e77f      	b.n	800914e <__kernel_rem_pio2f+0x3ee>
 800924e:	eef1 6a66 	vneg.f32	s13, s13
 8009252:	eeb1 7a47 	vneg.f32	s14, s14
 8009256:	edc6 6a00 	vstr	s13, [r6]
 800925a:	ed86 7a01 	vstr	s14, [r6, #4]
 800925e:	eef1 7a67 	vneg.f32	s15, s15
 8009262:	e781      	b.n	8009168 <__kernel_rem_pio2f+0x408>

08009264 <__kernel_sinf>:
 8009264:	ee10 3a10 	vmov	r3, s0
 8009268:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800926c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009270:	da04      	bge.n	800927c <__kernel_sinf+0x18>
 8009272:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009276:	ee17 3a90 	vmov	r3, s15
 800927a:	b35b      	cbz	r3, 80092d4 <__kernel_sinf+0x70>
 800927c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009280:	eddf 7a15 	vldr	s15, [pc, #84]	; 80092d8 <__kernel_sinf+0x74>
 8009284:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80092dc <__kernel_sinf+0x78>
 8009288:	eea7 6a27 	vfma.f32	s12, s14, s15
 800928c:	eddf 7a14 	vldr	s15, [pc, #80]	; 80092e0 <__kernel_sinf+0x7c>
 8009290:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009294:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80092e4 <__kernel_sinf+0x80>
 8009298:	eea7 6a87 	vfma.f32	s12, s15, s14
 800929c:	eddf 7a12 	vldr	s15, [pc, #72]	; 80092e8 <__kernel_sinf+0x84>
 80092a0:	ee60 6a07 	vmul.f32	s13, s0, s14
 80092a4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80092a8:	b930      	cbnz	r0, 80092b8 <__kernel_sinf+0x54>
 80092aa:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80092ec <__kernel_sinf+0x88>
 80092ae:	eea7 6a27 	vfma.f32	s12, s14, s15
 80092b2:	eea6 0a26 	vfma.f32	s0, s12, s13
 80092b6:	4770      	bx	lr
 80092b8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80092bc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80092c0:	eee0 7a86 	vfma.f32	s15, s1, s12
 80092c4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80092c8:	eddf 7a09 	vldr	s15, [pc, #36]	; 80092f0 <__kernel_sinf+0x8c>
 80092cc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80092d0:	ee30 0a60 	vsub.f32	s0, s0, s1
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop
 80092d8:	2f2ec9d3 	.word	0x2f2ec9d3
 80092dc:	b2d72f34 	.word	0xb2d72f34
 80092e0:	3638ef1b 	.word	0x3638ef1b
 80092e4:	b9500d01 	.word	0xb9500d01
 80092e8:	3c088889 	.word	0x3c088889
 80092ec:	be2aaaab 	.word	0xbe2aaaab
 80092f0:	3e2aaaab 	.word	0x3e2aaaab

080092f4 <fabsf>:
 80092f4:	ee10 3a10 	vmov	r3, s0
 80092f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80092fc:	ee00 3a10 	vmov	s0, r3
 8009300:	4770      	bx	lr
	...

08009304 <floorf>:
 8009304:	ee10 3a10 	vmov	r3, s0
 8009308:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800930c:	0dca      	lsrs	r2, r1, #23
 800930e:	3a7f      	subs	r2, #127	; 0x7f
 8009310:	2a16      	cmp	r2, #22
 8009312:	dc2a      	bgt.n	800936a <floorf+0x66>
 8009314:	2a00      	cmp	r2, #0
 8009316:	da11      	bge.n	800933c <floorf+0x38>
 8009318:	eddf 7a18 	vldr	s15, [pc, #96]	; 800937c <floorf+0x78>
 800931c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009320:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009328:	dd05      	ble.n	8009336 <floorf+0x32>
 800932a:	2b00      	cmp	r3, #0
 800932c:	da23      	bge.n	8009376 <floorf+0x72>
 800932e:	4a14      	ldr	r2, [pc, #80]	; (8009380 <floorf+0x7c>)
 8009330:	2900      	cmp	r1, #0
 8009332:	bf18      	it	ne
 8009334:	4613      	movne	r3, r2
 8009336:	ee00 3a10 	vmov	s0, r3
 800933a:	4770      	bx	lr
 800933c:	4911      	ldr	r1, [pc, #68]	; (8009384 <floorf+0x80>)
 800933e:	4111      	asrs	r1, r2
 8009340:	420b      	tst	r3, r1
 8009342:	d0fa      	beq.n	800933a <floorf+0x36>
 8009344:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800937c <floorf+0x78>
 8009348:	ee30 0a27 	vadd.f32	s0, s0, s15
 800934c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009354:	ddef      	ble.n	8009336 <floorf+0x32>
 8009356:	2b00      	cmp	r3, #0
 8009358:	bfbe      	ittt	lt
 800935a:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800935e:	fa40 f202 	asrlt.w	r2, r0, r2
 8009362:	189b      	addlt	r3, r3, r2
 8009364:	ea23 0301 	bic.w	r3, r3, r1
 8009368:	e7e5      	b.n	8009336 <floorf+0x32>
 800936a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800936e:	d3e4      	bcc.n	800933a <floorf+0x36>
 8009370:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009374:	4770      	bx	lr
 8009376:	2300      	movs	r3, #0
 8009378:	e7dd      	b.n	8009336 <floorf+0x32>
 800937a:	bf00      	nop
 800937c:	7149f2ca 	.word	0x7149f2ca
 8009380:	bf800000 	.word	0xbf800000
 8009384:	007fffff 	.word	0x007fffff

08009388 <scalbnf>:
 8009388:	b508      	push	{r3, lr}
 800938a:	ee10 2a10 	vmov	r2, s0
 800938e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8009392:	ed2d 8b02 	vpush	{d8}
 8009396:	eef0 0a40 	vmov.f32	s1, s0
 800939a:	d004      	beq.n	80093a6 <scalbnf+0x1e>
 800939c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80093a0:	d306      	bcc.n	80093b0 <scalbnf+0x28>
 80093a2:	ee70 0a00 	vadd.f32	s1, s0, s0
 80093a6:	ecbd 8b02 	vpop	{d8}
 80093aa:	eeb0 0a60 	vmov.f32	s0, s1
 80093ae:	bd08      	pop	{r3, pc}
 80093b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80093b4:	d21c      	bcs.n	80093f0 <scalbnf+0x68>
 80093b6:	4b1f      	ldr	r3, [pc, #124]	; (8009434 <scalbnf+0xac>)
 80093b8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009438 <scalbnf+0xb0>
 80093bc:	4298      	cmp	r0, r3
 80093be:	ee60 0a27 	vmul.f32	s1, s0, s15
 80093c2:	db10      	blt.n	80093e6 <scalbnf+0x5e>
 80093c4:	ee10 2a90 	vmov	r2, s1
 80093c8:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80093cc:	3b19      	subs	r3, #25
 80093ce:	4403      	add	r3, r0
 80093d0:	2bfe      	cmp	r3, #254	; 0xfe
 80093d2:	dd0f      	ble.n	80093f4 <scalbnf+0x6c>
 80093d4:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800943c <scalbnf+0xb4>
 80093d8:	eeb0 0a48 	vmov.f32	s0, s16
 80093dc:	f000 f834 	bl	8009448 <copysignf>
 80093e0:	ee60 0a08 	vmul.f32	s1, s0, s16
 80093e4:	e7df      	b.n	80093a6 <scalbnf+0x1e>
 80093e6:	eddf 7a16 	vldr	s15, [pc, #88]	; 8009440 <scalbnf+0xb8>
 80093ea:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80093ee:	e7da      	b.n	80093a6 <scalbnf+0x1e>
 80093f0:	0ddb      	lsrs	r3, r3, #23
 80093f2:	e7ec      	b.n	80093ce <scalbnf+0x46>
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	dd06      	ble.n	8009406 <scalbnf+0x7e>
 80093f8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80093fc:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8009400:	ee00 3a90 	vmov	s1, r3
 8009404:	e7cf      	b.n	80093a6 <scalbnf+0x1e>
 8009406:	f113 0f16 	cmn.w	r3, #22
 800940a:	da06      	bge.n	800941a <scalbnf+0x92>
 800940c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009410:	4298      	cmp	r0, r3
 8009412:	dcdf      	bgt.n	80093d4 <scalbnf+0x4c>
 8009414:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8009440 <scalbnf+0xb8>
 8009418:	e7de      	b.n	80093d8 <scalbnf+0x50>
 800941a:	3319      	adds	r3, #25
 800941c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8009420:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8009424:	eddf 7a07 	vldr	s15, [pc, #28]	; 8009444 <scalbnf+0xbc>
 8009428:	ee07 3a10 	vmov	s14, r3
 800942c:	ee67 0a27 	vmul.f32	s1, s14, s15
 8009430:	e7b9      	b.n	80093a6 <scalbnf+0x1e>
 8009432:	bf00      	nop
 8009434:	ffff3cb0 	.word	0xffff3cb0
 8009438:	4c000000 	.word	0x4c000000
 800943c:	7149f2ca 	.word	0x7149f2ca
 8009440:	0da24260 	.word	0x0da24260
 8009444:	33000000 	.word	0x33000000

08009448 <copysignf>:
 8009448:	ee10 3a10 	vmov	r3, s0
 800944c:	ee10 2a90 	vmov	r2, s1
 8009450:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009454:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009458:	4313      	orrs	r3, r2
 800945a:	ee00 3a10 	vmov	s0, r3
 800945e:	4770      	bx	lr

08009460 <_init>:
 8009460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009462:	bf00      	nop
 8009464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009466:	bc08      	pop	{r3}
 8009468:	469e      	mov	lr, r3
 800946a:	4770      	bx	lr

0800946c <_fini>:
 800946c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946e:	bf00      	nop
 8009470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009472:	bc08      	pop	{r3}
 8009474:	469e      	mov	lr, r3
 8009476:	4770      	bx	lr
